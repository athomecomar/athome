// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: semantic.proto

package pbsemantic

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}
)

// define the regex for a UUID once up-front
var _semantic_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on Category with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Category) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for ParentId

	for idx, item := range m.GetChilds() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CategoryValidationError{
					field:  fmt.Sprintf("Childs[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// CategoryValidationError is the validation error returned by
// Category.Validate if the designated constraints aren't met.
type CategoryValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CategoryValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CategoryValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CategoryValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CategoryValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CategoryValidationError) ErrorName() string { return "CategoryValidationError" }

// Error satisfies the builtin error interface
func (e CategoryValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCategory.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CategoryValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CategoryValidationError{}

// Validate checks the field values on AttributeSchema with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *AttributeSchema) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for CategoryId

	// no validation rules for Name

	// no validation rules for ValueType

	return nil
}

// AttributeSchemaValidationError is the validation error returned by
// AttributeSchema.Validate if the designated constraints aren't met.
type AttributeSchemaValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AttributeSchemaValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AttributeSchemaValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AttributeSchemaValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AttributeSchemaValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AttributeSchemaValidationError) ErrorName() string { return "AttributeSchemaValidationError" }

// Error satisfies the builtin error interface
func (e AttributeSchemaValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAttributeSchema.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AttributeSchemaValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AttributeSchemaValidationError{}

// Validate checks the field values on GetCategoriesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetCategoriesResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetCategories() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetCategoriesResponseValidationError{
					field:  fmt.Sprintf("Categories[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// GetCategoriesResponseValidationError is the validation error returned by
// GetCategoriesResponse.Validate if the designated constraints aren't met.
type GetCategoriesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCategoriesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCategoriesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCategoriesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCategoriesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCategoriesResponseValidationError) ErrorName() string {
	return "GetCategoriesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetCategoriesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCategoriesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCategoriesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCategoriesResponseValidationError{}

// Validate checks the field values on GetAttributesSchemaRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetAttributesSchemaRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for CategoryId

	return nil
}

// GetAttributesSchemaRequestValidationError is the validation error returned
// by GetAttributesSchemaRequest.Validate if the designated constraints aren't met.
type GetAttributesSchemaRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAttributesSchemaRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAttributesSchemaRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAttributesSchemaRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAttributesSchemaRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAttributesSchemaRequestValidationError) ErrorName() string {
	return "GetAttributesSchemaRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetAttributesSchemaRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAttributesSchemaRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAttributesSchemaRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAttributesSchemaRequestValidationError{}

// Validate checks the field values on GetAttributesSchemaResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetAttributesSchemaResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetAttributes() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetAttributesSchemaResponseValidationError{
					field:  fmt.Sprintf("Attributes[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// GetAttributesSchemaResponseValidationError is the validation error returned
// by GetAttributesSchemaResponse.Validate if the designated constraints
// aren't met.
type GetAttributesSchemaResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAttributesSchemaResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAttributesSchemaResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAttributesSchemaResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAttributesSchemaResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAttributesSchemaResponseValidationError) ErrorName() string {
	return "GetAttributesSchemaResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetAttributesSchemaResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAttributesSchemaResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAttributesSchemaResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAttributesSchemaResponseValidationError{}

// Validate checks the field values on AttributeData with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *AttributeData) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for SchemaId

	// no validation rules for ValueType

	return nil
}

// AttributeDataValidationError is the validation error returned by
// AttributeData.Validate if the designated constraints aren't met.
type AttributeDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AttributeDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AttributeDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AttributeDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AttributeDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AttributeDataValidationError) ErrorName() string { return "AttributeDataValidationError" }

// Error satisfies the builtin error interface
func (e AttributeDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAttributeData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AttributeDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AttributeDataValidationError{}

// Validate checks the field values on PredictCategoryRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *PredictCategoryRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Title

	return nil
}

// PredictCategoryRequestValidationError is the validation error returned by
// PredictCategoryRequest.Validate if the designated constraints aren't met.
type PredictCategoryRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PredictCategoryRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PredictCategoryRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PredictCategoryRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PredictCategoryRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PredictCategoryRequestValidationError) ErrorName() string {
	return "PredictCategoryRequestValidationError"
}

// Error satisfies the builtin error interface
func (e PredictCategoryRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPredictCategoryRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PredictCategoryRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PredictCategoryRequestValidationError{}

// Validate checks the field values on PredictCategoryResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *PredictCategoryResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetCategory()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PredictCategoryResponseValidationError{
				field:  "Category",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Score

	return nil
}

// PredictCategoryResponseValidationError is the validation error returned by
// PredictCategoryResponse.Validate if the designated constraints aren't met.
type PredictCategoryResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PredictCategoryResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PredictCategoryResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PredictCategoryResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PredictCategoryResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PredictCategoryResponseValidationError) ErrorName() string {
	return "PredictCategoryResponseValidationError"
}

// Error satisfies the builtin error interface
func (e PredictCategoryResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPredictCategoryResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PredictCategoryResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PredictCategoryResponseValidationError{}
