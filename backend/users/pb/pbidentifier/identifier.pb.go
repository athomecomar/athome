// Code generated by protoc-gen-go. DO NOT EDIT.
// source: identifier.proto

package pbidentifier

import (
	context "context"
	fmt "fmt"
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type ValidateLicenseRequest struct {
	Category             string   `protobuf:"bytes,1,opt,name=category,proto3" json:"category,omitempty"`
	Dni                  uint64   `protobuf:"varint,2,opt,name=dni,proto3" json:"dni,omitempty"`
	License              string   `protobuf:"bytes,3,opt,name=license,proto3" json:"license,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ValidateLicenseRequest) Reset()         { *m = ValidateLicenseRequest{} }
func (m *ValidateLicenseRequest) String() string { return proto.CompactTextString(m) }
func (*ValidateLicenseRequest) ProtoMessage()    {}
func (*ValidateLicenseRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f5f65ec84694b166, []int{0}
}

func (m *ValidateLicenseRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ValidateLicenseRequest.Unmarshal(m, b)
}
func (m *ValidateLicenseRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ValidateLicenseRequest.Marshal(b, m, deterministic)
}
func (m *ValidateLicenseRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ValidateLicenseRequest.Merge(m, src)
}
func (m *ValidateLicenseRequest) XXX_Size() int {
	return xxx_messageInfo_ValidateLicenseRequest.Size(m)
}
func (m *ValidateLicenseRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ValidateLicenseRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ValidateLicenseRequest proto.InternalMessageInfo

func (m *ValidateLicenseRequest) GetCategory() string {
	if m != nil {
		return m.Category
	}
	return ""
}

func (m *ValidateLicenseRequest) GetDni() uint64 {
	if m != nil {
		return m.Dni
	}
	return 0
}

func (m *ValidateLicenseRequest) GetLicense() string {
	if m != nil {
		return m.License
	}
	return ""
}

type ValidateLicenseResponse struct {
	Valid                bool     `protobuf:"varint,1,opt,name=valid,proto3" json:"valid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ValidateLicenseResponse) Reset()         { *m = ValidateLicenseResponse{} }
func (m *ValidateLicenseResponse) String() string { return proto.CompactTextString(m) }
func (*ValidateLicenseResponse) ProtoMessage()    {}
func (*ValidateLicenseResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f5f65ec84694b166, []int{1}
}

func (m *ValidateLicenseResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ValidateLicenseResponse.Unmarshal(m, b)
}
func (m *ValidateLicenseResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ValidateLicenseResponse.Marshal(b, m, deterministic)
}
func (m *ValidateLicenseResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ValidateLicenseResponse.Merge(m, src)
}
func (m *ValidateLicenseResponse) XXX_Size() int {
	return xxx_messageInfo_ValidateLicenseResponse.Size(m)
}
func (m *ValidateLicenseResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ValidateLicenseResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ValidateLicenseResponse proto.InternalMessageInfo

func (m *ValidateLicenseResponse) GetValid() bool {
	if m != nil {
		return m.Valid
	}
	return false
}

func init() {
	proto.RegisterType((*ValidateLicenseRequest)(nil), "identifier.ValidateLicenseRequest")
	proto.RegisterType((*ValidateLicenseResponse)(nil), "identifier.ValidateLicenseResponse")
}

func init() {
	proto.RegisterFile("identifier.proto", fileDescriptor_f5f65ec84694b166)
}

var fileDescriptor_f5f65ec84694b166 = []byte{
	// 248 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0xc8, 0x4c, 0x49, 0xcd,
	0x2b, 0xc9, 0x4c, 0xcb, 0x4c, 0x2d, 0xd2, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x42, 0x88,
	0x48, 0x89, 0x97, 0x25, 0xe6, 0x64, 0xa6, 0x24, 0x96, 0xa4, 0xea, 0xc3, 0x18, 0x10, 0x45, 0x4a,
	0x3d, 0x8c, 0x5c, 0x62, 0x61, 0x50, 0x21, 0x9f, 0xcc, 0xe4, 0xd4, 0xbc, 0xe2, 0xd4, 0xa0, 0xd4,
	0xc2, 0xd2, 0xd4, 0xe2, 0x12, 0x21, 0x33, 0x2e, 0x8e, 0xe4, 0xc4, 0x92, 0xd4, 0xf4, 0xfc, 0xa2,
	0x4a, 0x09, 0x46, 0x05, 0x46, 0x0d, 0x4e, 0x27, 0xa9, 0x5f, 0x4e, 0xe2, 0x45, 0xa2, 0x41, 0x3c,
	0x05, 0xc5, 0x95, 0xc9, 0x19, 0xf9, 0x39, 0xf9, 0xe9, 0x99, 0xc5, 0x25, 0x41, 0xac, 0xb9, 0xa9,
	0x29, 0x99, 0xc9, 0x41, 0x70, 0xb5, 0x42, 0x0a, 0x5c, 0xcc, 0x29, 0x79, 0x99, 0x12, 0x4c, 0x0a,
	0x8c, 0x1a, 0x2c, 0x4e, 0x7c, 0xbf, 0x9c, 0xb8, 0x8d, 0x38, 0x05, 0xfe, 0x1f, 0xbc, 0xae, 0xaf,
	0xb0, 0xbf, 0xc5, 0x36, 0x08, 0x24, 0x25, 0x24, 0xc1, 0xc5, 0x9e, 0x03, 0xb1, 0x4b, 0x82, 0x19,
	0x64, 0x70, 0x10, 0x8c, 0xab, 0xa4, 0xcf, 0x25, 0x8e, 0xe1, 0x9a, 0xe2, 0x82, 0xfc, 0xbc, 0xe2,
	0x54, 0x21, 0x11, 0x2e, 0x56, 0xb0, 0xdb, 0xc1, 0x6e, 0xe1, 0x08, 0x82, 0x70, 0x8c, 0xb2, 0xb8,
	0xb8, 0x3c, 0xe1, 0xde, 0x14, 0x8a, 0xe1, 0xe2, 0x47, 0xd3, 0x2e, 0xa4, 0xa4, 0x87, 0x14, 0x30,
	0xd8, 0x7d, 0x2a, 0xa5, 0x8c, 0x57, 0x0d, 0xc4, 0x7e, 0x25, 0x06, 0x27, 0x81, 0x28, 0x3e, 0x3d,
	0xfd, 0x82, 0x24, 0x84, 0xda, 0x24, 0x36, 0x70, 0x20, 0x1a, 0x03, 0x02, 0x00, 0x00, 0xff, 0xff,
	0x54, 0xed, 0xfb, 0x07, 0x7d, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// IdentifierClient is the client API for Identifier service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type IdentifierClient interface {
	ValidateLicense(ctx context.Context, in *ValidateLicenseRequest, opts ...grpc.CallOption) (*ValidateLicenseResponse, error)
}

type identifierClient struct {
	cc grpc.ClientConnInterface
}

func NewIdentifierClient(cc grpc.ClientConnInterface) IdentifierClient {
	return &identifierClient{cc}
}

func (c *identifierClient) ValidateLicense(ctx context.Context, in *ValidateLicenseRequest, opts ...grpc.CallOption) (*ValidateLicenseResponse, error) {
	out := new(ValidateLicenseResponse)
	err := c.cc.Invoke(ctx, "/identifier.Identifier/ValidateLicense", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IdentifierServer is the server API for Identifier service.
type IdentifierServer interface {
	ValidateLicense(context.Context, *ValidateLicenseRequest) (*ValidateLicenseResponse, error)
}

// UnimplementedIdentifierServer can be embedded to have forward compatible implementations.
type UnimplementedIdentifierServer struct {
}

func (*UnimplementedIdentifierServer) ValidateLicense(ctx context.Context, req *ValidateLicenseRequest) (*ValidateLicenseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateLicense not implemented")
}

func RegisterIdentifierServer(s *grpc.Server, srv IdentifierServer) {
	s.RegisterService(&_Identifier_serviceDesc, srv)
}

func _Identifier_ValidateLicense_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidateLicenseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentifierServer).ValidateLicense(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/identifier.Identifier/ValidateLicense",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentifierServer).ValidateLicense(ctx, req.(*ValidateLicenseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Identifier_serviceDesc = grpc.ServiceDesc{
	ServiceName: "identifier.Identifier",
	HandlerType: (*IdentifierServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ValidateLicense",
			Handler:    _Identifier_ValidateLicense_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "identifier.proto",
}
