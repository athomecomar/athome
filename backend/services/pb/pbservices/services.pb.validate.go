// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: services.proto

package pbservices

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}
)

// define the regex for a UUID once up-front
var _services_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on RetrieveServiceDetailRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RetrieveServiceDetailRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for ServiceId

	return nil
}

// RetrieveServiceDetailRequestValidationError is the validation error returned
// by RetrieveServiceDetailRequest.Validate if the designated constraints
// aren't met.
type RetrieveServiceDetailRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RetrieveServiceDetailRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RetrieveServiceDetailRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RetrieveServiceDetailRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RetrieveServiceDetailRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RetrieveServiceDetailRequestValidationError) ErrorName() string {
	return "RetrieveServiceDetailRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RetrieveServiceDetailRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRetrieveServiceDetailRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RetrieveServiceDetailRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RetrieveServiceDetailRequestValidationError{}

// Validate checks the field values on RetrieveServiceDetailResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RetrieveServiceDetailResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetService()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RetrieveServiceDetailResponseValidationError{
				field:  "Service",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RetrieveServiceDetailResponseValidationError{
				field:  "User",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetAddress()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RetrieveServiceDetailResponseValidationError{
				field:  "Address",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetCalendar()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RetrieveServiceDetailResponseValidationError{
				field:  "Calendar",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// RetrieveServiceDetailResponseValidationError is the validation error
// returned by RetrieveServiceDetailResponse.Validate if the designated
// constraints aren't met.
type RetrieveServiceDetailResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RetrieveServiceDetailResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RetrieveServiceDetailResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RetrieveServiceDetailResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RetrieveServiceDetailResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RetrieveServiceDetailResponseValidationError) ErrorName() string {
	return "RetrieveServiceDetailResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RetrieveServiceDetailResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRetrieveServiceDetailResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RetrieveServiceDetailResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RetrieveServiceDetailResponseValidationError{}

// Validate checks the field values on UserData with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *UserData) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Name

	// no validation rules for Surname

	return nil
}

// UserDataValidationError is the validation error returned by
// UserData.Validate if the designated constraints aren't met.
type UserDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserDataValidationError) ErrorName() string { return "UserDataValidationError" }

// Error satisfies the builtin error interface
func (e UserDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserDataValidationError{}

// Validate checks the field values on AddressData with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *AddressData) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Zipcode

	// no validation rules for Street

	// no validation rules for Number

	// no validation rules for Floor

	// no validation rules for Department

	return nil
}

// AddressDataValidationError is the validation error returned by
// AddressData.Validate if the designated constraints aren't met.
type AddressDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddressDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddressDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddressDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddressDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddressDataValidationError) ErrorName() string { return "AddressDataValidationError" }

// Error satisfies the builtin error interface
func (e AddressDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddressData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddressDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddressDataValidationError{}

// Validate checks the field values on RetrieveCalendarRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RetrieveCalendarRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for CalendarId

	return nil
}

// RetrieveCalendarRequestValidationError is the validation error returned by
// RetrieveCalendarRequest.Validate if the designated constraints aren't met.
type RetrieveCalendarRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RetrieveCalendarRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RetrieveCalendarRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RetrieveCalendarRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RetrieveCalendarRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RetrieveCalendarRequestValidationError) ErrorName() string {
	return "RetrieveCalendarRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RetrieveCalendarRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRetrieveCalendarRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RetrieveCalendarRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RetrieveCalendarRequestValidationError{}

// Validate checks the field values on RetrieveMyCalendarsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RetrieveMyCalendarsRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for AccessToken

	return nil
}

// RetrieveMyCalendarsRequestValidationError is the validation error returned
// by RetrieveMyCalendarsRequest.Validate if the designated constraints aren't met.
type RetrieveMyCalendarsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RetrieveMyCalendarsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RetrieveMyCalendarsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RetrieveMyCalendarsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RetrieveMyCalendarsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RetrieveMyCalendarsRequestValidationError) ErrorName() string {
	return "RetrieveMyCalendarsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RetrieveMyCalendarsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRetrieveMyCalendarsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RetrieveMyCalendarsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RetrieveMyCalendarsRequestValidationError{}

// Validate checks the field values on RetrieveMyCalendarsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RetrieveMyCalendarsResponse) Validate() error {
	if m == nil {
		return nil
	}

	for key, val := range m.GetCalendars() {
		_ = val

		// no validation rules for Calendars[key]

		if v, ok := interface{}(val).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RetrieveMyCalendarsResponseValidationError{
					field:  fmt.Sprintf("Calendars[%v]", key),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// RetrieveMyCalendarsResponseValidationError is the validation error returned
// by RetrieveMyCalendarsResponse.Validate if the designated constraints
// aren't met.
type RetrieveMyCalendarsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RetrieveMyCalendarsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RetrieveMyCalendarsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RetrieveMyCalendarsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RetrieveMyCalendarsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RetrieveMyCalendarsResponseValidationError) ErrorName() string {
	return "RetrieveMyCalendarsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RetrieveMyCalendarsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRetrieveMyCalendarsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RetrieveMyCalendarsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RetrieveMyCalendarsResponseValidationError{}

// Validate checks the field values on RetrieveRegistryRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RetrieveRegistryRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for AccessToken

	return nil
}

// RetrieveRegistryRequestValidationError is the validation error returned by
// RetrieveRegistryRequest.Validate if the designated constraints aren't met.
type RetrieveRegistryRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RetrieveRegistryRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RetrieveRegistryRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RetrieveRegistryRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RetrieveRegistryRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RetrieveRegistryRequestValidationError) ErrorName() string {
	return "RetrieveRegistryRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RetrieveRegistryRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRetrieveRegistryRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RetrieveRegistryRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RetrieveRegistryRequestValidationError{}

// Validate checks the field values on RetrieveRegistryResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RetrieveRegistryResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for RegistryId

	// no validation rules for Stage

	if v, ok := interface{}(m.GetFirst()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RetrieveRegistryResponseValidationError{
				field:  "First",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetSecond()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RetrieveRegistryResponseValidationError{
				field:  "Second",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetThird()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RetrieveRegistryResponseValidationError{
				field:  "Third",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// RetrieveRegistryResponseValidationError is the validation error returned by
// RetrieveRegistryResponse.Validate if the designated constraints aren't met.
type RetrieveRegistryResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RetrieveRegistryResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RetrieveRegistryResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RetrieveRegistryResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RetrieveRegistryResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RetrieveRegistryResponseValidationError) ErrorName() string {
	return "RetrieveRegistryResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RetrieveRegistryResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRetrieveRegistryResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RetrieveRegistryResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RetrieveRegistryResponseValidationError{}

// Validate checks the field values on ServiceData with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *ServiceData) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for AddressId

	// no validation rules for Name

	// no validation rules for DurationInMinutes

	if v, ok := interface{}(m.GetPrice()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ServiceDataValidationError{
				field:  "Price",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for CalendarId

	// no validation rules for UserId

	return nil
}

// ServiceDataValidationError is the validation error returned by
// ServiceData.Validate if the designated constraints aren't met.
type ServiceDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ServiceDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ServiceDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ServiceDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ServiceDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ServiceDataValidationError) ErrorName() string { return "ServiceDataValidationError" }

// Error satisfies the builtin error interface
func (e ServiceDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sServiceData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ServiceDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ServiceDataValidationError{}

// Validate checks the field values on FirstRequest with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *FirstRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for AccessToken

	if v, ok := interface{}(m.GetBody()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FirstRequestValidationError{
				field:  "Body",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// FirstRequestValidationError is the validation error returned by
// FirstRequest.Validate if the designated constraints aren't met.
type FirstRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FirstRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FirstRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FirstRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FirstRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FirstRequestValidationError) ErrorName() string { return "FirstRequestValidationError" }

// Error satisfies the builtin error interface
func (e FirstRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFirstRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FirstRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FirstRequestValidationError{}

// Validate checks the field values on FirstResponse with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *FirstResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for RegistryId

	return nil
}

// FirstResponseValidationError is the validation error returned by
// FirstResponse.Validate if the designated constraints aren't met.
type FirstResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FirstResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FirstResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FirstResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FirstResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FirstResponseValidationError) ErrorName() string { return "FirstResponseValidationError" }

// Error satisfies the builtin error interface
func (e FirstResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFirstResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FirstResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FirstResponseValidationError{}

// Validate checks the field values on SecondRequest with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *SecondRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for AccessToken

	if v, ok := interface{}(m.GetBody()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SecondRequestValidationError{
				field:  "Body",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// SecondRequestValidationError is the validation error returned by
// SecondRequest.Validate if the designated constraints aren't met.
type SecondRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SecondRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SecondRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SecondRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SecondRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SecondRequestValidationError) ErrorName() string { return "SecondRequestValidationError" }

// Error satisfies the builtin error interface
func (e SecondRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSecondRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SecondRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SecondRequestValidationError{}

// Validate checks the field values on ThirdRequest with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *ThirdRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for AccessToken

	if v, ok := interface{}(m.GetBody()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ThirdRequestValidationError{
				field:  "Body",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ThirdRequestValidationError is the validation error returned by
// ThirdRequest.Validate if the designated constraints aren't met.
type ThirdRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ThirdRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ThirdRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ThirdRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ThirdRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ThirdRequestValidationError) ErrorName() string { return "ThirdRequestValidationError" }

// Error satisfies the builtin error interface
func (e ThirdRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sThirdRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ThirdRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ThirdRequestValidationError{}

// Validate checks the field values on ThirdResponse with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *ThirdResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for ServiceId

	if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ThirdResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ThirdResponseValidationError is the validation error returned by
// ThirdResponse.Validate if the designated constraints aren't met.
type ThirdResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ThirdResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ThirdResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ThirdResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ThirdResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ThirdResponseValidationError) ErrorName() string { return "ThirdResponseValidationError" }

// Error satisfies the builtin error interface
func (e ThirdResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sThirdResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ThirdResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ThirdResponseValidationError{}

// Validate checks the field values on CreateCalendarRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateCalendarRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for AccessToken

	if v, ok := interface{}(m.GetBody()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateCalendarRequestValidationError{
				field:  "Body",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// CreateCalendarRequestValidationError is the validation error returned by
// CreateCalendarRequest.Validate if the designated constraints aren't met.
type CreateCalendarRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateCalendarRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateCalendarRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateCalendarRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateCalendarRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateCalendarRequestValidationError) ErrorName() string {
	return "CreateCalendarRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateCalendarRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateCalendarRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateCalendarRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateCalendarRequestValidationError{}

// Validate checks the field values on CalendarData with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *CalendarData) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Name

	// no validation rules for GroupId

	for idx, item := range m.GetAvailabilities() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CalendarDataValidationError{
					field:  fmt.Sprintf("Availabilities[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// CalendarDataValidationError is the validation error returned by
// CalendarData.Validate if the designated constraints aren't met.
type CalendarDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CalendarDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CalendarDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CalendarDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CalendarDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CalendarDataValidationError) ErrorName() string { return "CalendarDataValidationError" }

// Error satisfies the builtin error interface
func (e CalendarDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCalendarData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CalendarDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CalendarDataValidationError{}

// Validate checks the field values on CreateCalendarResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateCalendarResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for CalendarId

	if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateCalendarResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// CreateCalendarResponseValidationError is the validation error returned by
// CreateCalendarResponse.Validate if the designated constraints aren't met.
type CreateCalendarResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateCalendarResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateCalendarResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateCalendarResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateCalendarResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateCalendarResponseValidationError) ErrorName() string {
	return "CreateCalendarResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateCalendarResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateCalendarResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateCalendarResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateCalendarResponseValidationError{}

// Validate checks the field values on TimeOfDay with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *TimeOfDay) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Hour

	// no validation rules for Minute

	return nil
}

// TimeOfDayValidationError is the validation error returned by
// TimeOfDay.Validate if the designated constraints aren't met.
type TimeOfDayValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TimeOfDayValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TimeOfDayValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TimeOfDayValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TimeOfDayValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TimeOfDayValidationError) ErrorName() string { return "TimeOfDayValidationError" }

// Error satisfies the builtin error interface
func (e TimeOfDayValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTimeOfDay.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TimeOfDayValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TimeOfDayValidationError{}

// Validate checks the field values on AvailabilityData with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *AvailabilityData) Validate() error {
	if m == nil {
		return nil
	}

	if _, ok := _AvailabilityData_Dow_InLookup[m.GetDow()]; !ok {
		return AvailabilityDataValidationError{
			field:  "Dow",
			reason: "value must be in list [monday tuesday wednesday thursday friday saturday sunday]",
		}
	}

	if v, ok := interface{}(m.GetStart()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AvailabilityDataValidationError{
				field:  "Start",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetEnd()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AvailabilityDataValidationError{
				field:  "End",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// AvailabilityDataValidationError is the validation error returned by
// AvailabilityData.Validate if the designated constraints aren't met.
type AvailabilityDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AvailabilityDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AvailabilityDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AvailabilityDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AvailabilityDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AvailabilityDataValidationError) ErrorName() string { return "AvailabilityDataValidationError" }

// Error satisfies the builtin error interface
func (e AvailabilityDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAvailabilityData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AvailabilityDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AvailabilityDataValidationError{}

var _AvailabilityData_Dow_InLookup = map[string]struct{}{
	"monday":    {},
	"tuesday":   {},
	"wednesday": {},
	"thursday":  {},
	"friday":    {},
	"saturday":  {},
	"sunday":    {},
}

// Validate checks the field values on Price with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Price) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Min

	// no validation rules for Max

	return nil
}

// PriceValidationError is the validation error returned by Price.Validate if
// the designated constraints aren't met.
type PriceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PriceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PriceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PriceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PriceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PriceValidationError) ErrorName() string { return "PriceValidationError" }

// Error satisfies the builtin error interface
func (e PriceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPrice.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PriceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PriceValidationError{}

// Validate checks the field values on FirstRequest_Body with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *FirstRequest_Body) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for AddressId

	return nil
}

// FirstRequest_BodyValidationError is the validation error returned by
// FirstRequest_Body.Validate if the designated constraints aren't met.
type FirstRequest_BodyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FirstRequest_BodyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FirstRequest_BodyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FirstRequest_BodyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FirstRequest_BodyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FirstRequest_BodyValidationError) ErrorName() string {
	return "FirstRequest_BodyValidationError"
}

// Error satisfies the builtin error interface
func (e FirstRequest_BodyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFirstRequest_Body.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FirstRequest_BodyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FirstRequest_BodyValidationError{}

// Validate checks the field values on SecondRequest_Body with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *SecondRequest_Body) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Name

	// no validation rules for DurationInMinutes

	if v, ok := interface{}(m.GetPrice()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SecondRequest_BodyValidationError{
				field:  "Price",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// SecondRequest_BodyValidationError is the validation error returned by
// SecondRequest_Body.Validate if the designated constraints aren't met.
type SecondRequest_BodyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SecondRequest_BodyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SecondRequest_BodyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SecondRequest_BodyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SecondRequest_BodyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SecondRequest_BodyValidationError) ErrorName() string {
	return "SecondRequest_BodyValidationError"
}

// Error satisfies the builtin error interface
func (e SecondRequest_BodyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSecondRequest_Body.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SecondRequest_BodyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SecondRequest_BodyValidationError{}

// Validate checks the field values on ThirdRequest_Body with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *ThirdRequest_Body) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for CalendarId

	return nil
}

// ThirdRequest_BodyValidationError is the validation error returned by
// ThirdRequest_Body.Validate if the designated constraints aren't met.
type ThirdRequest_BodyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ThirdRequest_BodyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ThirdRequest_BodyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ThirdRequest_BodyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ThirdRequest_BodyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ThirdRequest_BodyValidationError) ErrorName() string {
	return "ThirdRequest_BodyValidationError"
}

// Error satisfies the builtin error interface
func (e ThirdRequest_BodyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sThirdRequest_Body.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ThirdRequest_BodyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ThirdRequest_BodyValidationError{}
