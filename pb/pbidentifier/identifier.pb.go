// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v3.11.4
// source: identifier.proto

package pbidentifier

import (
	context "context"
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type ValidateLicenseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dni     uint64 `protobuf:"varint,1,opt,name=dni,proto3" json:"dni,omitempty"`
	License uint64 `protobuf:"varint,2,opt,name=license,proto3" json:"license,omitempty"`
}

func (x *ValidateLicenseRequest) Reset() {
	*x = ValidateLicenseRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_identifier_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValidateLicenseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidateLicenseRequest) ProtoMessage() {}

func (x *ValidateLicenseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_identifier_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidateLicenseRequest.ProtoReflect.Descriptor instead.
func (*ValidateLicenseRequest) Descriptor() ([]byte, []int) {
	return file_identifier_proto_rawDescGZIP(), []int{0}
}

func (x *ValidateLicenseRequest) GetDni() uint64 {
	if x != nil {
		return x.Dni
	}
	return 0
}

func (x *ValidateLicenseRequest) GetLicense() uint64 {
	if x != nil {
		return x.License
	}
	return 0
}

type ValidateLicenseResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Valid bool `protobuf:"varint,1,opt,name=valid,proto3" json:"valid,omitempty"`
}

func (x *ValidateLicenseResponse) Reset() {
	*x = ValidateLicenseResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_identifier_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValidateLicenseResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidateLicenseResponse) ProtoMessage() {}

func (x *ValidateLicenseResponse) ProtoReflect() protoreflect.Message {
	mi := &file_identifier_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidateLicenseResponse.ProtoReflect.Descriptor instead.
func (*ValidateLicenseResponse) Descriptor() ([]byte, []int) {
	return file_identifier_proto_rawDescGZIP(), []int{1}
}

func (x *ValidateLicenseResponse) GetValid() bool {
	if x != nil {
		return x.Valid
	}
	return false
}

type InferByFullnameRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name    string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Surname string `protobuf:"bytes,2,opt,name=surname,proto3" json:"surname,omitempty"`
}

func (x *InferByFullnameRequest) Reset() {
	*x = InferByFullnameRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_identifier_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InferByFullnameRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InferByFullnameRequest) ProtoMessage() {}

func (x *InferByFullnameRequest) ProtoReflect() protoreflect.Message {
	mi := &file_identifier_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InferByFullnameRequest.ProtoReflect.Descriptor instead.
func (*InferByFullnameRequest) Descriptor() ([]byte, []int) {
	return file_identifier_proto_rawDescGZIP(), []int{2}
}

func (x *InferByFullnameRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *InferByFullnameRequest) GetSurname() string {
	if x != nil {
		return x.Surname
	}
	return ""
}

type InferLicenseResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	License uint64 `protobuf:"varint,1,opt,name=license,proto3" json:"license,omitempty"`
}

func (x *InferLicenseResponse) Reset() {
	*x = InferLicenseResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_identifier_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InferLicenseResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InferLicenseResponse) ProtoMessage() {}

func (x *InferLicenseResponse) ProtoReflect() protoreflect.Message {
	mi := &file_identifier_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InferLicenseResponse.ProtoReflect.Descriptor instead.
func (*InferLicenseResponse) Descriptor() ([]byte, []int) {
	return file_identifier_proto_rawDescGZIP(), []int{3}
}

func (x *InferLicenseResponse) GetLicense() uint64 {
	if x != nil {
		return x.License
	}
	return 0
}

type InferTomeAndFolioResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tome  uint64 `protobuf:"varint,1,opt,name=tome,proto3" json:"tome,omitempty"`
	Folio uint64 `protobuf:"varint,2,opt,name=folio,proto3" json:"folio,omitempty"`
}

func (x *InferTomeAndFolioResponse) Reset() {
	*x = InferTomeAndFolioResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_identifier_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InferTomeAndFolioResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InferTomeAndFolioResponse) ProtoMessage() {}

func (x *InferTomeAndFolioResponse) ProtoReflect() protoreflect.Message {
	mi := &file_identifier_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InferTomeAndFolioResponse.ProtoReflect.Descriptor instead.
func (*InferTomeAndFolioResponse) Descriptor() ([]byte, []int) {
	return file_identifier_proto_rawDescGZIP(), []int{4}
}

func (x *InferTomeAndFolioResponse) GetTome() uint64 {
	if x != nil {
		return x.Tome
	}
	return 0
}

func (x *InferTomeAndFolioResponse) GetFolio() uint64 {
	if x != nil {
		return x.Folio
	}
	return 0
}

type InferDataByCUERequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cue uint64 `protobuf:"varint,1,opt,name=cue,proto3" json:"cue,omitempty"`
}

func (x *InferDataByCUERequest) Reset() {
	*x = InferDataByCUERequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_identifier_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InferDataByCUERequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InferDataByCUERequest) ProtoMessage() {}

func (x *InferDataByCUERequest) ProtoReflect() protoreflect.Message {
	mi := &file_identifier_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InferDataByCUERequest.ProtoReflect.Descriptor instead.
func (*InferDataByCUERequest) Descriptor() ([]byte, []int) {
	return file_identifier_proto_rawDescGZIP(), []int{5}
}

func (x *InferDataByCUERequest) GetCue() uint64 {
	if x != nil {
		return x.Cue
	}
	return 0
}

type InferDataByCUEResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name          string         `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	IsPublic      bool           `protobuf:"varint,2,opt,name=is_public,json=isPublic,proto3" json:"is_public,omitempty"`
	IsUrban       bool           `protobuf:"varint,3,opt,name=is_urban,json=isUrban,proto3" json:"is_urban,omitempty"`
	Address       string         `protobuf:"bytes,4,opt,name=address,proto3" json:"address,omitempty"`
	Phone         string         `protobuf:"bytes,6,opt,name=phone,proto3" json:"phone,omitempty"`
	EducationType *EducationType `protobuf:"bytes,7,opt,name=education_type,json=educationType,proto3" json:"education_type,omitempty"`
	AlumnType     *AlumnType     `protobuf:"bytes,8,opt,name=alumn_type,json=alumnType,proto3" json:"alumn_type,omitempty"`
}

func (x *InferDataByCUEResponse) Reset() {
	*x = InferDataByCUEResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_identifier_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InferDataByCUEResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InferDataByCUEResponse) ProtoMessage() {}

func (x *InferDataByCUEResponse) ProtoReflect() protoreflect.Message {
	mi := &file_identifier_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InferDataByCUEResponse.ProtoReflect.Descriptor instead.
func (*InferDataByCUEResponse) Descriptor() ([]byte, []int) {
	return file_identifier_proto_rawDescGZIP(), []int{6}
}

func (x *InferDataByCUEResponse) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *InferDataByCUEResponse) GetIsPublic() bool {
	if x != nil {
		return x.IsPublic
	}
	return false
}

func (x *InferDataByCUEResponse) GetIsUrban() bool {
	if x != nil {
		return x.IsUrban
	}
	return false
}

func (x *InferDataByCUEResponse) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *InferDataByCUEResponse) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

func (x *InferDataByCUEResponse) GetEducationType() *EducationType {
	if x != nil {
		return x.EducationType
	}
	return nil
}

func (x *InferDataByCUEResponse) GetAlumnType() *AlumnType {
	if x != nil {
		return x.AlumnType
	}
	return nil
}

type EducationType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Maternal   bool `protobuf:"varint,1,opt,name=maternal,proto3" json:"maternal,omitempty"`
	Initial    bool `protobuf:"varint,2,opt,name=initial,proto3" json:"initial,omitempty"`
	Primary    bool `protobuf:"varint,3,opt,name=primary,proto3" json:"primary,omitempty"`
	HighSchool bool `protobuf:"varint,4,opt,name=high_school,json=highSchool,proto3" json:"high_school,omitempty"`
	Technical  bool `protobuf:"varint,5,opt,name=technical,proto3" json:"technical,omitempty"`
	Superior   bool `protobuf:"varint,6,opt,name=superior,proto3" json:"superior,omitempty"`
	Courses    bool `protobuf:"varint,7,opt,name=courses,proto3" json:"courses,omitempty"`
}

func (x *EducationType) Reset() {
	*x = EducationType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_identifier_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EducationType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EducationType) ProtoMessage() {}

func (x *EducationType) ProtoReflect() protoreflect.Message {
	mi := &file_identifier_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EducationType.ProtoReflect.Descriptor instead.
func (*EducationType) Descriptor() ([]byte, []int) {
	return file_identifier_proto_rawDescGZIP(), []int{7}
}

func (x *EducationType) GetMaternal() bool {
	if x != nil {
		return x.Maternal
	}
	return false
}

func (x *EducationType) GetInitial() bool {
	if x != nil {
		return x.Initial
	}
	return false
}

func (x *EducationType) GetPrimary() bool {
	if x != nil {
		return x.Primary
	}
	return false
}

func (x *EducationType) GetHighSchool() bool {
	if x != nil {
		return x.HighSchool
	}
	return false
}

func (x *EducationType) GetTechnical() bool {
	if x != nil {
		return x.Technical
	}
	return false
}

func (x *EducationType) GetSuperior() bool {
	if x != nil {
		return x.Superior
	}
	return false
}

func (x *EducationType) GetCourses() bool {
	if x != nil {
		return x.Courses
	}
	return false
}

type AlumnType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Adult   bool `protobuf:"varint,1,opt,name=adult,proto3" json:"adult,omitempty"`
	Special bool `protobuf:"varint,2,opt,name=special,proto3" json:"special,omitempty"`
	Normal  bool `protobuf:"varint,3,opt,name=normal,proto3" json:"normal,omitempty"`
}

func (x *AlumnType) Reset() {
	*x = AlumnType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_identifier_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AlumnType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AlumnType) ProtoMessage() {}

func (x *AlumnType) ProtoReflect() protoreflect.Message {
	mi := &file_identifier_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AlumnType.ProtoReflect.Descriptor instead.
func (*AlumnType) Descriptor() ([]byte, []int) {
	return file_identifier_proto_rawDescGZIP(), []int{8}
}

func (x *AlumnType) GetAdult() bool {
	if x != nil {
		return x.Adult
	}
	return false
}

func (x *AlumnType) GetSpecial() bool {
	if x != nil {
		return x.Special
	}
	return false
}

func (x *AlumnType) GetNormal() bool {
	if x != nil {
		return x.Normal
	}
	return false
}

var File_identifier_proto protoreflect.FileDescriptor

var file_identifier_proto_rawDesc = []byte{
	0x0a, 0x10, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x1a, 0x17,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x54, 0x0a, 0x16, 0x56, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x65, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x20, 0x0a, 0x03, 0x64, 0x6e, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x42, 0x0e,
	0xfa, 0x42, 0x0b, 0x32, 0x09, 0x10, 0xff, 0xc1, 0xd7, 0x2f, 0x20, 0xbf, 0x84, 0x3d, 0x52, 0x03,
	0x64, 0x6e, 0x69, 0x12, 0x18, 0x0a, 0x07, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x22, 0x2f, 0x0a,
	0x17, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x22, 0x5c,
	0x0a, 0x16, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x42, 0x79, 0x46, 0x75, 0x6c, 0x6c, 0x6e, 0x61, 0x6d,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0xfa, 0x42, 0x06, 0x72, 0x04, 0x10, 0x02, 0x18,
	0x1e, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x07, 0x73, 0x75, 0x72, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0xfa, 0x42, 0x06, 0x72, 0x04, 0x10,
	0x02, 0x18, 0x1e, 0x52, 0x07, 0x73, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x30, 0x0a, 0x14,
	0x49, 0x6e, 0x66, 0x65, 0x72, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x22, 0x45,
	0x0a, 0x19, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x54, 0x6f, 0x6d, 0x65, 0x41, 0x6e, 0x64, 0x46, 0x6f,
	0x6c, 0x69, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74,
	0x6f, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x74, 0x6f, 0x6d, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x66, 0x6f, 0x6c, 0x69, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05,
	0x66, 0x6f, 0x6c, 0x69, 0x6f, 0x22, 0x3b, 0x0a, 0x15, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x44, 0x61,
	0x74, 0x61, 0x42, 0x79, 0x43, 0x55, 0x45, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x22,
	0x0a, 0x03, 0x63, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x42, 0x10, 0xfa, 0x42, 0x0d,
	0x32, 0x0b, 0x10, 0xff, 0x93, 0xeb, 0xdc, 0x03, 0x20, 0x80, 0xda, 0xc4, 0x09, 0x52, 0x03, 0x63,
	0x75, 0x65, 0x22, 0x8c, 0x02, 0x0a, 0x16, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61,
	0x42, 0x79, 0x43, 0x55, 0x45, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x12, 0x19,
	0x0a, 0x08, 0x69, 0x73, 0x5f, 0x75, 0x72, 0x62, 0x61, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x07, 0x69, 0x73, 0x55, 0x72, 0x62, 0x61, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x40, 0x0a, 0x0e, 0x65, 0x64, 0x75,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2e, 0x45,
	0x64, 0x75, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0d, 0x65, 0x64,
	0x75, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x34, 0x0a, 0x0a, 0x61,
	0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2e, 0x41, 0x6c, 0x75,
	0x6d, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x61, 0x6c, 0x75, 0x6d, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x22, 0xd4, 0x01, 0x0a, 0x0d, 0x45, 0x64, 0x75, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x12,
	0x18, 0x0a, 0x07, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x07, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x69,
	0x6d, 0x61, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x70, 0x72, 0x69, 0x6d,
	0x61, 0x72, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x68, 0x69, 0x67, 0x68, 0x5f, 0x73, 0x63, 0x68, 0x6f,
	0x6f, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x68, 0x69, 0x67, 0x68, 0x53, 0x63,
	0x68, 0x6f, 0x6f, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x69, 0x63, 0x61,
	0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x69, 0x63,
	0x61, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x75, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x72, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x73, 0x75, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x72, 0x12, 0x18,
	0x0a, 0x07, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x07, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x73, 0x22, 0x53, 0x0a, 0x09, 0x41, 0x6c, 0x75, 0x6d,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x64, 0x75, 0x6c, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x61, 0x64, 0x75, 0x6c, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x73,
	0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x70,
	0x65, 0x63, 0x69, 0x61, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x32, 0x9e, 0x04,
	0x0a, 0x0a, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x68, 0x0a, 0x1b,
	0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x50,
	0x73, 0x79, 0x63, 0x68, 0x6f, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x12, 0x22, 0x2e, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x65, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x23, 0x2e, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2e, 0x56, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x65, 0x0a, 0x1b, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x4c,
	0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x42, 0x79, 0x46, 0x75, 0x6c, 0x6c, 0x6e, 0x61, 0x6d, 0x65,
	0x4d, 0x65, 0x64, 0x69, 0x63, 0x12, 0x22, 0x2e, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x2e, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x42, 0x79, 0x46, 0x75, 0x6c, 0x6c, 0x6e, 0x61,
	0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2e, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x4c, 0x69, 0x63, 0x65,
	0x6e, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x70, 0x0a,
	0x21, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x54, 0x6f, 0x6d, 0x65, 0x41, 0x6e, 0x64, 0x46, 0x6f, 0x6c,
	0x69, 0x6f, 0x42, 0x79, 0x46, 0x75, 0x6c, 0x6c, 0x6e, 0x61, 0x6d, 0x65, 0x4c, 0x61, 0x77, 0x79,
	0x65, 0x72, 0x12, 0x22, 0x2e, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2e,
	0x49, 0x6e, 0x66, 0x65, 0x72, 0x42, 0x79, 0x46, 0x75, 0x6c, 0x6c, 0x6e, 0x61, 0x6d, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x2e, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x54, 0x6f, 0x6d, 0x65, 0x41, 0x6e, 0x64,
	0x46, 0x6f, 0x6c, 0x69, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x72, 0x0a, 0x23, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x54, 0x6f, 0x6d, 0x65, 0x41, 0x6e, 0x64, 0x46,
	0x6f, 0x6c, 0x69, 0x6f, 0x42, 0x79, 0x46, 0x75, 0x6c, 0x6c, 0x6e, 0x61, 0x6d, 0x65, 0x41, 0x74,
	0x74, 0x6f, 0x72, 0x6e, 0x65, 0x79, 0x12, 0x22, 0x2e, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x2e, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x42, 0x79, 0x46, 0x75, 0x6c, 0x6c, 0x6e,
	0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x69, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2e, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x54, 0x6f, 0x6d,
	0x65, 0x41, 0x6e, 0x64, 0x46, 0x6f, 0x6c, 0x69, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x59, 0x0a, 0x0e, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61,
	0x42, 0x79, 0x43, 0x55, 0x45, 0x12, 0x21, 0x2e, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x2e, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x42, 0x79, 0x43, 0x55,
	0x45, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x69, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x2e, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x42,
	0x79, 0x43, 0x55, 0x45, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x10,
	0x5a, 0x0e, 0x2e, 0x2f, 0x70, 0x62, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_identifier_proto_rawDescOnce sync.Once
	file_identifier_proto_rawDescData = file_identifier_proto_rawDesc
)

func file_identifier_proto_rawDescGZIP() []byte {
	file_identifier_proto_rawDescOnce.Do(func() {
		file_identifier_proto_rawDescData = protoimpl.X.CompressGZIP(file_identifier_proto_rawDescData)
	})
	return file_identifier_proto_rawDescData
}

var file_identifier_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_identifier_proto_goTypes = []interface{}{
	(*ValidateLicenseRequest)(nil),    // 0: identifier.ValidateLicenseRequest
	(*ValidateLicenseResponse)(nil),   // 1: identifier.ValidateLicenseResponse
	(*InferByFullnameRequest)(nil),    // 2: identifier.InferByFullnameRequest
	(*InferLicenseResponse)(nil),      // 3: identifier.InferLicenseResponse
	(*InferTomeAndFolioResponse)(nil), // 4: identifier.InferTomeAndFolioResponse
	(*InferDataByCUERequest)(nil),     // 5: identifier.InferDataByCUERequest
	(*InferDataByCUEResponse)(nil),    // 6: identifier.InferDataByCUEResponse
	(*EducationType)(nil),             // 7: identifier.EducationType
	(*AlumnType)(nil),                 // 8: identifier.AlumnType
}
var file_identifier_proto_depIdxs = []int32{
	7, // 0: identifier.InferDataByCUEResponse.education_type:type_name -> identifier.EducationType
	8, // 1: identifier.InferDataByCUEResponse.alumn_type:type_name -> identifier.AlumnType
	0, // 2: identifier.Identifier.ValidateLicensePsychologist:input_type -> identifier.ValidateLicenseRequest
	2, // 3: identifier.Identifier.InferLicenseByFullnameMedic:input_type -> identifier.InferByFullnameRequest
	2, // 4: identifier.Identifier.InferTomeAndFolioByFullnameLawyer:input_type -> identifier.InferByFullnameRequest
	2, // 5: identifier.Identifier.InferTomeAndFolioByFullnameAttorney:input_type -> identifier.InferByFullnameRequest
	5, // 6: identifier.Identifier.InferDataByCUE:input_type -> identifier.InferDataByCUERequest
	1, // 7: identifier.Identifier.ValidateLicensePsychologist:output_type -> identifier.ValidateLicenseResponse
	3, // 8: identifier.Identifier.InferLicenseByFullnameMedic:output_type -> identifier.InferLicenseResponse
	4, // 9: identifier.Identifier.InferTomeAndFolioByFullnameLawyer:output_type -> identifier.InferTomeAndFolioResponse
	4, // 10: identifier.Identifier.InferTomeAndFolioByFullnameAttorney:output_type -> identifier.InferTomeAndFolioResponse
	6, // 11: identifier.Identifier.InferDataByCUE:output_type -> identifier.InferDataByCUEResponse
	7, // [7:12] is the sub-list for method output_type
	2, // [2:7] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_identifier_proto_init() }
func file_identifier_proto_init() {
	if File_identifier_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_identifier_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValidateLicenseRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_identifier_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValidateLicenseResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_identifier_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InferByFullnameRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_identifier_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InferLicenseResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_identifier_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InferTomeAndFolioResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_identifier_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InferDataByCUERequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_identifier_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InferDataByCUEResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_identifier_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EducationType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_identifier_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AlumnType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_identifier_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_identifier_proto_goTypes,
		DependencyIndexes: file_identifier_proto_depIdxs,
		MessageInfos:      file_identifier_proto_msgTypes,
	}.Build()
	File_identifier_proto = out.File
	file_identifier_proto_rawDesc = nil
	file_identifier_proto_goTypes = nil
	file_identifier_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// IdentifierClient is the client API for Identifier service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type IdentifierClient interface {
	ValidateLicensePsychologist(ctx context.Context, in *ValidateLicenseRequest, opts ...grpc.CallOption) (*ValidateLicenseResponse, error)
	InferLicenseByFullnameMedic(ctx context.Context, in *InferByFullnameRequest, opts ...grpc.CallOption) (*InferLicenseResponse, error)
	InferTomeAndFolioByFullnameLawyer(ctx context.Context, in *InferByFullnameRequest, opts ...grpc.CallOption) (*InferTomeAndFolioResponse, error)
	InferTomeAndFolioByFullnameAttorney(ctx context.Context, in *InferByFullnameRequest, opts ...grpc.CallOption) (*InferTomeAndFolioResponse, error)
	InferDataByCUE(ctx context.Context, in *InferDataByCUERequest, opts ...grpc.CallOption) (*InferDataByCUEResponse, error)
}

type identifierClient struct {
	cc grpc.ClientConnInterface
}

func NewIdentifierClient(cc grpc.ClientConnInterface) IdentifierClient {
	return &identifierClient{cc}
}

func (c *identifierClient) ValidateLicensePsychologist(ctx context.Context, in *ValidateLicenseRequest, opts ...grpc.CallOption) (*ValidateLicenseResponse, error) {
	out := new(ValidateLicenseResponse)
	err := c.cc.Invoke(ctx, "/identifier.Identifier/ValidateLicensePsychologist", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identifierClient) InferLicenseByFullnameMedic(ctx context.Context, in *InferByFullnameRequest, opts ...grpc.CallOption) (*InferLicenseResponse, error) {
	out := new(InferLicenseResponse)
	err := c.cc.Invoke(ctx, "/identifier.Identifier/InferLicenseByFullnameMedic", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identifierClient) InferTomeAndFolioByFullnameLawyer(ctx context.Context, in *InferByFullnameRequest, opts ...grpc.CallOption) (*InferTomeAndFolioResponse, error) {
	out := new(InferTomeAndFolioResponse)
	err := c.cc.Invoke(ctx, "/identifier.Identifier/InferTomeAndFolioByFullnameLawyer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identifierClient) InferTomeAndFolioByFullnameAttorney(ctx context.Context, in *InferByFullnameRequest, opts ...grpc.CallOption) (*InferTomeAndFolioResponse, error) {
	out := new(InferTomeAndFolioResponse)
	err := c.cc.Invoke(ctx, "/identifier.Identifier/InferTomeAndFolioByFullnameAttorney", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identifierClient) InferDataByCUE(ctx context.Context, in *InferDataByCUERequest, opts ...grpc.CallOption) (*InferDataByCUEResponse, error) {
	out := new(InferDataByCUEResponse)
	err := c.cc.Invoke(ctx, "/identifier.Identifier/InferDataByCUE", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IdentifierServer is the server API for Identifier service.
type IdentifierServer interface {
	ValidateLicensePsychologist(context.Context, *ValidateLicenseRequest) (*ValidateLicenseResponse, error)
	InferLicenseByFullnameMedic(context.Context, *InferByFullnameRequest) (*InferLicenseResponse, error)
	InferTomeAndFolioByFullnameLawyer(context.Context, *InferByFullnameRequest) (*InferTomeAndFolioResponse, error)
	InferTomeAndFolioByFullnameAttorney(context.Context, *InferByFullnameRequest) (*InferTomeAndFolioResponse, error)
	InferDataByCUE(context.Context, *InferDataByCUERequest) (*InferDataByCUEResponse, error)
}

// UnimplementedIdentifierServer can be embedded to have forward compatible implementations.
type UnimplementedIdentifierServer struct {
}

func (*UnimplementedIdentifierServer) ValidateLicensePsychologist(context.Context, *ValidateLicenseRequest) (*ValidateLicenseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateLicensePsychologist not implemented")
}
func (*UnimplementedIdentifierServer) InferLicenseByFullnameMedic(context.Context, *InferByFullnameRequest) (*InferLicenseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InferLicenseByFullnameMedic not implemented")
}
func (*UnimplementedIdentifierServer) InferTomeAndFolioByFullnameLawyer(context.Context, *InferByFullnameRequest) (*InferTomeAndFolioResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InferTomeAndFolioByFullnameLawyer not implemented")
}
func (*UnimplementedIdentifierServer) InferTomeAndFolioByFullnameAttorney(context.Context, *InferByFullnameRequest) (*InferTomeAndFolioResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InferTomeAndFolioByFullnameAttorney not implemented")
}
func (*UnimplementedIdentifierServer) InferDataByCUE(context.Context, *InferDataByCUERequest) (*InferDataByCUEResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InferDataByCUE not implemented")
}

func RegisterIdentifierServer(s *grpc.Server, srv IdentifierServer) {
	s.RegisterService(&_Identifier_serviceDesc, srv)
}

func _Identifier_ValidateLicensePsychologist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidateLicenseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentifierServer).ValidateLicensePsychologist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/identifier.Identifier/ValidateLicensePsychologist",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentifierServer).ValidateLicensePsychologist(ctx, req.(*ValidateLicenseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Identifier_InferLicenseByFullnameMedic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InferByFullnameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentifierServer).InferLicenseByFullnameMedic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/identifier.Identifier/InferLicenseByFullnameMedic",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentifierServer).InferLicenseByFullnameMedic(ctx, req.(*InferByFullnameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Identifier_InferTomeAndFolioByFullnameLawyer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InferByFullnameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentifierServer).InferTomeAndFolioByFullnameLawyer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/identifier.Identifier/InferTomeAndFolioByFullnameLawyer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentifierServer).InferTomeAndFolioByFullnameLawyer(ctx, req.(*InferByFullnameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Identifier_InferTomeAndFolioByFullnameAttorney_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InferByFullnameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentifierServer).InferTomeAndFolioByFullnameAttorney(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/identifier.Identifier/InferTomeAndFolioByFullnameAttorney",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentifierServer).InferTomeAndFolioByFullnameAttorney(ctx, req.(*InferByFullnameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Identifier_InferDataByCUE_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InferDataByCUERequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentifierServer).InferDataByCUE(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/identifier.Identifier/InferDataByCUE",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentifierServer).InferDataByCUE(ctx, req.(*InferDataByCUERequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Identifier_serviceDesc = grpc.ServiceDesc{
	ServiceName: "identifier.Identifier",
	HandlerType: (*IdentifierServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ValidateLicensePsychologist",
			Handler:    _Identifier_ValidateLicensePsychologist_Handler,
		},
		{
			MethodName: "InferLicenseByFullnameMedic",
			Handler:    _Identifier_InferLicenseByFullnameMedic_Handler,
		},
		{
			MethodName: "InferTomeAndFolioByFullnameLawyer",
			Handler:    _Identifier_InferTomeAndFolioByFullnameLawyer_Handler,
		},
		{
			MethodName: "InferTomeAndFolioByFullnameAttorney",
			Handler:    _Identifier_InferTomeAndFolioByFullnameAttorney_Handler,
		},
		{
			MethodName: "InferDataByCUE",
			Handler:    _Identifier_InferDataByCUE_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "identifier.proto",
}
