// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: products.proto

package pbproducts

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}
)

// define the regex for a UUID once up-front
var _products_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on SearchProductsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *SearchProductsRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Query

	if v, ok := interface{}(m.GetPage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SearchProductsRequestValidationError{
				field:  "Page",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// SearchProductsRequestValidationError is the validation error returned by
// SearchProductsRequest.Validate if the designated constraints aren't met.
type SearchProductsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SearchProductsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SearchProductsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SearchProductsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SearchProductsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SearchProductsRequestValidationError) ErrorName() string {
	return "SearchProductsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SearchProductsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSearchProductsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SearchProductsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SearchProductsRequestValidationError{}

// Validate checks the field values on SearchProductsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *SearchProductsResponse) Validate() error {
	if m == nil {
		return nil
	}

	for key, val := range m.GetProducts() {
		_ = val

		// no validation rules for Products[key]

		if v, ok := interface{}(val).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SearchProductsResponseValidationError{
					field:  fmt.Sprintf("Products[%v]", key),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if v, ok := interface{}(m.GetPage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SearchProductsResponseValidationError{
				field:  "Page",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// SearchProductsResponseValidationError is the validation error returned by
// SearchProductsResponse.Validate if the designated constraints aren't met.
type SearchProductsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SearchProductsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SearchProductsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SearchProductsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SearchProductsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SearchProductsResponseValidationError) ErrorName() string {
	return "SearchProductsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SearchProductsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSearchProductsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SearchProductsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SearchProductsResponseValidationError{}

// Validate checks the field values on RetrieveProductDetailRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RetrieveProductDetailRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for ProductId

	return nil
}

// RetrieveProductDetailRequestValidationError is the validation error returned
// by RetrieveProductDetailRequest.Validate if the designated constraints
// aren't met.
type RetrieveProductDetailRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RetrieveProductDetailRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RetrieveProductDetailRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RetrieveProductDetailRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RetrieveProductDetailRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RetrieveProductDetailRequestValidationError) ErrorName() string {
	return "RetrieveProductDetailRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RetrieveProductDetailRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRetrieveProductDetailRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RetrieveProductDetailRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RetrieveProductDetailRequestValidationError{}

// Validate checks the field values on Product with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Product) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Title

	// no validation rules for CategoryId

	// no validation rules for Price

	// no validation rules for Stock

	// no validation rules for UserId

	return nil
}

// ProductValidationError is the validation error returned by Product.Validate
// if the designated constraints aren't met.
type ProductValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProductValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProductValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProductValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProductValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProductValidationError) ErrorName() string { return "ProductValidationError" }

// Error satisfies the builtin error interface
func (e ProductValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProduct.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProductValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProductValidationError{}

// Validate checks the field values on Image with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Image) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Uri

	return nil
}

// ImageValidationError is the validation error returned by Image.Validate if
// the designated constraints aren't met.
type ImageValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ImageValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ImageValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ImageValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ImageValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ImageValidationError) ErrorName() string { return "ImageValidationError" }

// Error satisfies the builtin error interface
func (e ImageValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sImage.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ImageValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ImageValidationError{}

// Validate checks the field values on ProductDetail with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *ProductDetail) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetProduct()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ProductDetailValidationError{
				field:  "Product",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ProductDetailValidationError{
				field:  "User",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for key, val := range m.GetAttributes() {
		_ = val

		// no validation rules for Attributes[key]

		if v, ok := interface{}(val).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ProductDetailValidationError{
					field:  fmt.Sprintf("Attributes[%v]", key),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for key, val := range m.GetImages() {
		_ = val

		// no validation rules for Images[key]

		if v, ok := interface{}(val).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ProductDetailValidationError{
					field:  fmt.Sprintf("Images[%v]", key),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ProductDetailValidationError is the validation error returned by
// ProductDetail.Validate if the designated constraints aren't met.
type ProductDetailValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProductDetailValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProductDetailValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProductDetailValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProductDetailValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProductDetailValidationError) ErrorName() string { return "ProductDetailValidationError" }

// Error satisfies the builtin error interface
func (e ProductDetailValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProductDetail.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProductDetailValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProductDetailValidationError{}

// Validate checks the field values on ProductSearchResult with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ProductSearchResult) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetProduct()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ProductSearchResultValidationError{
				field:  "Product",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ProductSearchResultValidationError{
				field:  "User",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for key, val := range m.GetImages() {
		_ = val

		// no validation rules for Images[key]

		if v, ok := interface{}(val).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ProductSearchResultValidationError{
					field:  fmt.Sprintf("Images[%v]", key),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ProductSearchResultValidationError is the validation error returned by
// ProductSearchResult.Validate if the designated constraints aren't met.
type ProductSearchResultValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProductSearchResultValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProductSearchResultValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProductSearchResultValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProductSearchResultValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProductSearchResultValidationError) ErrorName() string {
	return "ProductSearchResultValidationError"
}

// Error satisfies the builtin error interface
func (e ProductSearchResultValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProductSearchResult.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProductSearchResultValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProductSearchResultValidationError{}

// Validate checks the field values on User with the rules defined in the proto
// definition for this message. If any rules are violated, an error is returned.
func (m *User) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Name

	// no validation rules for Surname

	return nil
}

// UserValidationError is the validation error returned by User.Validate if the
// designated constraints aren't met.
type UserValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserValidationError) ErrorName() string { return "UserValidationError" }

// Error satisfies the builtin error interface
func (e UserValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUser.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserValidationError{}

// Validate checks the field values on Attribute with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Attribute) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Name

	// no validation rules for SchemaId

	// no validation rules for ValueType

	return nil
}

// AttributeValidationError is the validation error returned by
// Attribute.Validate if the designated constraints aren't met.
type AttributeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AttributeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AttributeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AttributeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AttributeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AttributeValidationError) ErrorName() string { return "AttributeValidationError" }

// Error satisfies the builtin error interface
func (e AttributeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAttribute.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AttributeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AttributeValidationError{}

// Validate checks the field values on StageChangeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *StageChangeRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for AccessToken

	return nil
}

// StageChangeRequestValidationError is the validation error returned by
// StageChangeRequest.Validate if the designated constraints aren't met.
type StageChangeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StageChangeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StageChangeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StageChangeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StageChangeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StageChangeRequestValidationError) ErrorName() string {
	return "StageChangeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e StageChangeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStageChangeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StageChangeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StageChangeRequestValidationError{}

// Validate checks the field values on StageChangeResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *StageChangeResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Size

	return nil
}

// StageChangeResponseValidationError is the validation error returned by
// StageChangeResponse.Validate if the designated constraints aren't met.
type StageChangeResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StageChangeResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StageChangeResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StageChangeResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StageChangeResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StageChangeResponseValidationError) ErrorName() string {
	return "StageChangeResponseValidationError"
}

// Error satisfies the builtin error interface
func (e StageChangeResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStageChangeResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StageChangeResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StageChangeResponseValidationError{}

// Validate checks the field values on DraftLine with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *DraftLine) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for DraftLineId

	if v, ok := interface{}(m.GetFirst()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DraftLineValidationError{
				field:  "First",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetSecond()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DraftLineValidationError{
				field:  "Second",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetThird()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DraftLineValidationError{
				field:  "Third",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// DraftLineValidationError is the validation error returned by
// DraftLine.Validate if the designated constraints aren't met.
type DraftLineValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DraftLineValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DraftLineValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DraftLineValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DraftLineValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DraftLineValidationError) ErrorName() string { return "DraftLineValidationError" }

// Error satisfies the builtin error interface
func (e DraftLineValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDraftLine.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DraftLineValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DraftLineValidationError{}

// Validate checks the field values on DraftLineFirst with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *DraftLineFirst) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Title

	// no validation rules for CategoryId

	return nil
}

// DraftLineFirstValidationError is the validation error returned by
// DraftLineFirst.Validate if the designated constraints aren't met.
type DraftLineFirstValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DraftLineFirstValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DraftLineFirstValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DraftLineFirstValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DraftLineFirstValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DraftLineFirstValidationError) ErrorName() string { return "DraftLineFirstValidationError" }

// Error satisfies the builtin error interface
func (e DraftLineFirstValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDraftLineFirst.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DraftLineFirstValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DraftLineFirstValidationError{}

// Validate checks the field values on DraftLineSecond with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *DraftLineSecond) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Price

	// no validation rules for Stock

	for idx, item := range m.GetAttributes() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DraftLineSecondValidationError{
					field:  fmt.Sprintf("Attributes[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// DraftLineSecondValidationError is the validation error returned by
// DraftLineSecond.Validate if the designated constraints aren't met.
type DraftLineSecondValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DraftLineSecondValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DraftLineSecondValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DraftLineSecondValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DraftLineSecondValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DraftLineSecondValidationError) ErrorName() string { return "DraftLineSecondValidationError" }

// Error satisfies the builtin error interface
func (e DraftLineSecondValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDraftLineSecond.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DraftLineSecondValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DraftLineSecondValidationError{}

// Validate checks the field values on DraftLineThird with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *DraftLineThird) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// DraftLineThirdValidationError is the validation error returned by
// DraftLineThird.Validate if the designated constraints aren't met.
type DraftLineThirdValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DraftLineThirdValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DraftLineThirdValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DraftLineThirdValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DraftLineThirdValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DraftLineThirdValidationError) ErrorName() string { return "DraftLineThirdValidationError" }

// Error satisfies the builtin error interface
func (e DraftLineThirdValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDraftLineThird.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DraftLineThirdValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DraftLineThirdValidationError{}

// Validate checks the field values on FirstRequest with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *FirstRequest) Validate() error {
	if m == nil {
		return nil
	}

	switch m.Corpus.(type) {

	case *FirstRequest_AccessToken:
		// no validation rules for AccessToken

	case *FirstRequest_DraftLine:

		if v, ok := interface{}(m.GetDraftLine()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return FirstRequestValidationError{
					field:  "DraftLine",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// FirstRequestValidationError is the validation error returned by
// FirstRequest.Validate if the designated constraints aren't met.
type FirstRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FirstRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FirstRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FirstRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FirstRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FirstRequestValidationError) ErrorName() string { return "FirstRequestValidationError" }

// Error satisfies the builtin error interface
func (e FirstRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFirstRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FirstRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FirstRequestValidationError{}

// Validate checks the field values on FirstResponse with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *FirstResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for DraftId

	return nil
}

// FirstResponseValidationError is the validation error returned by
// FirstResponse.Validate if the designated constraints aren't met.
type FirstResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FirstResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FirstResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FirstResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FirstResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FirstResponseValidationError) ErrorName() string { return "FirstResponseValidationError" }

// Error satisfies the builtin error interface
func (e FirstResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFirstResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FirstResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FirstResponseValidationError{}

// Validate checks the field values on SecondRequest with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *SecondRequest) Validate() error {
	if m == nil {
		return nil
	}

	switch m.Corpus.(type) {

	case *SecondRequest_AccessToken:
		// no validation rules for AccessToken

	case *SecondRequest_Body_:

		if v, ok := interface{}(m.GetBody()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SecondRequestValidationError{
					field:  "Body",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// SecondRequestValidationError is the validation error returned by
// SecondRequest.Validate if the designated constraints aren't met.
type SecondRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SecondRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SecondRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SecondRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SecondRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SecondRequestValidationError) ErrorName() string { return "SecondRequestValidationError" }

// Error satisfies the builtin error interface
func (e SecondRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSecondRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SecondRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SecondRequestValidationError{}

// Validate checks the field values on ThirdRequest with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *ThirdRequest) Validate() error {
	if m == nil {
		return nil
	}

	switch m.Corpus.(type) {

	case *ThirdRequest_AccessToken:
		// no validation rules for AccessToken

	case *ThirdRequest_Body_:

		if v, ok := interface{}(m.GetBody()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ThirdRequestValidationError{
					field:  "Body",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ThirdRequestValidationError is the validation error returned by
// ThirdRequest.Validate if the designated constraints aren't met.
type ThirdRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ThirdRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ThirdRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ThirdRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ThirdRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ThirdRequestValidationError) ErrorName() string { return "ThirdRequestValidationError" }

// Error satisfies the builtin error interface
func (e ThirdRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sThirdRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ThirdRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ThirdRequestValidationError{}

// Validate checks the field values on AttributeData with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *AttributeData) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for SchemaId

	return nil
}

// AttributeDataValidationError is the validation error returned by
// AttributeData.Validate if the designated constraints aren't met.
type AttributeDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AttributeDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AttributeDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AttributeDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AttributeDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AttributeDataValidationError) ErrorName() string { return "AttributeDataValidationError" }

// Error satisfies the builtin error interface
func (e AttributeDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAttributeData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AttributeDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AttributeDataValidationError{}

// Validate checks the field values on DeleteDraftRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeleteDraftRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for AccessToken

	return nil
}

// DeleteDraftRequestValidationError is the validation error returned by
// DeleteDraftRequest.Validate if the designated constraints aren't met.
type DeleteDraftRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteDraftRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteDraftRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteDraftRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteDraftRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteDraftRequestValidationError) ErrorName() string {
	return "DeleteDraftRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteDraftRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteDraftRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteDraftRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteDraftRequestValidationError{}

// Validate checks the field values on DeleteDraftLineRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeleteDraftLineRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for AccessToken

	// no validation rules for DraftLineId

	return nil
}

// DeleteDraftLineRequestValidationError is the validation error returned by
// DeleteDraftLineRequest.Validate if the designated constraints aren't met.
type DeleteDraftLineRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteDraftLineRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteDraftLineRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteDraftLineRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteDraftLineRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteDraftLineRequestValidationError) ErrorName() string {
	return "DeleteDraftLineRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteDraftLineRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteDraftLineRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteDraftLineRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteDraftLineRequestValidationError{}

// Validate checks the field values on CloneDraftLineRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CloneDraftLineRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for AccessToken

	// no validation rules for DraftLineId

	return nil
}

// CloneDraftLineRequestValidationError is the validation error returned by
// CloneDraftLineRequest.Validate if the designated constraints aren't met.
type CloneDraftLineRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CloneDraftLineRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CloneDraftLineRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CloneDraftLineRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CloneDraftLineRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CloneDraftLineRequestValidationError) ErrorName() string {
	return "CloneDraftLineRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CloneDraftLineRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCloneDraftLineRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CloneDraftLineRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CloneDraftLineRequestValidationError{}

// Validate checks the field values on CloneDraftLineResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CloneDraftLineResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetDraftLine()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CloneDraftLineResponseValidationError{
				field:  "DraftLine",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// CloneDraftLineResponseValidationError is the validation error returned by
// CloneDraftLineResponse.Validate if the designated constraints aren't met.
type CloneDraftLineResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CloneDraftLineResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CloneDraftLineResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CloneDraftLineResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CloneDraftLineResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CloneDraftLineResponseValidationError) ErrorName() string {
	return "CloneDraftLineResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CloneDraftLineResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCloneDraftLineResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CloneDraftLineResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CloneDraftLineResponseValidationError{}

// Validate checks the field values on RetrieveDraftRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RetrieveDraftRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for AccessToken

	return nil
}

// RetrieveDraftRequestValidationError is the validation error returned by
// RetrieveDraftRequest.Validate if the designated constraints aren't met.
type RetrieveDraftRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RetrieveDraftRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RetrieveDraftRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RetrieveDraftRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RetrieveDraftRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RetrieveDraftRequestValidationError) ErrorName() string {
	return "RetrieveDraftRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RetrieveDraftRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRetrieveDraftRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RetrieveDraftRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RetrieveDraftRequestValidationError{}

// Validate checks the field values on Draft with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Draft) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Stage

	// no validation rules for UserId

	return nil
}

// DraftValidationError is the validation error returned by Draft.Validate if
// the designated constraints aren't met.
type DraftValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DraftValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DraftValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DraftValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DraftValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DraftValidationError) ErrorName() string { return "DraftValidationError" }

// Error satisfies the builtin error interface
func (e DraftValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDraft.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DraftValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DraftValidationError{}

// Validate checks the field values on DraftDetail with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *DraftDetail) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for DraftId

	if v, ok := interface{}(m.GetDraft()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DraftDetailValidationError{
				field:  "Draft",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for key, val := range m.GetLines() {
		_ = val

		// no validation rules for Lines[key]

		if v, ok := interface{}(val).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DraftDetailValidationError{
					field:  fmt.Sprintf("Lines[%v]", key),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// DraftDetailValidationError is the validation error returned by
// DraftDetail.Validate if the designated constraints aren't met.
type DraftDetailValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DraftDetailValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DraftDetailValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DraftDetailValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DraftDetailValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DraftDetailValidationError) ErrorName() string { return "DraftDetailValidationError" }

// Error satisfies the builtin error interface
func (e DraftDetailValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDraftDetail.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DraftDetailValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DraftDetailValidationError{}

// Validate checks the field values on PageRequest with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *PageRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Cursor

	// no validation rules for Size

	return nil
}

// PageRequestValidationError is the validation error returned by
// PageRequest.Validate if the designated constraints aren't met.
type PageRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PageRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PageRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PageRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PageRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PageRequestValidationError) ErrorName() string { return "PageRequestValidationError" }

// Error satisfies the builtin error interface
func (e PageRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPageRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PageRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PageRequestValidationError{}

// Validate checks the field values on PageResponse with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *PageResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for NextCursor

	// no validation rules for TotalSize

	return nil
}

// PageResponseValidationError is the validation error returned by
// PageResponse.Validate if the designated constraints aren't met.
type PageResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PageResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PageResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PageResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PageResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PageResponseValidationError) ErrorName() string { return "PageResponseValidationError" }

// Error satisfies the builtin error interface
func (e PageResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPageResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PageResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PageResponseValidationError{}

// Validate checks the field values on ProductSearchResult_Product with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ProductSearchResult_Product) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Title

	// no validation rules for Price

	return nil
}

// ProductSearchResult_ProductValidationError is the validation error returned
// by ProductSearchResult_Product.Validate if the designated constraints
// aren't met.
type ProductSearchResult_ProductValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProductSearchResult_ProductValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProductSearchResult_ProductValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProductSearchResult_ProductValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProductSearchResult_ProductValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProductSearchResult_ProductValidationError) ErrorName() string {
	return "ProductSearchResult_ProductValidationError"
}

// Error satisfies the builtin error interface
func (e ProductSearchResult_ProductValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProductSearchResult_Product.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProductSearchResult_ProductValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProductSearchResult_ProductValidationError{}

// Validate checks the field values on SecondRequest_Body with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *SecondRequest_Body) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for DraftLineId

	if v, ok := interface{}(m.GetDraftLine()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SecondRequest_BodyValidationError{
				field:  "DraftLine",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// SecondRequest_BodyValidationError is the validation error returned by
// SecondRequest_Body.Validate if the designated constraints aren't met.
type SecondRequest_BodyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SecondRequest_BodyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SecondRequest_BodyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SecondRequest_BodyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SecondRequest_BodyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SecondRequest_BodyValidationError) ErrorName() string {
	return "SecondRequest_BodyValidationError"
}

// Error satisfies the builtin error interface
func (e SecondRequest_BodyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSecondRequest_Body.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SecondRequest_BodyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SecondRequest_BodyValidationError{}

// Validate checks the field values on ThirdRequest_Body with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *ThirdRequest_Body) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for DraftLineId

	if v, ok := interface{}(m.GetDraftLine()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ThirdRequest_BodyValidationError{
				field:  "DraftLine",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ThirdRequest_BodyValidationError is the validation error returned by
// ThirdRequest_Body.Validate if the designated constraints aren't met.
type ThirdRequest_BodyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ThirdRequest_BodyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ThirdRequest_BodyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ThirdRequest_BodyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ThirdRequest_BodyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ThirdRequest_BodyValidationError) ErrorName() string {
	return "ThirdRequest_BodyValidationError"
}

// Error satisfies the builtin error interface
func (e ThirdRequest_BodyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sThirdRequest_Body.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ThirdRequest_BodyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ThirdRequest_BodyValidationError{}
