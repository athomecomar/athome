// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: semantic.proto

package pbsemantic

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}
)

// define the regex for a UUID once up-front
var _semantic_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on RetrieveCategoryRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RetrieveCategoryRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for CategoryId

	return nil
}

// RetrieveCategoryRequestValidationError is the validation error returned by
// RetrieveCategoryRequest.Validate if the designated constraints aren't met.
type RetrieveCategoryRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RetrieveCategoryRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RetrieveCategoryRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RetrieveCategoryRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RetrieveCategoryRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RetrieveCategoryRequestValidationError) ErrorName() string {
	return "RetrieveCategoryRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RetrieveCategoryRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRetrieveCategoryRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RetrieveCategoryRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RetrieveCategoryRequestValidationError{}

// Validate checks the field values on Category with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Category) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Name

	// no validation rules for ParentId

	for key, val := range m.GetChilds() {
		_ = val

		// no validation rules for Childs[key]

		if v, ok := interface{}(val).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CategoryValidationError{
					field:  fmt.Sprintf("Childs[%v]", key),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for IdentificationTemplate

	return nil
}

// CategoryValidationError is the validation error returned by
// Category.Validate if the designated constraints aren't met.
type CategoryValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CategoryValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CategoryValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CategoryValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CategoryValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CategoryValidationError) ErrorName() string { return "CategoryValidationError" }

// Error satisfies the builtin error interface
func (e CategoryValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCategory.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CategoryValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CategoryValidationError{}

// Validate checks the field values on AttributeSchema with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *AttributeSchema) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for CategoryId

	// no validation rules for Name

	// no validation rules for ValueType

	return nil
}

// AttributeSchemaValidationError is the validation error returned by
// AttributeSchema.Validate if the designated constraints aren't met.
type AttributeSchemaValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AttributeSchemaValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AttributeSchemaValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AttributeSchemaValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AttributeSchemaValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AttributeSchemaValidationError) ErrorName() string { return "AttributeSchemaValidationError" }

// Error satisfies the builtin error interface
func (e AttributeSchemaValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAttributeSchema.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AttributeSchemaValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AttributeSchemaValidationError{}

// Validate checks the field values on RetrieveCategoriesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RetrieveCategoriesResponse) Validate() error {
	if m == nil {
		return nil
	}

	for key, val := range m.GetCategories() {
		_ = val

		// no validation rules for Categories[key]

		if v, ok := interface{}(val).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RetrieveCategoriesResponseValidationError{
					field:  fmt.Sprintf("Categories[%v]", key),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// RetrieveCategoriesResponseValidationError is the validation error returned
// by RetrieveCategoriesResponse.Validate if the designated constraints aren't met.
type RetrieveCategoriesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RetrieveCategoriesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RetrieveCategoriesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RetrieveCategoriesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RetrieveCategoriesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RetrieveCategoriesResponseValidationError) ErrorName() string {
	return "RetrieveCategoriesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RetrieveCategoriesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRetrieveCategoriesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RetrieveCategoriesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RetrieveCategoriesResponseValidationError{}

// Validate checks the field values on RetrieveAttributeSchemasRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RetrieveAttributeSchemasRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for CategoryId

	return nil
}

// RetrieveAttributeSchemasRequestValidationError is the validation error
// returned by RetrieveAttributeSchemasRequest.Validate if the designated
// constraints aren't met.
type RetrieveAttributeSchemasRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RetrieveAttributeSchemasRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RetrieveAttributeSchemasRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RetrieveAttributeSchemasRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RetrieveAttributeSchemasRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RetrieveAttributeSchemasRequestValidationError) ErrorName() string {
	return "RetrieveAttributeSchemasRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RetrieveAttributeSchemasRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRetrieveAttributeSchemasRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RetrieveAttributeSchemasRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RetrieveAttributeSchemasRequestValidationError{}

// Validate checks the field values on Entity with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Entity) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for EntityId

	// no validation rules for EntityTable

	return nil
}

// EntityValidationError is the validation error returned by Entity.Validate if
// the designated constraints aren't met.
type EntityValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EntityValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EntityValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EntityValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EntityValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EntityValidationError) ErrorName() string { return "EntityValidationError" }

// Error satisfies the builtin error interface
func (e EntityValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEntity.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EntityValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EntityValidationError{}

// Validate checks the field values on RetrieveAttributeDatasRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RetrieveAttributeDatasRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetEntity()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RetrieveAttributeDatasRequestValidationError{
				field:  "Entity",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// RetrieveAttributeDatasRequestValidationError is the validation error
// returned by RetrieveAttributeDatasRequest.Validate if the designated
// constraints aren't met.
type RetrieveAttributeDatasRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RetrieveAttributeDatasRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RetrieveAttributeDatasRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RetrieveAttributeDatasRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RetrieveAttributeDatasRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RetrieveAttributeDatasRequestValidationError) ErrorName() string {
	return "RetrieveAttributeDatasRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RetrieveAttributeDatasRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRetrieveAttributeDatasRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RetrieveAttributeDatasRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RetrieveAttributeDatasRequestValidationError{}

// Validate checks the field values on DeleteAttributeDatasRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeleteAttributeDatasRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for AccessToken

	if v, ok := interface{}(m.GetEntity()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DeleteAttributeDatasRequestValidationError{
				field:  "Entity",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// DeleteAttributeDatasRequestValidationError is the validation error returned
// by DeleteAttributeDatasRequest.Validate if the designated constraints
// aren't met.
type DeleteAttributeDatasRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteAttributeDatasRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteAttributeDatasRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteAttributeDatasRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteAttributeDatasRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteAttributeDatasRequestValidationError) ErrorName() string {
	return "DeleteAttributeDatasRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteAttributeDatasRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteAttributeDatasRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteAttributeDatasRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteAttributeDatasRequestValidationError{}

// Validate checks the field values on RetrieveAttributeSchemasResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *RetrieveAttributeSchemasResponse) Validate() error {
	if m == nil {
		return nil
	}

	for key, val := range m.GetAttributes() {
		_ = val

		// no validation rules for Attributes[key]

		if v, ok := interface{}(val).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RetrieveAttributeSchemasResponseValidationError{
					field:  fmt.Sprintf("Attributes[%v]", key),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// RetrieveAttributeSchemasResponseValidationError is the validation error
// returned by RetrieveAttributeSchemasResponse.Validate if the designated
// constraints aren't met.
type RetrieveAttributeSchemasResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RetrieveAttributeSchemasResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RetrieveAttributeSchemasResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RetrieveAttributeSchemasResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RetrieveAttributeSchemasResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RetrieveAttributeSchemasResponseValidationError) ErrorName() string {
	return "RetrieveAttributeSchemasResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RetrieveAttributeSchemasResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRetrieveAttributeSchemasResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RetrieveAttributeSchemasResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RetrieveAttributeSchemasResponseValidationError{}

// Validate checks the field values on RetrieveAttributeDatasResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RetrieveAttributeDatasResponse) Validate() error {
	if m == nil {
		return nil
	}

	for key, val := range m.GetAttributes() {
		_ = val

		// no validation rules for Attributes[key]

		if v, ok := interface{}(val).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RetrieveAttributeDatasResponseValidationError{
					field:  fmt.Sprintf("Attributes[%v]", key),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// RetrieveAttributeDatasResponseValidationError is the validation error
// returned by RetrieveAttributeDatasResponse.Validate if the designated
// constraints aren't met.
type RetrieveAttributeDatasResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RetrieveAttributeDatasResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RetrieveAttributeDatasResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RetrieveAttributeDatasResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RetrieveAttributeDatasResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RetrieveAttributeDatasResponseValidationError) ErrorName() string {
	return "RetrieveAttributeDatasResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RetrieveAttributeDatasResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRetrieveAttributeDatasResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RetrieveAttributeDatasResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RetrieveAttributeDatasResponseValidationError{}

// Validate checks the field values on SetAttributeDatasResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *SetAttributeDatasResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for AttributeDataId

	if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SetAttributeDatasResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// SetAttributeDatasResponseValidationError is the validation error returned by
// SetAttributeDatasResponse.Validate if the designated constraints aren't met.
type SetAttributeDatasResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetAttributeDatasResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetAttributeDatasResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetAttributeDatasResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetAttributeDatasResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetAttributeDatasResponseValidationError) ErrorName() string {
	return "SetAttributeDatasResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SetAttributeDatasResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetAttributeDatasResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetAttributeDatasResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetAttributeDatasResponseValidationError{}

// Validate checks the field values on CloneAttributeDatasResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CloneAttributeDatasResponse) Validate() error {
	if m == nil {
		return nil
	}

	for key, val := range m.GetAttributes() {
		_ = val

		// no validation rules for Attributes[key]

		if v, ok := interface{}(val).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CloneAttributeDatasResponseValidationError{
					field:  fmt.Sprintf("Attributes[%v]", key),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// CloneAttributeDatasResponseValidationError is the validation error returned
// by CloneAttributeDatasResponse.Validate if the designated constraints
// aren't met.
type CloneAttributeDatasResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CloneAttributeDatasResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CloneAttributeDatasResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CloneAttributeDatasResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CloneAttributeDatasResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CloneAttributeDatasResponseValidationError) ErrorName() string {
	return "CloneAttributeDatasResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CloneAttributeDatasResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCloneAttributeDatasResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CloneAttributeDatasResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CloneAttributeDatasResponseValidationError{}

// Validate checks the field values on SetAttributeDatasRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *SetAttributeDatasRequest) Validate() error {
	if m == nil {
		return nil
	}

	switch m.Corpus.(type) {

	case *SetAttributeDatasRequest_Authorization_:

		if v, ok := interface{}(m.GetAuthorization()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SetAttributeDatasRequestValidationError{
					field:  "Authorization",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *SetAttributeDatasRequest_Data:

		if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SetAttributeDatasRequestValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// SetAttributeDatasRequestValidationError is the validation error returned by
// SetAttributeDatasRequest.Validate if the designated constraints aren't met.
type SetAttributeDatasRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetAttributeDatasRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetAttributeDatasRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetAttributeDatasRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetAttributeDatasRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetAttributeDatasRequestValidationError) ErrorName() string {
	return "SetAttributeDatasRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SetAttributeDatasRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetAttributeDatasRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetAttributeDatasRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetAttributeDatasRequestValidationError{}

// Validate checks the field values on ChangeEntityAttributeDatasRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *ChangeEntityAttributeDatasRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for AccessToken

	if v, ok := interface{}(m.GetFrom()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ChangeEntityAttributeDatasRequestValidationError{
				field:  "From",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetDest()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ChangeEntityAttributeDatasRequestValidationError{
				field:  "Dest",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ChangeEntityAttributeDatasRequestValidationError is the validation error
// returned by ChangeEntityAttributeDatasRequest.Validate if the designated
// constraints aren't met.
type ChangeEntityAttributeDatasRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChangeEntityAttributeDatasRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChangeEntityAttributeDatasRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChangeEntityAttributeDatasRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChangeEntityAttributeDatasRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChangeEntityAttributeDatasRequestValidationError) ErrorName() string {
	return "ChangeEntityAttributeDatasRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ChangeEntityAttributeDatasRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChangeEntityAttributeDatasRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChangeEntityAttributeDatasRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChangeEntityAttributeDatasRequestValidationError{}

// Validate checks the field values on CloneAttributeDatasRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CloneAttributeDatasRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for AccessToken

	// no validation rules for FromEntityId

	// no validation rules for DestEntityId

	// no validation rules for EntityTable

	return nil
}

// CloneAttributeDatasRequestValidationError is the validation error returned
// by CloneAttributeDatasRequest.Validate if the designated constraints aren't met.
type CloneAttributeDatasRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CloneAttributeDatasRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CloneAttributeDatasRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CloneAttributeDatasRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CloneAttributeDatasRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CloneAttributeDatasRequestValidationError) ErrorName() string {
	return "CloneAttributeDatasRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CloneAttributeDatasRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCloneAttributeDatasRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CloneAttributeDatasRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CloneAttributeDatasRequestValidationError{}

// Validate checks the field values on AttributeData with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *AttributeData) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for SchemaId

	return nil
}

// AttributeDataValidationError is the validation error returned by
// AttributeData.Validate if the designated constraints aren't met.
type AttributeDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AttributeDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AttributeDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AttributeDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AttributeDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AttributeDataValidationError) ErrorName() string { return "AttributeDataValidationError" }

// Error satisfies the builtin error interface
func (e AttributeDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAttributeData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AttributeDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AttributeDataValidationError{}

// Validate checks the field values on PredictCategoryRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *PredictCategoryRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Title

	return nil
}

// PredictCategoryRequestValidationError is the validation error returned by
// PredictCategoryRequest.Validate if the designated constraints aren't met.
type PredictCategoryRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PredictCategoryRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PredictCategoryRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PredictCategoryRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PredictCategoryRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PredictCategoryRequestValidationError) ErrorName() string {
	return "PredictCategoryRequestValidationError"
}

// Error satisfies the builtin error interface
func (e PredictCategoryRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPredictCategoryRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PredictCategoryRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PredictCategoryRequestValidationError{}

// Validate checks the field values on PredictCategoryResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *PredictCategoryResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for CategoryId

	if v, ok := interface{}(m.GetCategory()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PredictCategoryResponseValidationError{
				field:  "Category",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Score

	return nil
}

// PredictCategoryResponseValidationError is the validation error returned by
// PredictCategoryResponse.Validate if the designated constraints aren't met.
type PredictCategoryResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PredictCategoryResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PredictCategoryResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PredictCategoryResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PredictCategoryResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PredictCategoryResponseValidationError) ErrorName() string {
	return "PredictCategoryResponseValidationError"
}

// Error satisfies the builtin error interface
func (e PredictCategoryResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPredictCategoryResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PredictCategoryResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PredictCategoryResponseValidationError{}

// Validate checks the field values on RetrieveCategoriesByRoleRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RetrieveCategoriesByRoleRequest) Validate() error {
	if m == nil {
		return nil
	}

	if _, ok := _RetrieveCategoriesByRoleRequest_Role_InLookup[m.GetRole()]; !ok {
		return RetrieveCategoriesByRoleRequestValidationError{
			field:  "Role",
			reason: "value must be in list [service-provider consumer merchant]",
		}
	}

	return nil
}

// RetrieveCategoriesByRoleRequestValidationError is the validation error
// returned by RetrieveCategoriesByRoleRequest.Validate if the designated
// constraints aren't met.
type RetrieveCategoriesByRoleRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RetrieveCategoriesByRoleRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RetrieveCategoriesByRoleRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RetrieveCategoriesByRoleRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RetrieveCategoriesByRoleRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RetrieveCategoriesByRoleRequestValidationError) ErrorName() string {
	return "RetrieveCategoriesByRoleRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RetrieveCategoriesByRoleRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRetrieveCategoriesByRoleRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RetrieveCategoriesByRoleRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RetrieveCategoriesByRoleRequestValidationError{}

var _RetrieveCategoriesByRoleRequest_Role_InLookup = map[string]struct{}{
	"service-provider": {},
	"consumer":         {},
	"merchant":         {},
}

// Validate checks the field values on SetAttributeDatasRequest_Authorization
// with the rules defined in the proto definition for this message. If any
// rules are violated, an error is returned.
func (m *SetAttributeDatasRequest_Authorization) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for AccessToken

	if v, ok := interface{}(m.GetEntity()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SetAttributeDatasRequest_AuthorizationValidationError{
				field:  "Entity",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// SetAttributeDatasRequest_AuthorizationValidationError is the validation
// error returned by SetAttributeDatasRequest_Authorization.Validate if the
// designated constraints aren't met.
type SetAttributeDatasRequest_AuthorizationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetAttributeDatasRequest_AuthorizationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetAttributeDatasRequest_AuthorizationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetAttributeDatasRequest_AuthorizationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetAttributeDatasRequest_AuthorizationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetAttributeDatasRequest_AuthorizationValidationError) ErrorName() string {
	return "SetAttributeDatasRequest_AuthorizationValidationError"
}

// Error satisfies the builtin error interface
func (e SetAttributeDatasRequest_AuthorizationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetAttributeDatasRequest_Authorization.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetAttributeDatasRequest_AuthorizationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetAttributeDatasRequest_AuthorizationValidationError{}
