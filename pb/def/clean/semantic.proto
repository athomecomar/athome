syntax = "proto3";

import "validate/validate.proto";
import "google/protobuf/empty.proto";
import "shared/entity.proto";

option go_package = "./pbsemantic";

package semantic;

service ServiceProviders {
  rpc RetrieveCategories (google.protobuf.Empty) returns (RetrieveCategoriesResponse) {}
  rpc RetrieveCategory (RetrieveCategoryRequest) returns (Category) {}
}

service Merchants {
  rpc RetrieveCategories (google.protobuf.Empty) returns (RetrieveCategoriesResponse) {}
  rpc RetrieveCategory (RetrieveCategoryRequest) returns (Category) {}
}

service Products {
  rpc PredictCategory(stream PredictCategoryRequest) returns (stream PredictCategoryResponse) {}

  rpc RetrieveCategory (RetrieveCategoryRequest) returns (Category) {}
  rpc RetrieveCategories (google.protobuf.Empty) returns (RetrieveCategoriesResponse) {}
  rpc RetrieveAttributeSchemas(RetrieveAttributeSchemasRequest) returns (RetrieveAttributeSchemasResponse) {}
  rpc RetrieveAttributeDatas(RetrieveAttributeDatasRequest) returns (RetrieveAttributeDatasResponse) {}

  rpc SetAttributeDatas(stream SetAttributeDatasRequest) returns (stream SetAttributeDatasResponse) {}
  rpc ChangeEntityAttributeDatas(ChangeEntityAttributeDatasRequest) returns (google.protobuf.Empty) {}
  rpc CloneAttributeDatas(CloneAttributeDatasRequest) returns (CloneAttributeDatasResponse) {}
  rpc DeleteAttributeDatas(DeleteAttributeDatasRequest) returns (google.protobuf.Empty) {}
}

message RetrieveCategoryRequest {
  uint64 category_id = 1;
}

message Category {
  string name = 1;
  uint64 parent_id = 2;
  map<uint64, Category> childs = 3;
  string identification_template = 4;
}

message AttributeSchema {
  uint64 category_id =  1;
  string name = 2;
  string value_type = 3;
}

message RetrieveCategoriesResponse {
  map<uint64, Category> categories = 1;
}

message RetrieveAttributeSchemasRequest {
  uint64 category_id = 1;
}

message RetrieveAttributeDatasRequest {
  shared.Entity entity = 1;
}

message DeleteAttributeDatasRequest {
  string access_token = 1;
  shared.Entity entity = 2;
}

message RetrieveAttributeSchemasResponse {
  map<uint64, AttributeSchema> attributes = 1;
}

message RetrieveAttributeDatasResponse {
  map<uint64, AttributeData> attributes = 1;
}

message SetAttributeDatasResponse {
  uint64 attribute_data_id = 1;
  AttributeData data = 2;
}

message CloneAttributeDatasResponse {
  map<uint64, AttributeData> attributes = 1;
}

message SetAttributeDatasRequest {
  message Authorization {
    string access_token = 1; // from which assigns the user_id col
    shared.Entity entity = 2;
  }

  oneof corpus {
    Authorization authorization = 1;
    AttributeData data = 2;
  }
}

message ChangeEntityAttributeDatasRequest {
  string access_token = 1;

  shared.Entity from = 2;
  shared.Entity dest = 3;
}

message CloneAttributeDatasRequest {
  string access_token = 1;
  uint64 from_entity_id = 2;
  uint64 dest_entity_id = 3;
  string entity_table = 4;
}

message AttributeData {
  uint64 schema_id = 1;
  repeated string values = 2;
}

message PredictCategoryRequest {
  string title = 1;
}

message PredictCategoryResponse {
  uint64 category_id =1;
  Category category = 2;
  double score = 3;
}

message RetrieveCategoriesByRoleRequest {
  string role = 1;
}

