#!/bin/bash
DIR=$(dirname "$0")
cd $DIR/def

export DIR=$(pwd)
export BACKEND_DIR=$DIR/../../backend
svcs="agreement checkout messenger notifier users semantic address identifier auth mailer products images services"
#  --js_out="library=pb_$1,binary:js" \

pbmodcompile()
{
protoc \
  -I . \
  -I ${GOPATH}/src \
  -I ${GOPATH}/src/github.com/envoyproxy/protoc-gen-validate \
  --go_out="plugins=grpc:../" \
  --validate_out="lang=go:../" \
  $2/$1

../cleanpb ./$2/$1 > ./clean/$2/$1
}

pbsvccompile()
{
protoc \
  -I . \
  -I ${GOPATH}/src \
  -I ${GOPATH}/src/github.com/envoyproxy/protoc-gen-validate \
  --go_out="plugins=grpc:../" \
  --validate_out="lang=go:../" \
  $1.proto
../cleanpb ./$1.proto > ./clean/$1.proto
}

pbadd()
{
	git add ../pb$1
	git add ../test/pb${svc}test/mock.go
	git commit -m "pb/pb$1: Bump to latest version"
}

pbpropague()
{
	if [ $TAG = "" ]
	then
		echo "nil tag cant be propagated"
		exit 3
	fi
	cd $BACKEND_DIR/$1
	go get -u github.com/athomecomar/athome/pb
	go mod tidy
	cd $DIR
}

pbrelease()
{
	echo release tag:
	read TAG
	export TAG
	git tag ${TAG} || (echo "TAG ${TAG} ALREADY EXISTS" && exit 3)
	git push origin master
	git push origin ${TAG}
}

echo "build (Y/n):"
read build

for shared in $(ls ./shared)
do
	pbmodcompile $shared shared
done
mv ../github.com/athomecomar/athome/pb/pbshared/* ../pbshared
rm -rf ../github.com/athomecomar/athome/pb/pbshared

for checkout in $(ls ./checkout)
do
	pbmodcompile $checkout checkout
done
mv ../github.com/athomecomar/athome/pb/checkout/* ../checkout
rm -rf ../github.com/athomecomar/athome/pb/checkout

if [ ! ${build} = "n" ]
then
	for svc in $svcs
	do
		pbsvccompile $svc
		testdir=../test/pb${svc}test
		pkgdir=../pb${svc}

		if [ ! -d $testdir ]
		then
			mkdir -p $testdir
		fi

		if [ ${svc} = products ]
		then
			symbols=CreatorClient,Creator_SecondClient,Creator_ThirdClient,ViewerClient,ManagerClient
			cd ${pkgdir}
			mockgen -package pb${svc}test . ${symbols} > ${testdir}/mock.go
			cd ../def
		elif [ ${svc} = semantic ]
		then
			symbols=ServiceProvidersClient,MerchantsClient,ProductsClient,Products_PredictCategoryClient,Products_SetAttributeDatasClient
			cd ${pkgdir}
			mockgen -package pb${svc}test . ${symbols} > ${testdir}/mock.go
			cd ../def
		elif [ ${svc} = notifier ]
		then
			symbols=NotificationsClient,Notifications_RetrieveStreamClient
			cd ${pkgdir}
			mockgen -package pb${svc}test . ${symbols} > ${testdir}/mock.go
			cd ../def
		elif [ ${svc} = images ]
		then
			symbols=Images_CreateImageClient,ImagesClient
			cd ${pkgdir}
			mockgen -package pb${svc}test . ${symbols} > ${testdir}/mock.go
			cd ../def
		else
			result=$(mockgen -source ${pkgdir}/${svc}.pb.go -destination ${testdir}/mock.go -package pb${svc}test || echo xd)
			if [ ! ${result} = "" ]
			then
				echo $svc
				exit 3
			fi
		fi
		pbadd $svc
	done
fi

pbrelease

for svc in $svcs
do
	pbpropague $svc
done


echo "Done"


