// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: services.proto

package pbservices

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}
)

// define the regex for a UUID once up-front
var _services_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on SearchAvailableShippingsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *SearchAvailableShippingsRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetStart()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SearchAvailableShippingsRequestValidationError{
				field:  "Start",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetEnd()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SearchAvailableShippingsRequestValidationError{
				field:  "End",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if _, ok := _SearchAvailableShippingsRequest_Dow_InLookup[m.GetDow()]; !ok {
		return SearchAvailableShippingsRequestValidationError{
			field:  "Dow",
			reason: "value must be in list [monday tuesday wednesday thursday friday saturday sunday]",
		}
	}

	// no validation rules for MaxVolWeight

	// no validation rules for DistanceInKilometers

	return nil
}

// SearchAvailableShippingsRequestValidationError is the validation error
// returned by SearchAvailableShippingsRequest.Validate if the designated
// constraints aren't met.
type SearchAvailableShippingsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SearchAvailableShippingsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SearchAvailableShippingsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SearchAvailableShippingsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SearchAvailableShippingsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SearchAvailableShippingsRequestValidationError) ErrorName() string {
	return "SearchAvailableShippingsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SearchAvailableShippingsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSearchAvailableShippingsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SearchAvailableShippingsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SearchAvailableShippingsRequestValidationError{}

var _SearchAvailableShippingsRequest_Dow_InLookup = map[string]struct{}{
	"monday":    {},
	"tuesday":   {},
	"wednesday": {},
	"thursday":  {},
	"friday":    {},
	"saturday":  {},
	"sunday":    {},
}

// Validate checks the field values on SearchAvailableShippingsResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *SearchAvailableShippingsResponse) Validate() error {
	if m == nil {
		return nil
	}

	for key, val := range m.GetServices() {
		_ = val

		// no validation rules for Services[key]

		if v, ok := interface{}(val).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SearchAvailableShippingsResponseValidationError{
					field:  fmt.Sprintf("Services[%v]", key),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// SearchAvailableShippingsResponseValidationError is the validation error
// returned by SearchAvailableShippingsResponse.Validate if the designated
// constraints aren't met.
type SearchAvailableShippingsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SearchAvailableShippingsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SearchAvailableShippingsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SearchAvailableShippingsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SearchAvailableShippingsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SearchAvailableShippingsResponseValidationError) ErrorName() string {
	return "SearchAvailableShippingsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SearchAvailableShippingsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSearchAvailableShippingsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SearchAvailableShippingsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SearchAvailableShippingsResponseValidationError{}

// Validate checks the field values on SearchServicesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *SearchServicesRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Query

	if v, ok := interface{}(m.GetPage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SearchServicesRequestValidationError{
				field:  "Page",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// SearchServicesRequestValidationError is the validation error returned by
// SearchServicesRequest.Validate if the designated constraints aren't met.
type SearchServicesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SearchServicesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SearchServicesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SearchServicesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SearchServicesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SearchServicesRequestValidationError) ErrorName() string {
	return "SearchServicesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SearchServicesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSearchServicesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SearchServicesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SearchServicesRequestValidationError{}

// Validate checks the field values on SearchServicesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *SearchServicesResponse) Validate() error {
	if m == nil {
		return nil
	}

	for key, val := range m.GetServices() {
		_ = val

		// no validation rules for Services[key]

		if v, ok := interface{}(val).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SearchServicesResponseValidationError{
					field:  fmt.Sprintf("Services[%v]", key),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if v, ok := interface{}(m.GetPage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SearchServicesResponseValidationError{
				field:  "Page",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// SearchServicesResponseValidationError is the validation error returned by
// SearchServicesResponse.Validate if the designated constraints aren't met.
type SearchServicesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SearchServicesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SearchServicesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SearchServicesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SearchServicesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SearchServicesResponseValidationError) ErrorName() string {
	return "SearchServicesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SearchServicesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSearchServicesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SearchServicesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SearchServicesResponseValidationError{}

// Validate checks the field values on PageRequest with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *PageRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Cursor

	// no validation rules for Size

	return nil
}

// PageRequestValidationError is the validation error returned by
// PageRequest.Validate if the designated constraints aren't met.
type PageRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PageRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PageRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PageRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PageRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PageRequestValidationError) ErrorName() string { return "PageRequestValidationError" }

// Error satisfies the builtin error interface
func (e PageRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPageRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PageRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PageRequestValidationError{}

// Validate checks the field values on PageResponse with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *PageResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for NextCursor

	// no validation rules for TotalSize

	return nil
}

// PageResponseValidationError is the validation error returned by
// PageResponse.Validate if the designated constraints aren't met.
type PageResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PageResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PageResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PageResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PageResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PageResponseValidationError) ErrorName() string { return "PageResponseValidationError" }

// Error satisfies the builtin error interface
func (e PageResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPageResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PageResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PageResponseValidationError{}

// Validate checks the field values on RetrieveServiceDetailRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RetrieveServiceDetailRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for ServiceId

	return nil
}

// RetrieveServiceDetailRequestValidationError is the validation error returned
// by RetrieveServiceDetailRequest.Validate if the designated constraints
// aren't met.
type RetrieveServiceDetailRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RetrieveServiceDetailRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RetrieveServiceDetailRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RetrieveServiceDetailRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RetrieveServiceDetailRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RetrieveServiceDetailRequestValidationError) ErrorName() string {
	return "RetrieveServiceDetailRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RetrieveServiceDetailRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRetrieveServiceDetailRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RetrieveServiceDetailRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RetrieveServiceDetailRequestValidationError{}

// Validate checks the field values on ServiceSearchResult with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ServiceSearchResult) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetService()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ServiceSearchResultValidationError{
				field:  "Service",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ServiceSearchResultValidationError{
				field:  "User",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ServiceSearchResultValidationError is the validation error returned by
// ServiceSearchResult.Validate if the designated constraints aren't met.
type ServiceSearchResultValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ServiceSearchResultValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ServiceSearchResultValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ServiceSearchResultValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ServiceSearchResultValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ServiceSearchResultValidationError) ErrorName() string {
	return "ServiceSearchResultValidationError"
}

// Error satisfies the builtin error interface
func (e ServiceSearchResultValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sServiceSearchResult.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ServiceSearchResultValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ServiceSearchResultValidationError{}

// Validate checks the field values on ServiceDetail with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *ServiceDetail) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetService()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ServiceDetailValidationError{
				field:  "Service",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ServiceDetailValidationError{
				field:  "User",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetAddress()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ServiceDetailValidationError{
				field:  "Address",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetCalendar()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ServiceDetailValidationError{
				field:  "Calendar",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ServiceDetailValidationError is the validation error returned by
// ServiceDetail.Validate if the designated constraints aren't met.
type ServiceDetailValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ServiceDetailValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ServiceDetailValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ServiceDetailValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ServiceDetailValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ServiceDetailValidationError) ErrorName() string { return "ServiceDetailValidationError" }

// Error satisfies the builtin error interface
func (e ServiceDetailValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sServiceDetail.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ServiceDetailValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ServiceDetailValidationError{}

// Validate checks the field values on User with the rules defined in the proto
// definition for this message. If any rules are violated, an error is returned.
func (m *User) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Name

	// no validation rules for Surname

	// no validation rules for ImageUrl

	return nil
}

// UserValidationError is the validation error returned by User.Validate if the
// designated constraints aren't met.
type UserValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserValidationError) ErrorName() string { return "UserValidationError" }

// Error satisfies the builtin error interface
func (e UserValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUser.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserValidationError{}

// Validate checks the field values on Address with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Address) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Zipcode

	// no validation rules for Street

	// no validation rules for Number

	// no validation rules for Floor

	// no validation rules for Department

	return nil
}

// AddressValidationError is the validation error returned by Address.Validate
// if the designated constraints aren't met.
type AddressValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddressValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddressValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddressValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddressValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddressValidationError) ErrorName() string { return "AddressValidationError" }

// Error satisfies the builtin error interface
func (e AddressValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddress.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddressValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddressValidationError{}

// Validate checks the field values on RetrieveCalendarRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RetrieveCalendarRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for CalendarId

	return nil
}

// RetrieveCalendarRequestValidationError is the validation error returned by
// RetrieveCalendarRequest.Validate if the designated constraints aren't met.
type RetrieveCalendarRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RetrieveCalendarRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RetrieveCalendarRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RetrieveCalendarRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RetrieveCalendarRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RetrieveCalendarRequestValidationError) ErrorName() string {
	return "RetrieveCalendarRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RetrieveCalendarRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRetrieveCalendarRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RetrieveCalendarRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RetrieveCalendarRequestValidationError{}

// Validate checks the field values on RetrieveMyCalendarsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RetrieveMyCalendarsRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for AccessToken

	return nil
}

// RetrieveMyCalendarsRequestValidationError is the validation error returned
// by RetrieveMyCalendarsRequest.Validate if the designated constraints aren't met.
type RetrieveMyCalendarsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RetrieveMyCalendarsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RetrieveMyCalendarsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RetrieveMyCalendarsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RetrieveMyCalendarsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RetrieveMyCalendarsRequestValidationError) ErrorName() string {
	return "RetrieveMyCalendarsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RetrieveMyCalendarsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRetrieveMyCalendarsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RetrieveMyCalendarsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RetrieveMyCalendarsRequestValidationError{}

// Validate checks the field values on RetrieveMyCalendarsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RetrieveMyCalendarsResponse) Validate() error {
	if m == nil {
		return nil
	}

	for key, val := range m.GetCalendars() {
		_ = val

		// no validation rules for Calendars[key]

		if v, ok := interface{}(val).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RetrieveMyCalendarsResponseValidationError{
					field:  fmt.Sprintf("Calendars[%v]", key),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// RetrieveMyCalendarsResponseValidationError is the validation error returned
// by RetrieveMyCalendarsResponse.Validate if the designated constraints
// aren't met.
type RetrieveMyCalendarsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RetrieveMyCalendarsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RetrieveMyCalendarsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RetrieveMyCalendarsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RetrieveMyCalendarsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RetrieveMyCalendarsResponseValidationError) ErrorName() string {
	return "RetrieveMyCalendarsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RetrieveMyCalendarsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRetrieveMyCalendarsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RetrieveMyCalendarsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RetrieveMyCalendarsResponseValidationError{}

// Validate checks the field values on Event with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Event) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for CalendarId

	// no validation rules for ClaimantId

	if _, ok := _Event_Dow_InLookup[m.GetDow()]; !ok {
		return EventValidationError{
			field:  "Dow",
			reason: "value must be in list [monday tuesday wednesday thursday friday saturday sunday]",
		}
	}

	if v, ok := interface{}(m.GetStart()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EventValidationError{
				field:  "Start",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetEnd()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EventValidationError{
				field:  "End",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for OrderId

	// no validation rules for IsConfirmed

	return nil
}

// EventValidationError is the validation error returned by Event.Validate if
// the designated constraints aren't met.
type EventValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EventValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EventValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EventValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EventValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EventValidationError) ErrorName() string { return "EventValidationError" }

// Error satisfies the builtin error interface
func (e EventValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEvent.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EventValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EventValidationError{}

var _Event_Dow_InLookup = map[string]struct{}{
	"monday":    {},
	"tuesday":   {},
	"wednesday": {},
	"thursday":  {},
	"friday":    {},
	"saturday":  {},
	"sunday":    {},
}

// Validate checks the field values on RetrieveRegistryRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RetrieveRegistryRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for AccessToken

	return nil
}

// RetrieveRegistryRequestValidationError is the validation error returned by
// RetrieveRegistryRequest.Validate if the designated constraints aren't met.
type RetrieveRegistryRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RetrieveRegistryRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RetrieveRegistryRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RetrieveRegistryRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RetrieveRegistryRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RetrieveRegistryRequestValidationError) ErrorName() string {
	return "RetrieveRegistryRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RetrieveRegistryRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRetrieveRegistryRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RetrieveRegistryRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RetrieveRegistryRequestValidationError{}

// Validate checks the field values on DeleteRegistryRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeleteRegistryRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for AccessToken

	return nil
}

// DeleteRegistryRequestValidationError is the validation error returned by
// DeleteRegistryRequest.Validate if the designated constraints aren't met.
type DeleteRegistryRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteRegistryRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteRegistryRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteRegistryRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteRegistryRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteRegistryRequestValidationError) ErrorName() string {
	return "DeleteRegistryRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteRegistryRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteRegistryRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteRegistryRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteRegistryRequestValidationError{}

// Validate checks the field values on Registry with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Registry) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Stage

	if v, ok := interface{}(m.GetFirst()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RegistryValidationError{
				field:  "First",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetSecond()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RegistryValidationError{
				field:  "Second",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetThird()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RegistryValidationError{
				field:  "Third",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// RegistryValidationError is the validation error returned by
// Registry.Validate if the designated constraints aren't met.
type RegistryValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RegistryValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RegistryValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RegistryValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RegistryValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RegistryValidationError) ErrorName() string { return "RegistryValidationError" }

// Error satisfies the builtin error interface
func (e RegistryValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRegistry.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RegistryValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RegistryValidationError{}

// Validate checks the field values on RegistryDetail with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *RegistryDetail) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for RegistryId

	if v, ok := interface{}(m.GetRegistry()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RegistryDetailValidationError{
				field:  "Registry",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetCalendar()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RegistryDetailValidationError{
				field:  "Calendar",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for key, val := range m.GetAvailabilities() {
		_ = val

		// no validation rules for Availabilities[key]

		if v, ok := interface{}(val).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RegistryDetailValidationError{
					field:  fmt.Sprintf("Availabilities[%v]", key),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// RegistryDetailValidationError is the validation error returned by
// RegistryDetail.Validate if the designated constraints aren't met.
type RegistryDetailValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RegistryDetailValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RegistryDetailValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RegistryDetailValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RegistryDetailValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RegistryDetailValidationError) ErrorName() string { return "RegistryDetailValidationError" }

// Error satisfies the builtin error interface
func (e RegistryDetailValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRegistryDetail.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RegistryDetailValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RegistryDetailValidationError{}

// Validate checks the field values on Service with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Service) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for AddressId

	// no validation rules for Title

	// no validation rules for DurationInMinutes

	if v, ok := interface{}(m.GetPrice()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ServiceValidationError{
				field:  "Price",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for CalendarId

	// no validation rules for UserId

	return nil
}

// ServiceValidationError is the validation error returned by Service.Validate
// if the designated constraints aren't met.
type ServiceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ServiceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ServiceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ServiceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ServiceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ServiceValidationError) ErrorName() string { return "ServiceValidationError" }

// Error satisfies the builtin error interface
func (e ServiceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sService.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ServiceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ServiceValidationError{}

// Validate checks the field values on PrevRequest with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *PrevRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for AccessToken

	return nil
}

// PrevRequestValidationError is the validation error returned by
// PrevRequest.Validate if the designated constraints aren't met.
type PrevRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PrevRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PrevRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PrevRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PrevRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PrevRequestValidationError) ErrorName() string { return "PrevRequestValidationError" }

// Error satisfies the builtin error interface
func (e PrevRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPrevRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PrevRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PrevRequestValidationError{}

// Validate checks the field values on FirstRequest with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *FirstRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for AccessToken

	if v, ok := interface{}(m.GetBody()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FirstRequestValidationError{
				field:  "Body",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// FirstRequestValidationError is the validation error returned by
// FirstRequest.Validate if the designated constraints aren't met.
type FirstRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FirstRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FirstRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FirstRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FirstRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FirstRequestValidationError) ErrorName() string { return "FirstRequestValidationError" }

// Error satisfies the builtin error interface
func (e FirstRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFirstRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FirstRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FirstRequestValidationError{}

// Validate checks the field values on FirstResponse with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *FirstResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for RegistryId

	return nil
}

// FirstResponseValidationError is the validation error returned by
// FirstResponse.Validate if the designated constraints aren't met.
type FirstResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FirstResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FirstResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FirstResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FirstResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FirstResponseValidationError) ErrorName() string { return "FirstResponseValidationError" }

// Error satisfies the builtin error interface
func (e FirstResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFirstResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FirstResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FirstResponseValidationError{}

// Validate checks the field values on SecondRequest with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *SecondRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for AccessToken

	if v, ok := interface{}(m.GetBody()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SecondRequestValidationError{
				field:  "Body",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// SecondRequestValidationError is the validation error returned by
// SecondRequest.Validate if the designated constraints aren't met.
type SecondRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SecondRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SecondRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SecondRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SecondRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SecondRequestValidationError) ErrorName() string { return "SecondRequestValidationError" }

// Error satisfies the builtin error interface
func (e SecondRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSecondRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SecondRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SecondRequestValidationError{}

// Validate checks the field values on ThirdRequest with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *ThirdRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for AccessToken

	if v, ok := interface{}(m.GetBody()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ThirdRequestValidationError{
				field:  "Body",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ThirdRequestValidationError is the validation error returned by
// ThirdRequest.Validate if the designated constraints aren't met.
type ThirdRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ThirdRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ThirdRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ThirdRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ThirdRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ThirdRequestValidationError) ErrorName() string { return "ThirdRequestValidationError" }

// Error satisfies the builtin error interface
func (e ThirdRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sThirdRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ThirdRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ThirdRequestValidationError{}

// Validate checks the field values on ThirdResponse with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *ThirdResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for ServiceId

	if v, ok := interface{}(m.GetService()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ThirdResponseValidationError{
				field:  "Service",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ThirdResponseValidationError is the validation error returned by
// ThirdResponse.Validate if the designated constraints aren't met.
type ThirdResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ThirdResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ThirdResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ThirdResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ThirdResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ThirdResponseValidationError) ErrorName() string { return "ThirdResponseValidationError" }

// Error satisfies the builtin error interface
func (e ThirdResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sThirdResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ThirdResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ThirdResponseValidationError{}

// Validate checks the field values on CreateCalendarRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateCalendarRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for AccessToken

	if v, ok := interface{}(m.GetCalendar()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateCalendarRequestValidationError{
				field:  "Calendar",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetAvailabilities() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreateCalendarRequestValidationError{
					field:  fmt.Sprintf("Availabilities[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// CreateCalendarRequestValidationError is the validation error returned by
// CreateCalendarRequest.Validate if the designated constraints aren't met.
type CreateCalendarRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateCalendarRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateCalendarRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateCalendarRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateCalendarRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateCalendarRequestValidationError) ErrorName() string {
	return "CreateCalendarRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateCalendarRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateCalendarRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateCalendarRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateCalendarRequestValidationError{}

// Validate checks the field values on Calendar with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Calendar) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Name

	// no validation rules for GroupId

	// no validation rules for UserId

	return nil
}

// CalendarValidationError is the validation error returned by
// Calendar.Validate if the designated constraints aren't met.
type CalendarValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CalendarValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CalendarValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CalendarValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CalendarValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CalendarValidationError) ErrorName() string { return "CalendarValidationError" }

// Error satisfies the builtin error interface
func (e CalendarValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCalendar.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CalendarValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CalendarValidationError{}

// Validate checks the field values on CalendarDetail with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *CalendarDetail) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetCalendar()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CalendarDetailValidationError{
				field:  "Calendar",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for key, val := range m.GetAvailabilities() {
		_ = val

		// no validation rules for Availabilities[key]

		if v, ok := interface{}(val).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CalendarDetailValidationError{
					field:  fmt.Sprintf("Availabilities[%v]", key),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for key, val := range m.GetEvents() {
		_ = val

		// no validation rules for Events[key]

		if v, ok := interface{}(val).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CalendarDetailValidationError{
					field:  fmt.Sprintf("Events[%v]", key),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// CalendarDetailValidationError is the validation error returned by
// CalendarDetail.Validate if the designated constraints aren't met.
type CalendarDetailValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CalendarDetailValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CalendarDetailValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CalendarDetailValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CalendarDetailValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CalendarDetailValidationError) ErrorName() string { return "CalendarDetailValidationError" }

// Error satisfies the builtin error interface
func (e CalendarDetailValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCalendarDetail.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CalendarDetailValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CalendarDetailValidationError{}

// Validate checks the field values on CreateEventRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateEventRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for AccessToken

	// no validation rules for CalendarId

	if v, ok := interface{}(m.GetEvent()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateEventRequestValidationError{
				field:  "Event",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// CreateEventRequestValidationError is the validation error returned by
// CreateEventRequest.Validate if the designated constraints aren't met.
type CreateEventRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateEventRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateEventRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateEventRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateEventRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateEventRequestValidationError) ErrorName() string {
	return "CreateEventRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateEventRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateEventRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateEventRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateEventRequestValidationError{}

// Validate checks the field values on ConfirmEventRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ConfirmEventRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for AccessToken

	// no validation rules for EventId

	return nil
}

// ConfirmEventRequestValidationError is the validation error returned by
// ConfirmEventRequest.Validate if the designated constraints aren't met.
type ConfirmEventRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ConfirmEventRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ConfirmEventRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ConfirmEventRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ConfirmEventRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ConfirmEventRequestValidationError) ErrorName() string {
	return "ConfirmEventRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ConfirmEventRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sConfirmEventRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ConfirmEventRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ConfirmEventRequestValidationError{}

// Validate checks the field values on CreateEventResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateEventResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for EventId

	if v, ok := interface{}(m.GetEvent()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateEventResponseValidationError{
				field:  "Event",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// CreateEventResponseValidationError is the validation error returned by
// CreateEventResponse.Validate if the designated constraints aren't met.
type CreateEventResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateEventResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateEventResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateEventResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateEventResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateEventResponseValidationError) ErrorName() string {
	return "CreateEventResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateEventResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateEventResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateEventResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateEventResponseValidationError{}

// Validate checks the field values on CreateCalendarResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateCalendarResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for CalendarId

	if v, ok := interface{}(m.GetCalendar()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateCalendarResponseValidationError{
				field:  "Calendar",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for key, val := range m.GetAvailabilities() {
		_ = val

		// no validation rules for Availabilities[key]

		if v, ok := interface{}(val).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreateCalendarResponseValidationError{
					field:  fmt.Sprintf("Availabilities[%v]", key),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// CreateCalendarResponseValidationError is the validation error returned by
// CreateCalendarResponse.Validate if the designated constraints aren't met.
type CreateCalendarResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateCalendarResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateCalendarResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateCalendarResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateCalendarResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateCalendarResponseValidationError) ErrorName() string {
	return "CreateCalendarResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateCalendarResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateCalendarResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateCalendarResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateCalendarResponseValidationError{}

// Validate checks the field values on Availability with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *Availability) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for CalendarId

	if _, ok := _Availability_Dow_InLookup[m.GetDow()]; !ok {
		return AvailabilityValidationError{
			field:  "Dow",
			reason: "value must be in list [monday tuesday wednesday thursday friday saturday sunday]",
		}
	}

	if v, ok := interface{}(m.GetStart()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AvailabilityValidationError{
				field:  "Start",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetEnd()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AvailabilityValidationError{
				field:  "End",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// AvailabilityValidationError is the validation error returned by
// Availability.Validate if the designated constraints aren't met.
type AvailabilityValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AvailabilityValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AvailabilityValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AvailabilityValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AvailabilityValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AvailabilityValidationError) ErrorName() string { return "AvailabilityValidationError" }

// Error satisfies the builtin error interface
func (e AvailabilityValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAvailability.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AvailabilityValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AvailabilityValidationError{}

var _Availability_Dow_InLookup = map[string]struct{}{
	"monday":    {},
	"tuesday":   {},
	"wednesday": {},
	"thursday":  {},
	"friday":    {},
	"saturday":  {},
	"sunday":    {},
}

// Validate checks the field values on Price with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Price) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Min

	// no validation rules for Max

	return nil
}

// PriceValidationError is the validation error returned by Price.Validate if
// the designated constraints aren't met.
type PriceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PriceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PriceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PriceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PriceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PriceValidationError) ErrorName() string { return "PriceValidationError" }

// Error satisfies the builtin error interface
func (e PriceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPrice.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PriceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PriceValidationError{}

// Validate checks the field values on ServiceSearchResult_Service with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ServiceSearchResult_Service) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Title

	if v, ok := interface{}(m.GetPrice()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ServiceSearchResult_ServiceValidationError{
				field:  "Price",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for AddressId

	// no validation rules for CalendarId

	return nil
}

// ServiceSearchResult_ServiceValidationError is the validation error returned
// by ServiceSearchResult_Service.Validate if the designated constraints
// aren't met.
type ServiceSearchResult_ServiceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ServiceSearchResult_ServiceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ServiceSearchResult_ServiceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ServiceSearchResult_ServiceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ServiceSearchResult_ServiceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ServiceSearchResult_ServiceValidationError) ErrorName() string {
	return "ServiceSearchResult_ServiceValidationError"
}

// Error satisfies the builtin error interface
func (e ServiceSearchResult_ServiceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sServiceSearchResult_Service.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ServiceSearchResult_ServiceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ServiceSearchResult_ServiceValidationError{}

// Validate checks the field values on FirstRequest_Body with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *FirstRequest_Body) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for AddressId

	return nil
}

// FirstRequest_BodyValidationError is the validation error returned by
// FirstRequest_Body.Validate if the designated constraints aren't met.
type FirstRequest_BodyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FirstRequest_BodyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FirstRequest_BodyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FirstRequest_BodyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FirstRequest_BodyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FirstRequest_BodyValidationError) ErrorName() string {
	return "FirstRequest_BodyValidationError"
}

// Error satisfies the builtin error interface
func (e FirstRequest_BodyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFirstRequest_Body.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FirstRequest_BodyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FirstRequest_BodyValidationError{}

// Validate checks the field values on SecondRequest_Body with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *SecondRequest_Body) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Title

	// no validation rules for DurationInMinutes

	if v, ok := interface{}(m.GetPrice()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SecondRequest_BodyValidationError{
				field:  "Price",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// SecondRequest_BodyValidationError is the validation error returned by
// SecondRequest_Body.Validate if the designated constraints aren't met.
type SecondRequest_BodyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SecondRequest_BodyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SecondRequest_BodyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SecondRequest_BodyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SecondRequest_BodyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SecondRequest_BodyValidationError) ErrorName() string {
	return "SecondRequest_BodyValidationError"
}

// Error satisfies the builtin error interface
func (e SecondRequest_BodyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSecondRequest_Body.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SecondRequest_BodyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SecondRequest_BodyValidationError{}

// Validate checks the field values on ThirdRequest_Body with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *ThirdRequest_Body) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for CalendarId

	return nil
}

// ThirdRequest_BodyValidationError is the validation error returned by
// ThirdRequest_Body.Validate if the designated constraints aren't met.
type ThirdRequest_BodyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ThirdRequest_BodyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ThirdRequest_BodyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ThirdRequest_BodyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ThirdRequest_BodyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ThirdRequest_BodyValidationError) ErrorName() string {
	return "ThirdRequest_BodyValidationError"
}

// Error satisfies the builtin error interface
func (e ThirdRequest_BodyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sThirdRequest_Body.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ThirdRequest_BodyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ThirdRequest_BodyValidationError{}
