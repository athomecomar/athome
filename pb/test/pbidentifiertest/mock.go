// Code generated by MockGen. DO NOT EDIT.
// Source: ../pbidentifier/identifier.pb.go

// Package pbidentifiertest is a generated GoMock package.
package pbidentifiertest

import (
	context "context"
	pbidentifier "github.com/athomecomar/athome/pb/pbidentifier"
	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
	reflect "reflect"
)

// MockIdentifierClient is a mock of IdentifierClient interface
type MockIdentifierClient struct {
	ctrl     *gomock.Controller
	recorder *MockIdentifierClientMockRecorder
}

// MockIdentifierClientMockRecorder is the mock recorder for MockIdentifierClient
type MockIdentifierClientMockRecorder struct {
	mock *MockIdentifierClient
}

// NewMockIdentifierClient creates a new mock instance
func NewMockIdentifierClient(ctrl *gomock.Controller) *MockIdentifierClient {
	mock := &MockIdentifierClient{ctrl: ctrl}
	mock.recorder = &MockIdentifierClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIdentifierClient) EXPECT() *MockIdentifierClientMockRecorder {
	return m.recorder
}

// ValidateLicensePsychologist mocks base method
func (m *MockIdentifierClient) ValidateLicensePsychologist(ctx context.Context, in *pbidentifier.ValidateLicenseRequest, opts ...grpc.CallOption) (*pbidentifier.ValidateLicenseResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ValidateLicensePsychologist", varargs...)
	ret0, _ := ret[0].(*pbidentifier.ValidateLicenseResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ValidateLicensePsychologist indicates an expected call of ValidateLicensePsychologist
func (mr *MockIdentifierClientMockRecorder) ValidateLicensePsychologist(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateLicensePsychologist", reflect.TypeOf((*MockIdentifierClient)(nil).ValidateLicensePsychologist), varargs...)
}

// InferLicenseByFullnameMedic mocks base method
func (m *MockIdentifierClient) InferLicenseByFullnameMedic(ctx context.Context, in *pbidentifier.InferByFullnameRequest, opts ...grpc.CallOption) (*pbidentifier.InferLicenseResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "InferLicenseByFullnameMedic", varargs...)
	ret0, _ := ret[0].(*pbidentifier.InferLicenseResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InferLicenseByFullnameMedic indicates an expected call of InferLicenseByFullnameMedic
func (mr *MockIdentifierClientMockRecorder) InferLicenseByFullnameMedic(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InferLicenseByFullnameMedic", reflect.TypeOf((*MockIdentifierClient)(nil).InferLicenseByFullnameMedic), varargs...)
}

// InferTomeAndFolioByFullnameLawyer mocks base method
func (m *MockIdentifierClient) InferTomeAndFolioByFullnameLawyer(ctx context.Context, in *pbidentifier.InferByFullnameRequest, opts ...grpc.CallOption) (*pbidentifier.InferTomeAndFolioResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "InferTomeAndFolioByFullnameLawyer", varargs...)
	ret0, _ := ret[0].(*pbidentifier.InferTomeAndFolioResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InferTomeAndFolioByFullnameLawyer indicates an expected call of InferTomeAndFolioByFullnameLawyer
func (mr *MockIdentifierClientMockRecorder) InferTomeAndFolioByFullnameLawyer(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InferTomeAndFolioByFullnameLawyer", reflect.TypeOf((*MockIdentifierClient)(nil).InferTomeAndFolioByFullnameLawyer), varargs...)
}

// InferTomeAndFolioByFullnameAttorney mocks base method
func (m *MockIdentifierClient) InferTomeAndFolioByFullnameAttorney(ctx context.Context, in *pbidentifier.InferByFullnameRequest, opts ...grpc.CallOption) (*pbidentifier.InferTomeAndFolioResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "InferTomeAndFolioByFullnameAttorney", varargs...)
	ret0, _ := ret[0].(*pbidentifier.InferTomeAndFolioResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InferTomeAndFolioByFullnameAttorney indicates an expected call of InferTomeAndFolioByFullnameAttorney
func (mr *MockIdentifierClientMockRecorder) InferTomeAndFolioByFullnameAttorney(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InferTomeAndFolioByFullnameAttorney", reflect.TypeOf((*MockIdentifierClient)(nil).InferTomeAndFolioByFullnameAttorney), varargs...)
}

// InferDataByCUE mocks base method
func (m *MockIdentifierClient) InferDataByCUE(ctx context.Context, in *pbidentifier.InferDataByCUERequest, opts ...grpc.CallOption) (*pbidentifier.InferDataByCUEResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "InferDataByCUE", varargs...)
	ret0, _ := ret[0].(*pbidentifier.InferDataByCUEResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InferDataByCUE indicates an expected call of InferDataByCUE
func (mr *MockIdentifierClientMockRecorder) InferDataByCUE(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InferDataByCUE", reflect.TypeOf((*MockIdentifierClient)(nil).InferDataByCUE), varargs...)
}

// MockIdentifierServer is a mock of IdentifierServer interface
type MockIdentifierServer struct {
	ctrl     *gomock.Controller
	recorder *MockIdentifierServerMockRecorder
}

// MockIdentifierServerMockRecorder is the mock recorder for MockIdentifierServer
type MockIdentifierServerMockRecorder struct {
	mock *MockIdentifierServer
}

// NewMockIdentifierServer creates a new mock instance
func NewMockIdentifierServer(ctrl *gomock.Controller) *MockIdentifierServer {
	mock := &MockIdentifierServer{ctrl: ctrl}
	mock.recorder = &MockIdentifierServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIdentifierServer) EXPECT() *MockIdentifierServerMockRecorder {
	return m.recorder
}

// ValidateLicensePsychologist mocks base method
func (m *MockIdentifierServer) ValidateLicensePsychologist(arg0 context.Context, arg1 *pbidentifier.ValidateLicenseRequest) (*pbidentifier.ValidateLicenseResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateLicensePsychologist", arg0, arg1)
	ret0, _ := ret[0].(*pbidentifier.ValidateLicenseResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ValidateLicensePsychologist indicates an expected call of ValidateLicensePsychologist
func (mr *MockIdentifierServerMockRecorder) ValidateLicensePsychologist(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateLicensePsychologist", reflect.TypeOf((*MockIdentifierServer)(nil).ValidateLicensePsychologist), arg0, arg1)
}

// InferLicenseByFullnameMedic mocks base method
func (m *MockIdentifierServer) InferLicenseByFullnameMedic(arg0 context.Context, arg1 *pbidentifier.InferByFullnameRequest) (*pbidentifier.InferLicenseResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InferLicenseByFullnameMedic", arg0, arg1)
	ret0, _ := ret[0].(*pbidentifier.InferLicenseResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InferLicenseByFullnameMedic indicates an expected call of InferLicenseByFullnameMedic
func (mr *MockIdentifierServerMockRecorder) InferLicenseByFullnameMedic(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InferLicenseByFullnameMedic", reflect.TypeOf((*MockIdentifierServer)(nil).InferLicenseByFullnameMedic), arg0, arg1)
}

// InferTomeAndFolioByFullnameLawyer mocks base method
func (m *MockIdentifierServer) InferTomeAndFolioByFullnameLawyer(arg0 context.Context, arg1 *pbidentifier.InferByFullnameRequest) (*pbidentifier.InferTomeAndFolioResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InferTomeAndFolioByFullnameLawyer", arg0, arg1)
	ret0, _ := ret[0].(*pbidentifier.InferTomeAndFolioResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InferTomeAndFolioByFullnameLawyer indicates an expected call of InferTomeAndFolioByFullnameLawyer
func (mr *MockIdentifierServerMockRecorder) InferTomeAndFolioByFullnameLawyer(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InferTomeAndFolioByFullnameLawyer", reflect.TypeOf((*MockIdentifierServer)(nil).InferTomeAndFolioByFullnameLawyer), arg0, arg1)
}

// InferTomeAndFolioByFullnameAttorney mocks base method
func (m *MockIdentifierServer) InferTomeAndFolioByFullnameAttorney(arg0 context.Context, arg1 *pbidentifier.InferByFullnameRequest) (*pbidentifier.InferTomeAndFolioResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InferTomeAndFolioByFullnameAttorney", arg0, arg1)
	ret0, _ := ret[0].(*pbidentifier.InferTomeAndFolioResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InferTomeAndFolioByFullnameAttorney indicates an expected call of InferTomeAndFolioByFullnameAttorney
func (mr *MockIdentifierServerMockRecorder) InferTomeAndFolioByFullnameAttorney(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InferTomeAndFolioByFullnameAttorney", reflect.TypeOf((*MockIdentifierServer)(nil).InferTomeAndFolioByFullnameAttorney), arg0, arg1)
}

// InferDataByCUE mocks base method
func (m *MockIdentifierServer) InferDataByCUE(arg0 context.Context, arg1 *pbidentifier.InferDataByCUERequest) (*pbidentifier.InferDataByCUEResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InferDataByCUE", arg0, arg1)
	ret0, _ := ret[0].(*pbidentifier.InferDataByCUEResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InferDataByCUE indicates an expected call of InferDataByCUE
func (mr *MockIdentifierServerMockRecorder) InferDataByCUE(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InferDataByCUE", reflect.TypeOf((*MockIdentifierServer)(nil).InferDataByCUE), arg0, arg1)
}
