// Code generated by MockGen. DO NOT EDIT.
// Source: ../pbnotifier/notifier.pb.go

// Package pbnotifiertest is a generated GoMock package.
package pbnotifiertest

import (
	context "context"
	pbnotifier "github.com/athomecomar/athome/pb/pbnotifier"
	gomock "github.com/golang/mock/gomock"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	reflect "reflect"
)

// MockNotificationsClient is a mock of NotificationsClient interface
type MockNotificationsClient struct {
	ctrl     *gomock.Controller
	recorder *MockNotificationsClientMockRecorder
}

// MockNotificationsClientMockRecorder is the mock recorder for MockNotificationsClient
type MockNotificationsClientMockRecorder struct {
	mock *MockNotificationsClient
}

// NewMockNotificationsClient creates a new mock instance
func NewMockNotificationsClient(ctrl *gomock.Controller) *MockNotificationsClient {
	mock := &MockNotificationsClient{ctrl: ctrl}
	mock.recorder = &MockNotificationsClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockNotificationsClient) EXPECT() *MockNotificationsClientMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockNotificationsClient) Create(ctx context.Context, in *pbnotifier.CreateRequest, opts ...grpc.CallOption) (*pbnotifier.CreateResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Create", varargs...)
	ret0, _ := ret[0].(*pbnotifier.CreateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (mr *MockNotificationsClientMockRecorder) Create(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockNotificationsClient)(nil).Create), varargs...)
}

// Retrieve mocks base method
func (m *MockNotificationsClient) Retrieve(ctx context.Context, in *pbnotifier.RetrieveRequest, opts ...grpc.CallOption) (*pbnotifier.Notification, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Retrieve", varargs...)
	ret0, _ := ret[0].(*pbnotifier.Notification)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Retrieve indicates an expected call of Retrieve
func (mr *MockNotificationsClientMockRecorder) Retrieve(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Retrieve", reflect.TypeOf((*MockNotificationsClient)(nil).Retrieve), varargs...)
}

// SetReceived mocks base method
func (m *MockNotificationsClient) SetReceived(ctx context.Context, in *pbnotifier.UpdateStatusRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SetReceived", varargs...)
	ret0, _ := ret[0].(*empty.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetReceived indicates an expected call of SetReceived
func (mr *MockNotificationsClientMockRecorder) SetReceived(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetReceived", reflect.TypeOf((*MockNotificationsClient)(nil).SetReceived), varargs...)
}

// SetSeen mocks base method
func (m *MockNotificationsClient) SetSeen(ctx context.Context, in *pbnotifier.UpdateStatusRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SetSeen", varargs...)
	ret0, _ := ret[0].(*empty.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetSeen indicates an expected call of SetSeen
func (mr *MockNotificationsClientMockRecorder) SetSeen(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetSeen", reflect.TypeOf((*MockNotificationsClient)(nil).SetSeen), varargs...)
}

// RetrieveMany mocks base method
func (m *MockNotificationsClient) RetrieveMany(ctx context.Context, in *pbnotifier.RetrieveManyRequest, opts ...grpc.CallOption) (*pbnotifier.RetrieveManyResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RetrieveMany", varargs...)
	ret0, _ := ret[0].(*pbnotifier.RetrieveManyResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RetrieveMany indicates an expected call of RetrieveMany
func (mr *MockNotificationsClientMockRecorder) RetrieveMany(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RetrieveMany", reflect.TypeOf((*MockNotificationsClient)(nil).RetrieveMany), varargs...)
}

// MockNotificationsServer is a mock of NotificationsServer interface
type MockNotificationsServer struct {
	ctrl     *gomock.Controller
	recorder *MockNotificationsServerMockRecorder
}

// MockNotificationsServerMockRecorder is the mock recorder for MockNotificationsServer
type MockNotificationsServerMockRecorder struct {
	mock *MockNotificationsServer
}

// NewMockNotificationsServer creates a new mock instance
func NewMockNotificationsServer(ctrl *gomock.Controller) *MockNotificationsServer {
	mock := &MockNotificationsServer{ctrl: ctrl}
	mock.recorder = &MockNotificationsServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockNotificationsServer) EXPECT() *MockNotificationsServerMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockNotificationsServer) Create(arg0 context.Context, arg1 *pbnotifier.CreateRequest) (*pbnotifier.CreateResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(*pbnotifier.CreateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (mr *MockNotificationsServerMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockNotificationsServer)(nil).Create), arg0, arg1)
}

// Retrieve mocks base method
func (m *MockNotificationsServer) Retrieve(arg0 context.Context, arg1 *pbnotifier.RetrieveRequest) (*pbnotifier.Notification, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Retrieve", arg0, arg1)
	ret0, _ := ret[0].(*pbnotifier.Notification)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Retrieve indicates an expected call of Retrieve
func (mr *MockNotificationsServerMockRecorder) Retrieve(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Retrieve", reflect.TypeOf((*MockNotificationsServer)(nil).Retrieve), arg0, arg1)
}

// SetReceived mocks base method
func (m *MockNotificationsServer) SetReceived(arg0 context.Context, arg1 *pbnotifier.UpdateStatusRequest) (*empty.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetReceived", arg0, arg1)
	ret0, _ := ret[0].(*empty.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetReceived indicates an expected call of SetReceived
func (mr *MockNotificationsServerMockRecorder) SetReceived(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetReceived", reflect.TypeOf((*MockNotificationsServer)(nil).SetReceived), arg0, arg1)
}

// SetSeen mocks base method
func (m *MockNotificationsServer) SetSeen(arg0 context.Context, arg1 *pbnotifier.UpdateStatusRequest) (*empty.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetSeen", arg0, arg1)
	ret0, _ := ret[0].(*empty.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetSeen indicates an expected call of SetSeen
func (mr *MockNotificationsServerMockRecorder) SetSeen(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetSeen", reflect.TypeOf((*MockNotificationsServer)(nil).SetSeen), arg0, arg1)
}

// RetrieveMany mocks base method
func (m *MockNotificationsServer) RetrieveMany(arg0 context.Context, arg1 *pbnotifier.RetrieveManyRequest) (*pbnotifier.RetrieveManyResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RetrieveMany", arg0, arg1)
	ret0, _ := ret[0].(*pbnotifier.RetrieveManyResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RetrieveMany indicates an expected call of RetrieveMany
func (mr *MockNotificationsServerMockRecorder) RetrieveMany(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RetrieveMany", reflect.TypeOf((*MockNotificationsServer)(nil).RetrieveMany), arg0, arg1)
}
