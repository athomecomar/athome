// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/athomecomar/athome/pb/pbnotifier (interfaces: NotificationsClient,Notifications_RetrieveStreamClient)

// Package pbnotifiertest is a generated GoMock package.
package pbnotifiertest

import (
	context "context"
	pbnotifier "github.com/athomecomar/athome/pb/pbnotifier"
	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
	metadata "google.golang.org/grpc/metadata"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
)

// MockNotificationsClient is a mock of NotificationsClient interface
type MockNotificationsClient struct {
	ctrl     *gomock.Controller
	recorder *MockNotificationsClientMockRecorder
}

// MockNotificationsClientMockRecorder is the mock recorder for MockNotificationsClient
type MockNotificationsClientMockRecorder struct {
	mock *MockNotificationsClient
}

// NewMockNotificationsClient creates a new mock instance
func NewMockNotificationsClient(ctrl *gomock.Controller) *MockNotificationsClient {
	mock := &MockNotificationsClient{ctrl: ctrl}
	mock.recorder = &MockNotificationsClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockNotificationsClient) EXPECT() *MockNotificationsClientMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockNotificationsClient) Create(arg0 context.Context, arg1 *pbnotifier.CreateRequest, arg2 ...grpc.CallOption) (*pbnotifier.CreateResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Create", varargs...)
	ret0, _ := ret[0].(*pbnotifier.CreateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (mr *MockNotificationsClientMockRecorder) Create(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockNotificationsClient)(nil).Create), varargs...)
}

// Retrieve mocks base method
func (m *MockNotificationsClient) Retrieve(arg0 context.Context, arg1 *pbnotifier.RetrieveRequest, arg2 ...grpc.CallOption) (*pbnotifier.Notification, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Retrieve", varargs...)
	ret0, _ := ret[0].(*pbnotifier.Notification)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Retrieve indicates an expected call of Retrieve
func (mr *MockNotificationsClientMockRecorder) Retrieve(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Retrieve", reflect.TypeOf((*MockNotificationsClient)(nil).Retrieve), varargs...)
}

// RetrieveMany mocks base method
func (m *MockNotificationsClient) RetrieveMany(arg0 context.Context, arg1 *pbnotifier.RetrieveManyRequest, arg2 ...grpc.CallOption) (*pbnotifier.RetrieveManyResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RetrieveMany", varargs...)
	ret0, _ := ret[0].(*pbnotifier.RetrieveManyResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RetrieveMany indicates an expected call of RetrieveMany
func (mr *MockNotificationsClientMockRecorder) RetrieveMany(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RetrieveMany", reflect.TypeOf((*MockNotificationsClient)(nil).RetrieveMany), varargs...)
}

// RetrieveStream mocks base method
func (m *MockNotificationsClient) RetrieveStream(arg0 context.Context, arg1 *pbnotifier.RetrieveStreamRequest, arg2 ...grpc.CallOption) (pbnotifier.Notifications_RetrieveStreamClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RetrieveStream", varargs...)
	ret0, _ := ret[0].(pbnotifier.Notifications_RetrieveStreamClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RetrieveStream indicates an expected call of RetrieveStream
func (mr *MockNotificationsClientMockRecorder) RetrieveStream(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RetrieveStream", reflect.TypeOf((*MockNotificationsClient)(nil).RetrieveStream), varargs...)
}

// SetReceived mocks base method
func (m *MockNotificationsClient) SetReceived(arg0 context.Context, arg1 *pbnotifier.UpdateStatusRequest, arg2 ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SetReceived", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetReceived indicates an expected call of SetReceived
func (mr *MockNotificationsClientMockRecorder) SetReceived(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetReceived", reflect.TypeOf((*MockNotificationsClient)(nil).SetReceived), varargs...)
}

// SetSeen mocks base method
func (m *MockNotificationsClient) SetSeen(arg0 context.Context, arg1 *pbnotifier.UpdateStatusRequest, arg2 ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SetSeen", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetSeen indicates an expected call of SetSeen
func (mr *MockNotificationsClientMockRecorder) SetSeen(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetSeen", reflect.TypeOf((*MockNotificationsClient)(nil).SetSeen), varargs...)
}

// MockNotifications_RetrieveStreamClient is a mock of Notifications_RetrieveStreamClient interface
type MockNotifications_RetrieveStreamClient struct {
	ctrl     *gomock.Controller
	recorder *MockNotifications_RetrieveStreamClientMockRecorder
}

// MockNotifications_RetrieveStreamClientMockRecorder is the mock recorder for MockNotifications_RetrieveStreamClient
type MockNotifications_RetrieveStreamClientMockRecorder struct {
	mock *MockNotifications_RetrieveStreamClient
}

// NewMockNotifications_RetrieveStreamClient creates a new mock instance
func NewMockNotifications_RetrieveStreamClient(ctrl *gomock.Controller) *MockNotifications_RetrieveStreamClient {
	mock := &MockNotifications_RetrieveStreamClient{ctrl: ctrl}
	mock.recorder = &MockNotifications_RetrieveStreamClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockNotifications_RetrieveStreamClient) EXPECT() *MockNotifications_RetrieveStreamClientMockRecorder {
	return m.recorder
}

// CloseSend mocks base method
func (m *MockNotifications_RetrieveStreamClient) CloseSend() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend
func (mr *MockNotifications_RetrieveStreamClientMockRecorder) CloseSend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockNotifications_RetrieveStreamClient)(nil).CloseSend))
}

// Context mocks base method
func (m *MockNotifications_RetrieveStreamClient) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context
func (mr *MockNotifications_RetrieveStreamClientMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockNotifications_RetrieveStreamClient)(nil).Context))
}

// Header mocks base method
func (m *MockNotifications_RetrieveStreamClient) Header() (metadata.MD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header
func (mr *MockNotifications_RetrieveStreamClientMockRecorder) Header() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockNotifications_RetrieveStreamClient)(nil).Header))
}

// Recv mocks base method
func (m *MockNotifications_RetrieveStreamClient) Recv() (*pbnotifier.Notification, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*pbnotifier.Notification)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv
func (mr *MockNotifications_RetrieveStreamClientMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockNotifications_RetrieveStreamClient)(nil).Recv))
}

// RecvMsg mocks base method
func (m *MockNotifications_RetrieveStreamClient) RecvMsg(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecvMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg
func (mr *MockNotifications_RetrieveStreamClientMockRecorder) RecvMsg(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockNotifications_RetrieveStreamClient)(nil).RecvMsg), arg0)
}

// SendMsg mocks base method
func (m *MockNotifications_RetrieveStreamClient) SendMsg(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg
func (mr *MockNotifications_RetrieveStreamClientMockRecorder) SendMsg(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockNotifications_RetrieveStreamClient)(nil).SendMsg), arg0)
}

// Trailer mocks base method
func (m *MockNotifications_RetrieveStreamClient) Trailer() metadata.MD {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer
func (mr *MockNotifications_RetrieveStreamClientMockRecorder) Trailer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockNotifications_RetrieveStreamClient)(nil).Trailer))
}
