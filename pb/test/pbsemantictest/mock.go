// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/athomecomar/athome/pb/pbsemantic (interfaces: ServiceProvidersClient,MerchantsClient,ProductsClient,Products_PredictCategoryClient,Products_SetAttributeDatasClient)

// Package pbsemantictest is a generated GoMock package.
package pbsemantictest

import (
	context "context"
	pbsemantic "github.com/athomecomar/athome/pb/pbsemantic"
	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
	metadata "google.golang.org/grpc/metadata"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
)

// MockServiceProvidersClient is a mock of ServiceProvidersClient interface
type MockServiceProvidersClient struct {
	ctrl     *gomock.Controller
	recorder *MockServiceProvidersClientMockRecorder
}

// MockServiceProvidersClientMockRecorder is the mock recorder for MockServiceProvidersClient
type MockServiceProvidersClientMockRecorder struct {
	mock *MockServiceProvidersClient
}

// NewMockServiceProvidersClient creates a new mock instance
func NewMockServiceProvidersClient(ctrl *gomock.Controller) *MockServiceProvidersClient {
	mock := &MockServiceProvidersClient{ctrl: ctrl}
	mock.recorder = &MockServiceProvidersClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockServiceProvidersClient) EXPECT() *MockServiceProvidersClientMockRecorder {
	return m.recorder
}

// RetrieveAttributeDatas mocks base method
func (m *MockServiceProvidersClient) RetrieveAttributeDatas(arg0 context.Context, arg1 *pbsemantic.RetrieveAttributeDatasRequest, arg2 ...grpc.CallOption) (*pbsemantic.RetrieveAttributeDatasResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RetrieveAttributeDatas", varargs...)
	ret0, _ := ret[0].(*pbsemantic.RetrieveAttributeDatasResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RetrieveAttributeDatas indicates an expected call of RetrieveAttributeDatas
func (mr *MockServiceProvidersClientMockRecorder) RetrieveAttributeDatas(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RetrieveAttributeDatas", reflect.TypeOf((*MockServiceProvidersClient)(nil).RetrieveAttributeDatas), varargs...)
}

// RetrieveAttributeSchemas mocks base method
func (m *MockServiceProvidersClient) RetrieveAttributeSchemas(arg0 context.Context, arg1 *pbsemantic.RetrieveAttributeSchemasRequest, arg2 ...grpc.CallOption) (*pbsemantic.RetrieveAttributeSchemasResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RetrieveAttributeSchemas", varargs...)
	ret0, _ := ret[0].(*pbsemantic.RetrieveAttributeSchemasResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RetrieveAttributeSchemas indicates an expected call of RetrieveAttributeSchemas
func (mr *MockServiceProvidersClientMockRecorder) RetrieveAttributeSchemas(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RetrieveAttributeSchemas", reflect.TypeOf((*MockServiceProvidersClient)(nil).RetrieveAttributeSchemas), varargs...)
}

// RetrieveCategories mocks base method
func (m *MockServiceProvidersClient) RetrieveCategories(arg0 context.Context, arg1 *emptypb.Empty, arg2 ...grpc.CallOption) (*pbsemantic.RetrieveCategoriesResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RetrieveCategories", varargs...)
	ret0, _ := ret[0].(*pbsemantic.RetrieveCategoriesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RetrieveCategories indicates an expected call of RetrieveCategories
func (mr *MockServiceProvidersClientMockRecorder) RetrieveCategories(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RetrieveCategories", reflect.TypeOf((*MockServiceProvidersClient)(nil).RetrieveCategories), varargs...)
}

// RetrieveCategory mocks base method
func (m *MockServiceProvidersClient) RetrieveCategory(arg0 context.Context, arg1 *pbsemantic.RetrieveCategoryRequest, arg2 ...grpc.CallOption) (*pbsemantic.Category, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RetrieveCategory", varargs...)
	ret0, _ := ret[0].(*pbsemantic.Category)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RetrieveCategory indicates an expected call of RetrieveCategory
func (mr *MockServiceProvidersClientMockRecorder) RetrieveCategory(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RetrieveCategory", reflect.TypeOf((*MockServiceProvidersClient)(nil).RetrieveCategory), varargs...)
}

// RetrieveShippingCategories mocks base method
func (m *MockServiceProvidersClient) RetrieveShippingCategories(arg0 context.Context, arg1 *pbsemantic.RetrieveShippingCategoriesRequest, arg2 ...grpc.CallOption) (*pbsemantic.RetrieveCategoriesResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RetrieveShippingCategories", varargs...)
	ret0, _ := ret[0].(*pbsemantic.RetrieveCategoriesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RetrieveShippingCategories indicates an expected call of RetrieveShippingCategories
func (mr *MockServiceProvidersClientMockRecorder) RetrieveShippingCategories(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RetrieveShippingCategories", reflect.TypeOf((*MockServiceProvidersClient)(nil).RetrieveShippingCategories), varargs...)
}

// SetAttributeDatas mocks base method
func (m *MockServiceProvidersClient) SetAttributeDatas(arg0 context.Context, arg1 ...grpc.CallOption) (pbsemantic.ServiceProviders_SetAttributeDatasClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SetAttributeDatas", varargs...)
	ret0, _ := ret[0].(pbsemantic.ServiceProviders_SetAttributeDatasClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetAttributeDatas indicates an expected call of SetAttributeDatas
func (mr *MockServiceProvidersClientMockRecorder) SetAttributeDatas(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetAttributeDatas", reflect.TypeOf((*MockServiceProvidersClient)(nil).SetAttributeDatas), varargs...)
}

// MockMerchantsClient is a mock of MerchantsClient interface
type MockMerchantsClient struct {
	ctrl     *gomock.Controller
	recorder *MockMerchantsClientMockRecorder
}

// MockMerchantsClientMockRecorder is the mock recorder for MockMerchantsClient
type MockMerchantsClientMockRecorder struct {
	mock *MockMerchantsClient
}

// NewMockMerchantsClient creates a new mock instance
func NewMockMerchantsClient(ctrl *gomock.Controller) *MockMerchantsClient {
	mock := &MockMerchantsClient{ctrl: ctrl}
	mock.recorder = &MockMerchantsClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMerchantsClient) EXPECT() *MockMerchantsClientMockRecorder {
	return m.recorder
}

// RetrieveCategories mocks base method
func (m *MockMerchantsClient) RetrieveCategories(arg0 context.Context, arg1 *emptypb.Empty, arg2 ...grpc.CallOption) (*pbsemantic.RetrieveCategoriesResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RetrieveCategories", varargs...)
	ret0, _ := ret[0].(*pbsemantic.RetrieveCategoriesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RetrieveCategories indicates an expected call of RetrieveCategories
func (mr *MockMerchantsClientMockRecorder) RetrieveCategories(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RetrieveCategories", reflect.TypeOf((*MockMerchantsClient)(nil).RetrieveCategories), varargs...)
}

// RetrieveCategory mocks base method
func (m *MockMerchantsClient) RetrieveCategory(arg0 context.Context, arg1 *pbsemantic.RetrieveCategoryRequest, arg2 ...grpc.CallOption) (*pbsemantic.Category, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RetrieveCategory", varargs...)
	ret0, _ := ret[0].(*pbsemantic.Category)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RetrieveCategory indicates an expected call of RetrieveCategory
func (mr *MockMerchantsClientMockRecorder) RetrieveCategory(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RetrieveCategory", reflect.TypeOf((*MockMerchantsClient)(nil).RetrieveCategory), varargs...)
}

// MockProductsClient is a mock of ProductsClient interface
type MockProductsClient struct {
	ctrl     *gomock.Controller
	recorder *MockProductsClientMockRecorder
}

// MockProductsClientMockRecorder is the mock recorder for MockProductsClient
type MockProductsClientMockRecorder struct {
	mock *MockProductsClient
}

// NewMockProductsClient creates a new mock instance
func NewMockProductsClient(ctrl *gomock.Controller) *MockProductsClient {
	mock := &MockProductsClient{ctrl: ctrl}
	mock.recorder = &MockProductsClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockProductsClient) EXPECT() *MockProductsClientMockRecorder {
	return m.recorder
}

// ChangeEntityAttributeDatas mocks base method
func (m *MockProductsClient) ChangeEntityAttributeDatas(arg0 context.Context, arg1 *pbsemantic.ChangeEntityAttributeDatasRequest, arg2 ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ChangeEntityAttributeDatas", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChangeEntityAttributeDatas indicates an expected call of ChangeEntityAttributeDatas
func (mr *MockProductsClientMockRecorder) ChangeEntityAttributeDatas(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeEntityAttributeDatas", reflect.TypeOf((*MockProductsClient)(nil).ChangeEntityAttributeDatas), varargs...)
}

// CloneAttributeDatas mocks base method
func (m *MockProductsClient) CloneAttributeDatas(arg0 context.Context, arg1 *pbsemantic.CloneAttributeDatasRequest, arg2 ...grpc.CallOption) (*pbsemantic.CloneAttributeDatasResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CloneAttributeDatas", varargs...)
	ret0, _ := ret[0].(*pbsemantic.CloneAttributeDatasResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CloneAttributeDatas indicates an expected call of CloneAttributeDatas
func (mr *MockProductsClientMockRecorder) CloneAttributeDatas(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloneAttributeDatas", reflect.TypeOf((*MockProductsClient)(nil).CloneAttributeDatas), varargs...)
}

// DeleteAttributeDatas mocks base method
func (m *MockProductsClient) DeleteAttributeDatas(arg0 context.Context, arg1 *pbsemantic.DeleteAttributeDatasRequest, arg2 ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAttributeDatas", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAttributeDatas indicates an expected call of DeleteAttributeDatas
func (mr *MockProductsClientMockRecorder) DeleteAttributeDatas(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAttributeDatas", reflect.TypeOf((*MockProductsClient)(nil).DeleteAttributeDatas), varargs...)
}

// PredictCategory mocks base method
func (m *MockProductsClient) PredictCategory(arg0 context.Context, arg1 ...grpc.CallOption) (pbsemantic.Products_PredictCategoryClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PredictCategory", varargs...)
	ret0, _ := ret[0].(pbsemantic.Products_PredictCategoryClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PredictCategory indicates an expected call of PredictCategory
func (mr *MockProductsClientMockRecorder) PredictCategory(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PredictCategory", reflect.TypeOf((*MockProductsClient)(nil).PredictCategory), varargs...)
}

// RetrieveAttributeDatas mocks base method
func (m *MockProductsClient) RetrieveAttributeDatas(arg0 context.Context, arg1 *pbsemantic.RetrieveAttributeDatasRequest, arg2 ...grpc.CallOption) (*pbsemantic.RetrieveAttributeDatasResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RetrieveAttributeDatas", varargs...)
	ret0, _ := ret[0].(*pbsemantic.RetrieveAttributeDatasResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RetrieveAttributeDatas indicates an expected call of RetrieveAttributeDatas
func (mr *MockProductsClientMockRecorder) RetrieveAttributeDatas(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RetrieveAttributeDatas", reflect.TypeOf((*MockProductsClient)(nil).RetrieveAttributeDatas), varargs...)
}

// RetrieveAttributeSchemas mocks base method
func (m *MockProductsClient) RetrieveAttributeSchemas(arg0 context.Context, arg1 *pbsemantic.RetrieveAttributeSchemasRequest, arg2 ...grpc.CallOption) (*pbsemantic.RetrieveAttributeSchemasResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RetrieveAttributeSchemas", varargs...)
	ret0, _ := ret[0].(*pbsemantic.RetrieveAttributeSchemasResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RetrieveAttributeSchemas indicates an expected call of RetrieveAttributeSchemas
func (mr *MockProductsClientMockRecorder) RetrieveAttributeSchemas(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RetrieveAttributeSchemas", reflect.TypeOf((*MockProductsClient)(nil).RetrieveAttributeSchemas), varargs...)
}

// RetrieveCategories mocks base method
func (m *MockProductsClient) RetrieveCategories(arg0 context.Context, arg1 *emptypb.Empty, arg2 ...grpc.CallOption) (*pbsemantic.RetrieveCategoriesResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RetrieveCategories", varargs...)
	ret0, _ := ret[0].(*pbsemantic.RetrieveCategoriesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RetrieveCategories indicates an expected call of RetrieveCategories
func (mr *MockProductsClientMockRecorder) RetrieveCategories(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RetrieveCategories", reflect.TypeOf((*MockProductsClient)(nil).RetrieveCategories), varargs...)
}

// RetrieveCategory mocks base method
func (m *MockProductsClient) RetrieveCategory(arg0 context.Context, arg1 *pbsemantic.RetrieveCategoryRequest, arg2 ...grpc.CallOption) (*pbsemantic.Category, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RetrieveCategory", varargs...)
	ret0, _ := ret[0].(*pbsemantic.Category)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RetrieveCategory indicates an expected call of RetrieveCategory
func (mr *MockProductsClientMockRecorder) RetrieveCategory(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RetrieveCategory", reflect.TypeOf((*MockProductsClient)(nil).RetrieveCategory), varargs...)
}

// SetAttributeDatas mocks base method
func (m *MockProductsClient) SetAttributeDatas(arg0 context.Context, arg1 ...grpc.CallOption) (pbsemantic.Products_SetAttributeDatasClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SetAttributeDatas", varargs...)
	ret0, _ := ret[0].(pbsemantic.Products_SetAttributeDatasClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetAttributeDatas indicates an expected call of SetAttributeDatas
func (mr *MockProductsClientMockRecorder) SetAttributeDatas(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetAttributeDatas", reflect.TypeOf((*MockProductsClient)(nil).SetAttributeDatas), varargs...)
}

// MockProducts_PredictCategoryClient is a mock of Products_PredictCategoryClient interface
type MockProducts_PredictCategoryClient struct {
	ctrl     *gomock.Controller
	recorder *MockProducts_PredictCategoryClientMockRecorder
}

// MockProducts_PredictCategoryClientMockRecorder is the mock recorder for MockProducts_PredictCategoryClient
type MockProducts_PredictCategoryClientMockRecorder struct {
	mock *MockProducts_PredictCategoryClient
}

// NewMockProducts_PredictCategoryClient creates a new mock instance
func NewMockProducts_PredictCategoryClient(ctrl *gomock.Controller) *MockProducts_PredictCategoryClient {
	mock := &MockProducts_PredictCategoryClient{ctrl: ctrl}
	mock.recorder = &MockProducts_PredictCategoryClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockProducts_PredictCategoryClient) EXPECT() *MockProducts_PredictCategoryClientMockRecorder {
	return m.recorder
}

// CloseSend mocks base method
func (m *MockProducts_PredictCategoryClient) CloseSend() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend
func (mr *MockProducts_PredictCategoryClientMockRecorder) CloseSend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockProducts_PredictCategoryClient)(nil).CloseSend))
}

// Context mocks base method
func (m *MockProducts_PredictCategoryClient) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context
func (mr *MockProducts_PredictCategoryClientMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockProducts_PredictCategoryClient)(nil).Context))
}

// Header mocks base method
func (m *MockProducts_PredictCategoryClient) Header() (metadata.MD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header
func (mr *MockProducts_PredictCategoryClientMockRecorder) Header() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockProducts_PredictCategoryClient)(nil).Header))
}

// Recv mocks base method
func (m *MockProducts_PredictCategoryClient) Recv() (*pbsemantic.PredictCategoryResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*pbsemantic.PredictCategoryResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv
func (mr *MockProducts_PredictCategoryClientMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockProducts_PredictCategoryClient)(nil).Recv))
}

// RecvMsg mocks base method
func (m *MockProducts_PredictCategoryClient) RecvMsg(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecvMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg
func (mr *MockProducts_PredictCategoryClientMockRecorder) RecvMsg(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockProducts_PredictCategoryClient)(nil).RecvMsg), arg0)
}

// Send mocks base method
func (m *MockProducts_PredictCategoryClient) Send(arg0 *pbsemantic.PredictCategoryRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send
func (mr *MockProducts_PredictCategoryClientMockRecorder) Send(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockProducts_PredictCategoryClient)(nil).Send), arg0)
}

// SendMsg mocks base method
func (m *MockProducts_PredictCategoryClient) SendMsg(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg
func (mr *MockProducts_PredictCategoryClientMockRecorder) SendMsg(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockProducts_PredictCategoryClient)(nil).SendMsg), arg0)
}

// Trailer mocks base method
func (m *MockProducts_PredictCategoryClient) Trailer() metadata.MD {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer
func (mr *MockProducts_PredictCategoryClientMockRecorder) Trailer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockProducts_PredictCategoryClient)(nil).Trailer))
}

// MockProducts_SetAttributeDatasClient is a mock of Products_SetAttributeDatasClient interface
type MockProducts_SetAttributeDatasClient struct {
	ctrl     *gomock.Controller
	recorder *MockProducts_SetAttributeDatasClientMockRecorder
}

// MockProducts_SetAttributeDatasClientMockRecorder is the mock recorder for MockProducts_SetAttributeDatasClient
type MockProducts_SetAttributeDatasClientMockRecorder struct {
	mock *MockProducts_SetAttributeDatasClient
}

// NewMockProducts_SetAttributeDatasClient creates a new mock instance
func NewMockProducts_SetAttributeDatasClient(ctrl *gomock.Controller) *MockProducts_SetAttributeDatasClient {
	mock := &MockProducts_SetAttributeDatasClient{ctrl: ctrl}
	mock.recorder = &MockProducts_SetAttributeDatasClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockProducts_SetAttributeDatasClient) EXPECT() *MockProducts_SetAttributeDatasClientMockRecorder {
	return m.recorder
}

// CloseSend mocks base method
func (m *MockProducts_SetAttributeDatasClient) CloseSend() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend
func (mr *MockProducts_SetAttributeDatasClientMockRecorder) CloseSend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockProducts_SetAttributeDatasClient)(nil).CloseSend))
}

// Context mocks base method
func (m *MockProducts_SetAttributeDatasClient) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context
func (mr *MockProducts_SetAttributeDatasClientMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockProducts_SetAttributeDatasClient)(nil).Context))
}

// Header mocks base method
func (m *MockProducts_SetAttributeDatasClient) Header() (metadata.MD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header
func (mr *MockProducts_SetAttributeDatasClientMockRecorder) Header() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockProducts_SetAttributeDatasClient)(nil).Header))
}

// Recv mocks base method
func (m *MockProducts_SetAttributeDatasClient) Recv() (*pbsemantic.SetAttributeDatasResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*pbsemantic.SetAttributeDatasResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv
func (mr *MockProducts_SetAttributeDatasClientMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockProducts_SetAttributeDatasClient)(nil).Recv))
}

// RecvMsg mocks base method
func (m *MockProducts_SetAttributeDatasClient) RecvMsg(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecvMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg
func (mr *MockProducts_SetAttributeDatasClientMockRecorder) RecvMsg(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockProducts_SetAttributeDatasClient)(nil).RecvMsg), arg0)
}

// Send mocks base method
func (m *MockProducts_SetAttributeDatasClient) Send(arg0 *pbsemantic.SetAttributeDatasRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send
func (mr *MockProducts_SetAttributeDatasClientMockRecorder) Send(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockProducts_SetAttributeDatasClient)(nil).Send), arg0)
}

// SendMsg mocks base method
func (m *MockProducts_SetAttributeDatasClient) SendMsg(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg
func (mr *MockProducts_SetAttributeDatasClientMockRecorder) SendMsg(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockProducts_SetAttributeDatasClient)(nil).SendMsg), arg0)
}

// Trailer mocks base method
func (m *MockProducts_SetAttributeDatasClient) Trailer() metadata.MD {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer
func (mr *MockProducts_SetAttributeDatasClientMockRecorder) Trailer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockProducts_SetAttributeDatasClient)(nil).Trailer))
}
