// Code generated by MockGen. DO NOT EDIT.
// Source: ../pbmailer/mailer.pb.go

// Package pbmailertest is a generated GoMock package.
package pbmailertest

import (
	context "context"
	pbmailer "github.com/athomecomar/athome/pb/pbmailer"
	gomock "github.com/golang/mock/gomock"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	reflect "reflect"
)

// MockMailerClient is a mock of MailerClient interface
type MockMailerClient struct {
	ctrl     *gomock.Controller
	recorder *MockMailerClientMockRecorder
}

// MockMailerClientMockRecorder is the mock recorder for MockMailerClient
type MockMailerClientMockRecorder struct {
	mock *MockMailerClient
}

// NewMockMailerClient creates a new mock instance
func NewMockMailerClient(ctrl *gomock.Controller) *MockMailerClient {
	mock := &MockMailerClient{ctrl: ctrl}
	mock.recorder = &MockMailerClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMailerClient) EXPECT() *MockMailerClientMockRecorder {
	return m.recorder
}

// ForgotPassword mocks base method
func (m *MockMailerClient) ForgotPassword(ctx context.Context, in *pbmailer.ForgotPasswordRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ForgotPassword", varargs...)
	ret0, _ := ret[0].(*empty.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ForgotPassword indicates an expected call of ForgotPassword
func (mr *MockMailerClientMockRecorder) ForgotPassword(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ForgotPassword", reflect.TypeOf((*MockMailerClient)(nil).ForgotPassword), varargs...)
}

// MockMailerServer is a mock of MailerServer interface
type MockMailerServer struct {
	ctrl     *gomock.Controller
	recorder *MockMailerServerMockRecorder
}

// MockMailerServerMockRecorder is the mock recorder for MockMailerServer
type MockMailerServerMockRecorder struct {
	mock *MockMailerServer
}

// NewMockMailerServer creates a new mock instance
func NewMockMailerServer(ctrl *gomock.Controller) *MockMailerServer {
	mock := &MockMailerServer{ctrl: ctrl}
	mock.recorder = &MockMailerServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMailerServer) EXPECT() *MockMailerServerMockRecorder {
	return m.recorder
}

// ForgotPassword mocks base method
func (m *MockMailerServer) ForgotPassword(arg0 context.Context, arg1 *pbmailer.ForgotPasswordRequest) (*empty.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ForgotPassword", arg0, arg1)
	ret0, _ := ret[0].(*empty.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ForgotPassword indicates an expected call of ForgotPassword
func (mr *MockMailerServerMockRecorder) ForgotPassword(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ForgotPassword", reflect.TypeOf((*MockMailerServer)(nil).ForgotPassword), arg0, arg1)
}
