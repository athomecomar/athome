// Code generated by MockGen. DO NOT EDIT.
// Source: ../pbauth/auth.pb.go

// Package pbauthtest is a generated GoMock package.
package pbauthtest

import (
	context "context"
	pbauth "github.com/athomecomar/athome/pb/pbauth"
	gomock "github.com/golang/mock/gomock"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	reflect "reflect"
)

// MockAuthClient is a mock of AuthClient interface
type MockAuthClient struct {
	ctrl     *gomock.Controller
	recorder *MockAuthClientMockRecorder
}

// MockAuthClientMockRecorder is the mock recorder for MockAuthClient
type MockAuthClientMockRecorder struct {
	mock *MockAuthClient
}

// NewMockAuthClient creates a new mock instance
func NewMockAuthClient(ctrl *gomock.Controller) *MockAuthClient {
	mock := &MockAuthClient{ctrl: ctrl}
	mock.recorder = &MockAuthClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAuthClient) EXPECT() *MockAuthClientMockRecorder {
	return m.recorder
}

// CreateAuthentication mocks base method
func (m *MockAuthClient) CreateAuthentication(ctx context.Context, in *pbauth.CreateAuthenticationRequest, opts ...grpc.CallOption) (*pbauth.CreateAuthenticationResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateAuthentication", varargs...)
	ret0, _ := ret[0].(*pbauth.CreateAuthenticationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAuthentication indicates an expected call of CreateAuthentication
func (mr *MockAuthClientMockRecorder) CreateAuthentication(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAuthentication", reflect.TypeOf((*MockAuthClient)(nil).CreateAuthentication), varargs...)
}

// RetrieveAuthentication mocks base method
func (m *MockAuthClient) RetrieveAuthentication(ctx context.Context, in *pbauth.RetrieveAuthenticationRequest, opts ...grpc.CallOption) (*pbauth.RetrieveAuthenticationResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RetrieveAuthentication", varargs...)
	ret0, _ := ret[0].(*pbauth.RetrieveAuthenticationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RetrieveAuthentication indicates an expected call of RetrieveAuthentication
func (mr *MockAuthClientMockRecorder) RetrieveAuthentication(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RetrieveAuthentication", reflect.TypeOf((*MockAuthClient)(nil).RetrieveAuthentication), varargs...)
}

// DeleteAuthentication mocks base method
func (m *MockAuthClient) DeleteAuthentication(ctx context.Context, in *pbauth.DeleteAuthenticationRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAuthentication", varargs...)
	ret0, _ := ret[0].(*empty.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAuthentication indicates an expected call of DeleteAuthentication
func (mr *MockAuthClientMockRecorder) DeleteAuthentication(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAuthentication", reflect.TypeOf((*MockAuthClient)(nil).DeleteAuthentication), varargs...)
}

// MockAuthServer is a mock of AuthServer interface
type MockAuthServer struct {
	ctrl     *gomock.Controller
	recorder *MockAuthServerMockRecorder
}

// MockAuthServerMockRecorder is the mock recorder for MockAuthServer
type MockAuthServerMockRecorder struct {
	mock *MockAuthServer
}

// NewMockAuthServer creates a new mock instance
func NewMockAuthServer(ctrl *gomock.Controller) *MockAuthServer {
	mock := &MockAuthServer{ctrl: ctrl}
	mock.recorder = &MockAuthServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAuthServer) EXPECT() *MockAuthServerMockRecorder {
	return m.recorder
}

// CreateAuthentication mocks base method
func (m *MockAuthServer) CreateAuthentication(arg0 context.Context, arg1 *pbauth.CreateAuthenticationRequest) (*pbauth.CreateAuthenticationResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAuthentication", arg0, arg1)
	ret0, _ := ret[0].(*pbauth.CreateAuthenticationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAuthentication indicates an expected call of CreateAuthentication
func (mr *MockAuthServerMockRecorder) CreateAuthentication(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAuthentication", reflect.TypeOf((*MockAuthServer)(nil).CreateAuthentication), arg0, arg1)
}

// RetrieveAuthentication mocks base method
func (m *MockAuthServer) RetrieveAuthentication(arg0 context.Context, arg1 *pbauth.RetrieveAuthenticationRequest) (*pbauth.RetrieveAuthenticationResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RetrieveAuthentication", arg0, arg1)
	ret0, _ := ret[0].(*pbauth.RetrieveAuthenticationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RetrieveAuthentication indicates an expected call of RetrieveAuthentication
func (mr *MockAuthServerMockRecorder) RetrieveAuthentication(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RetrieveAuthentication", reflect.TypeOf((*MockAuthServer)(nil).RetrieveAuthentication), arg0, arg1)
}

// DeleteAuthentication mocks base method
func (m *MockAuthServer) DeleteAuthentication(arg0 context.Context, arg1 *pbauth.DeleteAuthenticationRequest) (*empty.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAuthentication", arg0, arg1)
	ret0, _ := ret[0].(*empty.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAuthentication indicates an expected call of DeleteAuthentication
func (mr *MockAuthServerMockRecorder) DeleteAuthentication(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAuthentication", reflect.TypeOf((*MockAuthServer)(nil).DeleteAuthentication), arg0, arg1)
}
