// Code generated by MockGen. DO NOT EDIT.
// Source: ../pbusers/users.pb.go

// Package pbuserstest is a generated GoMock package.
package pbuserstest

import (
	context "context"
	pbusers "github.com/athomecomar/athome/pb/pbusers"
	gomock "github.com/golang/mock/gomock"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	reflect "reflect"
)

// MockisSignUpIdentificationRequest_Category is a mock of isSignUpIdentificationRequest_Category interface
type MockisSignUpIdentificationRequest_Category struct {
	ctrl     *gomock.Controller
	recorder *MockisSignUpIdentificationRequest_CategoryMockRecorder
}

// MockisSignUpIdentificationRequest_CategoryMockRecorder is the mock recorder for MockisSignUpIdentificationRequest_Category
type MockisSignUpIdentificationRequest_CategoryMockRecorder struct {
	mock *MockisSignUpIdentificationRequest_Category
}

// NewMockisSignUpIdentificationRequest_Category creates a new mock instance
func NewMockisSignUpIdentificationRequest_Category(ctrl *gomock.Controller) *MockisSignUpIdentificationRequest_Category {
	mock := &MockisSignUpIdentificationRequest_Category{ctrl: ctrl}
	mock.recorder = &MockisSignUpIdentificationRequest_CategoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockisSignUpIdentificationRequest_Category) EXPECT() *MockisSignUpIdentificationRequest_CategoryMockRecorder {
	return m.recorder
}

// isSignUpIdentificationRequest_Category mocks base method
func (m *MockisSignUpIdentificationRequest_Category) isSignUpIdentificationRequest_Category() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "isSignUpIdentificationRequest_Category")
}

// isSignUpIdentificationRequest_Category indicates an expected call of isSignUpIdentificationRequest_Category
func (mr *MockisSignUpIdentificationRequest_CategoryMockRecorder) isSignUpIdentificationRequest_Category() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "isSignUpIdentificationRequest_Category", reflect.TypeOf((*MockisSignUpIdentificationRequest_Category)(nil).isSignUpIdentificationRequest_Category))
}

// MockViewerClient is a mock of ViewerClient interface
type MockViewerClient struct {
	ctrl     *gomock.Controller
	recorder *MockViewerClientMockRecorder
}

// MockViewerClientMockRecorder is the mock recorder for MockViewerClient
type MockViewerClientMockRecorder struct {
	mock *MockViewerClient
}

// NewMockViewerClient creates a new mock instance
func NewMockViewerClient(ctrl *gomock.Controller) *MockViewerClient {
	mock := &MockViewerClient{ctrl: ctrl}
	mock.recorder = &MockViewerClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockViewerClient) EXPECT() *MockViewerClientMockRecorder {
	return m.recorder
}

// RetrieveUser mocks base method
func (m *MockViewerClient) RetrieveUser(ctx context.Context, in *pbusers.RetrieveUserRequest, opts ...grpc.CallOption) (*pbusers.User, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RetrieveUser", varargs...)
	ret0, _ := ret[0].(*pbusers.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RetrieveUser indicates an expected call of RetrieveUser
func (mr *MockViewerClientMockRecorder) RetrieveUser(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RetrieveUser", reflect.TypeOf((*MockViewerClient)(nil).RetrieveUser), varargs...)
}

// MockViewerServer is a mock of ViewerServer interface
type MockViewerServer struct {
	ctrl     *gomock.Controller
	recorder *MockViewerServerMockRecorder
}

// MockViewerServerMockRecorder is the mock recorder for MockViewerServer
type MockViewerServerMockRecorder struct {
	mock *MockViewerServer
}

// NewMockViewerServer creates a new mock instance
func NewMockViewerServer(ctrl *gomock.Controller) *MockViewerServer {
	mock := &MockViewerServer{ctrl: ctrl}
	mock.recorder = &MockViewerServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockViewerServer) EXPECT() *MockViewerServerMockRecorder {
	return m.recorder
}

// RetrieveUser mocks base method
func (m *MockViewerServer) RetrieveUser(arg0 context.Context, arg1 *pbusers.RetrieveUserRequest) (*pbusers.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RetrieveUser", arg0, arg1)
	ret0, _ := ret[0].(*pbusers.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RetrieveUser indicates an expected call of RetrieveUser
func (mr *MockViewerServerMockRecorder) RetrieveUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RetrieveUser", reflect.TypeOf((*MockViewerServer)(nil).RetrieveUser), arg0, arg1)
}

// MockSignClient is a mock of SignClient interface
type MockSignClient struct {
	ctrl     *gomock.Controller
	recorder *MockSignClientMockRecorder
}

// MockSignClientMockRecorder is the mock recorder for MockSignClient
type MockSignClientMockRecorder struct {
	mock *MockSignClient
}

// NewMockSignClient creates a new mock instance
func NewMockSignClient(ctrl *gomock.Controller) *MockSignClient {
	mock := &MockSignClient{ctrl: ctrl}
	mock.recorder = &MockSignClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSignClient) EXPECT() *MockSignClientMockRecorder {
	return m.recorder
}

// Sign mocks base method
func (m *MockSignClient) Sign(ctx context.Context, in *pbusers.SignRequest, opts ...grpc.CallOption) (*pbusers.SignResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Sign", varargs...)
	ret0, _ := ret[0].(*pbusers.SignResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Sign indicates an expected call of Sign
func (mr *MockSignClientMockRecorder) Sign(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Sign", reflect.TypeOf((*MockSignClient)(nil).Sign), varargs...)
}

// SignIn mocks base method
func (m *MockSignClient) SignIn(ctx context.Context, in *pbusers.SignInRequest, opts ...grpc.CallOption) (*pbusers.SignInResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SignIn", varargs...)
	ret0, _ := ret[0].(*pbusers.SignInResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SignIn indicates an expected call of SignIn
func (mr *MockSignClientMockRecorder) SignIn(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignIn", reflect.TypeOf((*MockSignClient)(nil).SignIn), varargs...)
}

// SignOut mocks base method
func (m *MockSignClient) SignOut(ctx context.Context, in *pbusers.SignOutRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SignOut", varargs...)
	ret0, _ := ret[0].(*empty.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SignOut indicates an expected call of SignOut
func (mr *MockSignClientMockRecorder) SignOut(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignOut", reflect.TypeOf((*MockSignClient)(nil).SignOut), varargs...)
}

// SwitchRole mocks base method
func (m *MockSignClient) SwitchRole(ctx context.Context, in *pbusers.SwitchRoleRequest, opts ...grpc.CallOption) (*pbusers.SignResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SwitchRole", varargs...)
	ret0, _ := ret[0].(*pbusers.SignResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SwitchRole indicates an expected call of SwitchRole
func (mr *MockSignClientMockRecorder) SwitchRole(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SwitchRole", reflect.TypeOf((*MockSignClient)(nil).SwitchRole), varargs...)
}

// SignUpStart mocks base method
func (m *MockSignClient) SignUpStart(ctx context.Context, in *pbusers.SignUpStartRequest, opts ...grpc.CallOption) (*pbusers.SignUpStartResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SignUpStart", varargs...)
	ret0, _ := ret[0].(*pbusers.SignUpStartResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SignUpStart indicates an expected call of SignUpStart
func (mr *MockSignClientMockRecorder) SignUpStart(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignUpStart", reflect.TypeOf((*MockSignClient)(nil).SignUpStart), varargs...)
}

// SignUpShared mocks base method
func (m *MockSignClient) SignUpShared(ctx context.Context, in *pbusers.SignUpSharedRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SignUpShared", varargs...)
	ret0, _ := ret[0].(*empty.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SignUpShared indicates an expected call of SignUpShared
func (mr *MockSignClientMockRecorder) SignUpShared(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignUpShared", reflect.TypeOf((*MockSignClient)(nil).SignUpShared), varargs...)
}

// SignUpSelectCategory mocks base method
func (m *MockSignClient) SignUpSelectCategory(ctx context.Context, in *pbusers.SignUpSelectCategoryRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SignUpSelectCategory", varargs...)
	ret0, _ := ret[0].(*empty.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SignUpSelectCategory indicates an expected call of SignUpSelectCategory
func (mr *MockSignClientMockRecorder) SignUpSelectCategory(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignUpSelectCategory", reflect.TypeOf((*MockSignClient)(nil).SignUpSelectCategory), varargs...)
}

// SignUpIdentification mocks base method
func (m *MockSignClient) SignUpIdentification(ctx context.Context, in *pbusers.SignUpIdentificationRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SignUpIdentification", varargs...)
	ret0, _ := ret[0].(*empty.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SignUpIdentification indicates an expected call of SignUpIdentification
func (mr *MockSignClientMockRecorder) SignUpIdentification(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignUpIdentification", reflect.TypeOf((*MockSignClient)(nil).SignUpIdentification), varargs...)
}

// SignUpEnd mocks base method
func (m *MockSignClient) SignUpEnd(ctx context.Context, in *pbusers.SignUpEndRequest, opts ...grpc.CallOption) (*pbusers.SignUpEndResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SignUpEnd", varargs...)
	ret0, _ := ret[0].(*pbusers.SignUpEndResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SignUpEnd indicates an expected call of SignUpEnd
func (mr *MockSignClientMockRecorder) SignUpEnd(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignUpEnd", reflect.TypeOf((*MockSignClient)(nil).SignUpEnd), varargs...)
}

// RetrieveSelectableCategories mocks base method
func (m *MockSignClient) RetrieveSelectableCategories(ctx context.Context, in *pbusers.RetrieveSelectableCategoriesRequest, opts ...grpc.CallOption) (*pbusers.RetrieveSelectableCategoriesResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RetrieveSelectableCategories", varargs...)
	ret0, _ := ret[0].(*pbusers.RetrieveSelectableCategoriesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RetrieveSelectableCategories indicates an expected call of RetrieveSelectableCategories
func (mr *MockSignClientMockRecorder) RetrieveSelectableCategories(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RetrieveSelectableCategories", reflect.TypeOf((*MockSignClient)(nil).RetrieveSelectableCategories), varargs...)
}

// RetrieveOnboarding mocks base method
func (m *MockSignClient) RetrieveOnboarding(ctx context.Context, in *pbusers.RetrieveOnboardingRequest, opts ...grpc.CallOption) (*pbusers.Onboarding, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RetrieveOnboarding", varargs...)
	ret0, _ := ret[0].(*pbusers.Onboarding)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RetrieveOnboarding indicates an expected call of RetrieveOnboarding
func (mr *MockSignClientMockRecorder) RetrieveOnboarding(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RetrieveOnboarding", reflect.TypeOf((*MockSignClient)(nil).RetrieveOnboarding), varargs...)
}

// ForgotPassword mocks base method
func (m *MockSignClient) ForgotPassword(ctx context.Context, in *pbusers.ForgotPasswordRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ForgotPassword", varargs...)
	ret0, _ := ret[0].(*empty.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ForgotPassword indicates an expected call of ForgotPassword
func (mr *MockSignClientMockRecorder) ForgotPassword(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ForgotPassword", reflect.TypeOf((*MockSignClient)(nil).ForgotPassword), varargs...)
}

// ResetPassword mocks base method
func (m *MockSignClient) ResetPassword(ctx context.Context, in *pbusers.ResetPasswordRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ResetPassword", varargs...)
	ret0, _ := ret[0].(*empty.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResetPassword indicates an expected call of ResetPassword
func (mr *MockSignClientMockRecorder) ResetPassword(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetPassword", reflect.TypeOf((*MockSignClient)(nil).ResetPassword), varargs...)
}

// MockSignServer is a mock of SignServer interface
type MockSignServer struct {
	ctrl     *gomock.Controller
	recorder *MockSignServerMockRecorder
}

// MockSignServerMockRecorder is the mock recorder for MockSignServer
type MockSignServerMockRecorder struct {
	mock *MockSignServer
}

// NewMockSignServer creates a new mock instance
func NewMockSignServer(ctrl *gomock.Controller) *MockSignServer {
	mock := &MockSignServer{ctrl: ctrl}
	mock.recorder = &MockSignServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSignServer) EXPECT() *MockSignServerMockRecorder {
	return m.recorder
}

// Sign mocks base method
func (m *MockSignServer) Sign(arg0 context.Context, arg1 *pbusers.SignRequest) (*pbusers.SignResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Sign", arg0, arg1)
	ret0, _ := ret[0].(*pbusers.SignResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Sign indicates an expected call of Sign
func (mr *MockSignServerMockRecorder) Sign(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Sign", reflect.TypeOf((*MockSignServer)(nil).Sign), arg0, arg1)
}

// SignIn mocks base method
func (m *MockSignServer) SignIn(arg0 context.Context, arg1 *pbusers.SignInRequest) (*pbusers.SignInResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignIn", arg0, arg1)
	ret0, _ := ret[0].(*pbusers.SignInResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SignIn indicates an expected call of SignIn
func (mr *MockSignServerMockRecorder) SignIn(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignIn", reflect.TypeOf((*MockSignServer)(nil).SignIn), arg0, arg1)
}

// SignOut mocks base method
func (m *MockSignServer) SignOut(arg0 context.Context, arg1 *pbusers.SignOutRequest) (*empty.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignOut", arg0, arg1)
	ret0, _ := ret[0].(*empty.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SignOut indicates an expected call of SignOut
func (mr *MockSignServerMockRecorder) SignOut(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignOut", reflect.TypeOf((*MockSignServer)(nil).SignOut), arg0, arg1)
}

// SwitchRole mocks base method
func (m *MockSignServer) SwitchRole(arg0 context.Context, arg1 *pbusers.SwitchRoleRequest) (*pbusers.SignResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SwitchRole", arg0, arg1)
	ret0, _ := ret[0].(*pbusers.SignResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SwitchRole indicates an expected call of SwitchRole
func (mr *MockSignServerMockRecorder) SwitchRole(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SwitchRole", reflect.TypeOf((*MockSignServer)(nil).SwitchRole), arg0, arg1)
}

// SignUpStart mocks base method
func (m *MockSignServer) SignUpStart(arg0 context.Context, arg1 *pbusers.SignUpStartRequest) (*pbusers.SignUpStartResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignUpStart", arg0, arg1)
	ret0, _ := ret[0].(*pbusers.SignUpStartResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SignUpStart indicates an expected call of SignUpStart
func (mr *MockSignServerMockRecorder) SignUpStart(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignUpStart", reflect.TypeOf((*MockSignServer)(nil).SignUpStart), arg0, arg1)
}

// SignUpShared mocks base method
func (m *MockSignServer) SignUpShared(arg0 context.Context, arg1 *pbusers.SignUpSharedRequest) (*empty.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignUpShared", arg0, arg1)
	ret0, _ := ret[0].(*empty.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SignUpShared indicates an expected call of SignUpShared
func (mr *MockSignServerMockRecorder) SignUpShared(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignUpShared", reflect.TypeOf((*MockSignServer)(nil).SignUpShared), arg0, arg1)
}

// SignUpSelectCategory mocks base method
func (m *MockSignServer) SignUpSelectCategory(arg0 context.Context, arg1 *pbusers.SignUpSelectCategoryRequest) (*empty.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignUpSelectCategory", arg0, arg1)
	ret0, _ := ret[0].(*empty.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SignUpSelectCategory indicates an expected call of SignUpSelectCategory
func (mr *MockSignServerMockRecorder) SignUpSelectCategory(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignUpSelectCategory", reflect.TypeOf((*MockSignServer)(nil).SignUpSelectCategory), arg0, arg1)
}

// SignUpIdentification mocks base method
func (m *MockSignServer) SignUpIdentification(arg0 context.Context, arg1 *pbusers.SignUpIdentificationRequest) (*empty.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignUpIdentification", arg0, arg1)
	ret0, _ := ret[0].(*empty.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SignUpIdentification indicates an expected call of SignUpIdentification
func (mr *MockSignServerMockRecorder) SignUpIdentification(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignUpIdentification", reflect.TypeOf((*MockSignServer)(nil).SignUpIdentification), arg0, arg1)
}

// SignUpEnd mocks base method
func (m *MockSignServer) SignUpEnd(arg0 context.Context, arg1 *pbusers.SignUpEndRequest) (*pbusers.SignUpEndResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignUpEnd", arg0, arg1)
	ret0, _ := ret[0].(*pbusers.SignUpEndResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SignUpEnd indicates an expected call of SignUpEnd
func (mr *MockSignServerMockRecorder) SignUpEnd(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignUpEnd", reflect.TypeOf((*MockSignServer)(nil).SignUpEnd), arg0, arg1)
}

// RetrieveSelectableCategories mocks base method
func (m *MockSignServer) RetrieveSelectableCategories(arg0 context.Context, arg1 *pbusers.RetrieveSelectableCategoriesRequest) (*pbusers.RetrieveSelectableCategoriesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RetrieveSelectableCategories", arg0, arg1)
	ret0, _ := ret[0].(*pbusers.RetrieveSelectableCategoriesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RetrieveSelectableCategories indicates an expected call of RetrieveSelectableCategories
func (mr *MockSignServerMockRecorder) RetrieveSelectableCategories(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RetrieveSelectableCategories", reflect.TypeOf((*MockSignServer)(nil).RetrieveSelectableCategories), arg0, arg1)
}

// RetrieveOnboarding mocks base method
func (m *MockSignServer) RetrieveOnboarding(arg0 context.Context, arg1 *pbusers.RetrieveOnboardingRequest) (*pbusers.Onboarding, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RetrieveOnboarding", arg0, arg1)
	ret0, _ := ret[0].(*pbusers.Onboarding)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RetrieveOnboarding indicates an expected call of RetrieveOnboarding
func (mr *MockSignServerMockRecorder) RetrieveOnboarding(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RetrieveOnboarding", reflect.TypeOf((*MockSignServer)(nil).RetrieveOnboarding), arg0, arg1)
}

// ForgotPassword mocks base method
func (m *MockSignServer) ForgotPassword(arg0 context.Context, arg1 *pbusers.ForgotPasswordRequest) (*empty.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ForgotPassword", arg0, arg1)
	ret0, _ := ret[0].(*empty.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ForgotPassword indicates an expected call of ForgotPassword
func (mr *MockSignServerMockRecorder) ForgotPassword(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ForgotPassword", reflect.TypeOf((*MockSignServer)(nil).ForgotPassword), arg0, arg1)
}

// ResetPassword mocks base method
func (m *MockSignServer) ResetPassword(arg0 context.Context, arg1 *pbusers.ResetPasswordRequest) (*empty.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResetPassword", arg0, arg1)
	ret0, _ := ret[0].(*empty.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResetPassword indicates an expected call of ResetPassword
func (mr *MockSignServerMockRecorder) ResetPassword(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetPassword", reflect.TypeOf((*MockSignServer)(nil).ResetPassword), arg0, arg1)
}

// MockConfigClient is a mock of ConfigClient interface
type MockConfigClient struct {
	ctrl     *gomock.Controller
	recorder *MockConfigClientMockRecorder
}

// MockConfigClientMockRecorder is the mock recorder for MockConfigClient
type MockConfigClientMockRecorder struct {
	mock *MockConfigClient
}

// NewMockConfigClient creates a new mock instance
func NewMockConfigClient(ctrl *gomock.Controller) *MockConfigClient {
	mock := &MockConfigClient{ctrl: ctrl}
	mock.recorder = &MockConfigClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockConfigClient) EXPECT() *MockConfigClientMockRecorder {
	return m.recorder
}

// ChangePassword mocks base method
func (m *MockConfigClient) ChangePassword(ctx context.Context, in *pbusers.ChangePasswordRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ChangePassword", varargs...)
	ret0, _ := ret[0].(*empty.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChangePassword indicates an expected call of ChangePassword
func (mr *MockConfigClientMockRecorder) ChangePassword(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangePassword", reflect.TypeOf((*MockConfigClient)(nil).ChangePassword), varargs...)
}

// ChangeBasicInfo mocks base method
func (m *MockConfigClient) ChangeBasicInfo(ctx context.Context, in *pbusers.ChangeBasicInfoRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ChangeBasicInfo", varargs...)
	ret0, _ := ret[0].(*empty.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChangeBasicInfo indicates an expected call of ChangeBasicInfo
func (mr *MockConfigClientMockRecorder) ChangeBasicInfo(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeBasicInfo", reflect.TypeOf((*MockConfigClient)(nil).ChangeBasicInfo), varargs...)
}

// MockConfigServer is a mock of ConfigServer interface
type MockConfigServer struct {
	ctrl     *gomock.Controller
	recorder *MockConfigServerMockRecorder
}

// MockConfigServerMockRecorder is the mock recorder for MockConfigServer
type MockConfigServerMockRecorder struct {
	mock *MockConfigServer
}

// NewMockConfigServer creates a new mock instance
func NewMockConfigServer(ctrl *gomock.Controller) *MockConfigServer {
	mock := &MockConfigServer{ctrl: ctrl}
	mock.recorder = &MockConfigServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockConfigServer) EXPECT() *MockConfigServerMockRecorder {
	return m.recorder
}

// ChangePassword mocks base method
func (m *MockConfigServer) ChangePassword(arg0 context.Context, arg1 *pbusers.ChangePasswordRequest) (*empty.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangePassword", arg0, arg1)
	ret0, _ := ret[0].(*empty.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChangePassword indicates an expected call of ChangePassword
func (mr *MockConfigServerMockRecorder) ChangePassword(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangePassword", reflect.TypeOf((*MockConfigServer)(nil).ChangePassword), arg0, arg1)
}

// ChangeBasicInfo mocks base method
func (m *MockConfigServer) ChangeBasicInfo(arg0 context.Context, arg1 *pbusers.ChangeBasicInfoRequest) (*empty.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangeBasicInfo", arg0, arg1)
	ret0, _ := ret[0].(*empty.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChangeBasicInfo indicates an expected call of ChangeBasicInfo
func (mr *MockConfigServerMockRecorder) ChangeBasicInfo(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeBasicInfo", reflect.TypeOf((*MockConfigServer)(nil).ChangeBasicInfo), arg0, arg1)
}
