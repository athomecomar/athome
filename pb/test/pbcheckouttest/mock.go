// Code generated by MockGen. DO NOT EDIT.
// Source: ../pbcheckout/checkout.pb.go

// Package pbcheckouttest is a generated GoMock package.
package pbcheckouttest

import (
	context "context"
	pbcheckout "github.com/athomecomar/athome/pb/pbcheckout"
	gomock "github.com/golang/mock/gomock"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	reflect "reflect"
)

// MockCardsClient is a mock of CardsClient interface
type MockCardsClient struct {
	ctrl     *gomock.Controller
	recorder *MockCardsClientMockRecorder
}

// MockCardsClientMockRecorder is the mock recorder for MockCardsClient
type MockCardsClientMockRecorder struct {
	mock *MockCardsClient
}

// NewMockCardsClient creates a new mock instance
func NewMockCardsClient(ctrl *gomock.Controller) *MockCardsClient {
	mock := &MockCardsClient{ctrl: ctrl}
	mock.recorder = &MockCardsClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCardsClient) EXPECT() *MockCardsClientMockRecorder {
	return m.recorder
}

// CreateCard mocks base method
func (m *MockCardsClient) CreateCard(ctx context.Context, in *pbcheckout.CreateCardRequest, opts ...grpc.CallOption) (*pbcheckout.CreateCardResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateCard", varargs...)
	ret0, _ := ret[0].(*pbcheckout.CreateCardResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCard indicates an expected call of CreateCard
func (mr *MockCardsClientMockRecorder) CreateCard(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCard", reflect.TypeOf((*MockCardsClient)(nil).CreateCard), varargs...)
}

// VerifyCVV mocks base method
func (m *MockCardsClient) VerifyCVV(ctx context.Context, in *pbcheckout.VerifyCVVRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "VerifyCVV", varargs...)
	ret0, _ := ret[0].(*empty.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VerifyCVV indicates an expected call of VerifyCVV
func (mr *MockCardsClientMockRecorder) VerifyCVV(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyCVV", reflect.TypeOf((*MockCardsClient)(nil).VerifyCVV), varargs...)
}

// RetrieveMyCards mocks base method
func (m *MockCardsClient) RetrieveMyCards(ctx context.Context, in *pbcheckout.RetrieveMyCardsRequest, opts ...grpc.CallOption) (*pbcheckout.RetrieveMyCardsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RetrieveMyCards", varargs...)
	ret0, _ := ret[0].(*pbcheckout.RetrieveMyCardsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RetrieveMyCards indicates an expected call of RetrieveMyCards
func (mr *MockCardsClientMockRecorder) RetrieveMyCards(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RetrieveMyCards", reflect.TypeOf((*MockCardsClient)(nil).RetrieveMyCards), varargs...)
}

// MockCardsServer is a mock of CardsServer interface
type MockCardsServer struct {
	ctrl     *gomock.Controller
	recorder *MockCardsServerMockRecorder
}

// MockCardsServerMockRecorder is the mock recorder for MockCardsServer
type MockCardsServerMockRecorder struct {
	mock *MockCardsServer
}

// NewMockCardsServer creates a new mock instance
func NewMockCardsServer(ctrl *gomock.Controller) *MockCardsServer {
	mock := &MockCardsServer{ctrl: ctrl}
	mock.recorder = &MockCardsServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCardsServer) EXPECT() *MockCardsServerMockRecorder {
	return m.recorder
}

// CreateCard mocks base method
func (m *MockCardsServer) CreateCard(arg0 context.Context, arg1 *pbcheckout.CreateCardRequest) (*pbcheckout.CreateCardResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCard", arg0, arg1)
	ret0, _ := ret[0].(*pbcheckout.CreateCardResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCard indicates an expected call of CreateCard
func (mr *MockCardsServerMockRecorder) CreateCard(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCard", reflect.TypeOf((*MockCardsServer)(nil).CreateCard), arg0, arg1)
}

// VerifyCVV mocks base method
func (m *MockCardsServer) VerifyCVV(arg0 context.Context, arg1 *pbcheckout.VerifyCVVRequest) (*empty.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyCVV", arg0, arg1)
	ret0, _ := ret[0].(*empty.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VerifyCVV indicates an expected call of VerifyCVV
func (mr *MockCardsServerMockRecorder) VerifyCVV(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyCVV", reflect.TypeOf((*MockCardsServer)(nil).VerifyCVV), arg0, arg1)
}

// RetrieveMyCards mocks base method
func (m *MockCardsServer) RetrieveMyCards(arg0 context.Context, arg1 *pbcheckout.RetrieveMyCardsRequest) (*pbcheckout.RetrieveMyCardsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RetrieveMyCards", arg0, arg1)
	ret0, _ := ret[0].(*pbcheckout.RetrieveMyCardsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RetrieveMyCards indicates an expected call of RetrieveMyCards
func (mr *MockCardsServerMockRecorder) RetrieveMyCards(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RetrieveMyCards", reflect.TypeOf((*MockCardsServer)(nil).RetrieveMyCards), arg0, arg1)
}

// MockReservationsClient is a mock of ReservationsClient interface
type MockReservationsClient struct {
	ctrl     *gomock.Controller
	recorder *MockReservationsClientMockRecorder
}

// MockReservationsClientMockRecorder is the mock recorder for MockReservationsClient
type MockReservationsClientMockRecorder struct {
	mock *MockReservationsClient
}

// NewMockReservationsClient creates a new mock instance
func NewMockReservationsClient(ctrl *gomock.Controller) *MockReservationsClient {
	mock := &MockReservationsClient{ctrl: ctrl}
	mock.recorder = &MockReservationsClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockReservationsClient) EXPECT() *MockReservationsClientMockRecorder {
	return m.recorder
}

// CreateReservation mocks base method
func (m *MockReservationsClient) CreateReservation(ctx context.Context, in *pbcheckout.CreateReservationRequest, opts ...grpc.CallOption) (*pbcheckout.CreateReservationResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateReservation", varargs...)
	ret0, _ := ret[0].(*pbcheckout.CreateReservationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateReservation indicates an expected call of CreateReservation
func (mr *MockReservationsClientMockRecorder) CreateReservation(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateReservation", reflect.TypeOf((*MockReservationsClient)(nil).CreateReservation), varargs...)
}

// Retrieve mocks base method
func (m *MockReservationsClient) Retrieve(ctx context.Context, in *pbcheckout.RetrieveOrderRequest, opts ...grpc.CallOption) (*pbcheckout.Reservation, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Retrieve", varargs...)
	ret0, _ := ret[0].(*pbcheckout.Reservation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Retrieve indicates an expected call of Retrieve
func (mr *MockReservationsClientMockRecorder) Retrieve(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Retrieve", reflect.TypeOf((*MockReservationsClient)(nil).Retrieve), varargs...)
}

// RetrieveCurrent mocks base method
func (m *MockReservationsClient) RetrieveCurrent(ctx context.Context, in *pbcheckout.RetrieveCurrentRequest, opts ...grpc.CallOption) (*pbcheckout.RetrieveReservationResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RetrieveCurrent", varargs...)
	ret0, _ := ret[0].(*pbcheckout.RetrieveReservationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RetrieveCurrent indicates an expected call of RetrieveCurrent
func (mr *MockReservationsClientMockRecorder) RetrieveCurrent(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RetrieveCurrent", reflect.TypeOf((*MockReservationsClient)(nil).RetrieveCurrent), varargs...)
}

// StateMachine mocks base method
func (m *MockReservationsClient) StateMachine(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*pbcheckout.StateMachineResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StateMachine", varargs...)
	ret0, _ := ret[0].(*pbcheckout.StateMachineResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StateMachine indicates an expected call of StateMachine
func (mr *MockReservationsClientMockRecorder) StateMachine(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StateMachine", reflect.TypeOf((*MockReservationsClient)(nil).StateMachine), varargs...)
}

// Prev mocks base method
func (m *MockReservationsClient) Prev(ctx context.Context, in *pbcheckout.UpdateOrderStateRequest, opts ...grpc.CallOption) (*pbcheckout.RetrieveReservationResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Prev", varargs...)
	ret0, _ := ret[0].(*pbcheckout.RetrieveReservationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Prev indicates an expected call of Prev
func (mr *MockReservationsClientMockRecorder) Prev(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Prev", reflect.TypeOf((*MockReservationsClient)(nil).Prev), varargs...)
}

// Next mocks base method
func (m *MockReservationsClient) Next(ctx context.Context, in *pbcheckout.UpdateOrderStateRequest, opts ...grpc.CallOption) (*pbcheckout.RetrieveReservationResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Next", varargs...)
	ret0, _ := ret[0].(*pbcheckout.RetrieveReservationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Next indicates an expected call of Next
func (mr *MockReservationsClientMockRecorder) Next(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Next", reflect.TypeOf((*MockReservationsClient)(nil).Next), varargs...)
}

// Cancel mocks base method
func (m *MockReservationsClient) Cancel(ctx context.Context, in *pbcheckout.UpdateOrderStateRequest, opts ...grpc.CallOption) (*pbcheckout.RetrieveReservationResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Cancel", varargs...)
	ret0, _ := ret[0].(*pbcheckout.RetrieveReservationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Cancel indicates an expected call of Cancel
func (mr *MockReservationsClientMockRecorder) Cancel(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cancel", reflect.TypeOf((*MockReservationsClient)(nil).Cancel), varargs...)
}

// MockReservationsServer is a mock of ReservationsServer interface
type MockReservationsServer struct {
	ctrl     *gomock.Controller
	recorder *MockReservationsServerMockRecorder
}

// MockReservationsServerMockRecorder is the mock recorder for MockReservationsServer
type MockReservationsServerMockRecorder struct {
	mock *MockReservationsServer
}

// NewMockReservationsServer creates a new mock instance
func NewMockReservationsServer(ctrl *gomock.Controller) *MockReservationsServer {
	mock := &MockReservationsServer{ctrl: ctrl}
	mock.recorder = &MockReservationsServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockReservationsServer) EXPECT() *MockReservationsServerMockRecorder {
	return m.recorder
}

// CreateReservation mocks base method
func (m *MockReservationsServer) CreateReservation(arg0 context.Context, arg1 *pbcheckout.CreateReservationRequest) (*pbcheckout.CreateReservationResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateReservation", arg0, arg1)
	ret0, _ := ret[0].(*pbcheckout.CreateReservationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateReservation indicates an expected call of CreateReservation
func (mr *MockReservationsServerMockRecorder) CreateReservation(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateReservation", reflect.TypeOf((*MockReservationsServer)(nil).CreateReservation), arg0, arg1)
}

// Retrieve mocks base method
func (m *MockReservationsServer) Retrieve(arg0 context.Context, arg1 *pbcheckout.RetrieveOrderRequest) (*pbcheckout.Reservation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Retrieve", arg0, arg1)
	ret0, _ := ret[0].(*pbcheckout.Reservation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Retrieve indicates an expected call of Retrieve
func (mr *MockReservationsServerMockRecorder) Retrieve(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Retrieve", reflect.TypeOf((*MockReservationsServer)(nil).Retrieve), arg0, arg1)
}

// RetrieveCurrent mocks base method
func (m *MockReservationsServer) RetrieveCurrent(arg0 context.Context, arg1 *pbcheckout.RetrieveCurrentRequest) (*pbcheckout.RetrieveReservationResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RetrieveCurrent", arg0, arg1)
	ret0, _ := ret[0].(*pbcheckout.RetrieveReservationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RetrieveCurrent indicates an expected call of RetrieveCurrent
func (mr *MockReservationsServerMockRecorder) RetrieveCurrent(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RetrieveCurrent", reflect.TypeOf((*MockReservationsServer)(nil).RetrieveCurrent), arg0, arg1)
}

// StateMachine mocks base method
func (m *MockReservationsServer) StateMachine(arg0 context.Context, arg1 *empty.Empty) (*pbcheckout.StateMachineResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StateMachine", arg0, arg1)
	ret0, _ := ret[0].(*pbcheckout.StateMachineResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StateMachine indicates an expected call of StateMachine
func (mr *MockReservationsServerMockRecorder) StateMachine(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StateMachine", reflect.TypeOf((*MockReservationsServer)(nil).StateMachine), arg0, arg1)
}

// Prev mocks base method
func (m *MockReservationsServer) Prev(arg0 context.Context, arg1 *pbcheckout.UpdateOrderStateRequest) (*pbcheckout.RetrieveReservationResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Prev", arg0, arg1)
	ret0, _ := ret[0].(*pbcheckout.RetrieveReservationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Prev indicates an expected call of Prev
func (mr *MockReservationsServerMockRecorder) Prev(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Prev", reflect.TypeOf((*MockReservationsServer)(nil).Prev), arg0, arg1)
}

// Next mocks base method
func (m *MockReservationsServer) Next(arg0 context.Context, arg1 *pbcheckout.UpdateOrderStateRequest) (*pbcheckout.RetrieveReservationResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Next", arg0, arg1)
	ret0, _ := ret[0].(*pbcheckout.RetrieveReservationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Next indicates an expected call of Next
func (mr *MockReservationsServerMockRecorder) Next(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Next", reflect.TypeOf((*MockReservationsServer)(nil).Next), arg0, arg1)
}

// Cancel mocks base method
func (m *MockReservationsServer) Cancel(arg0 context.Context, arg1 *pbcheckout.UpdateOrderStateRequest) (*pbcheckout.RetrieveReservationResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Cancel", arg0, arg1)
	ret0, _ := ret[0].(*pbcheckout.RetrieveReservationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Cancel indicates an expected call of Cancel
func (mr *MockReservationsServerMockRecorder) Cancel(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cancel", reflect.TypeOf((*MockReservationsServer)(nil).Cancel), arg0, arg1)
}

// MockBookingsClient is a mock of BookingsClient interface
type MockBookingsClient struct {
	ctrl     *gomock.Controller
	recorder *MockBookingsClientMockRecorder
}

// MockBookingsClientMockRecorder is the mock recorder for MockBookingsClient
type MockBookingsClientMockRecorder struct {
	mock *MockBookingsClient
}

// NewMockBookingsClient creates a new mock instance
func NewMockBookingsClient(ctrl *gomock.Controller) *MockBookingsClient {
	mock := &MockBookingsClient{ctrl: ctrl}
	mock.recorder = &MockBookingsClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockBookingsClient) EXPECT() *MockBookingsClientMockRecorder {
	return m.recorder
}

// CreateBooking mocks base method
func (m *MockBookingsClient) CreateBooking(ctx context.Context, in *pbcheckout.CreateBookingRequest, opts ...grpc.CallOption) (*pbcheckout.CreateBookingResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateBooking", varargs...)
	ret0, _ := ret[0].(*pbcheckout.CreateBookingResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateBooking indicates an expected call of CreateBooking
func (mr *MockBookingsClientMockRecorder) CreateBooking(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBooking", reflect.TypeOf((*MockBookingsClient)(nil).CreateBooking), varargs...)
}

// Retrieve mocks base method
func (m *MockBookingsClient) Retrieve(ctx context.Context, in *pbcheckout.RetrieveOrderRequest, opts ...grpc.CallOption) (*pbcheckout.Booking, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Retrieve", varargs...)
	ret0, _ := ret[0].(*pbcheckout.Booking)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Retrieve indicates an expected call of Retrieve
func (mr *MockBookingsClientMockRecorder) Retrieve(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Retrieve", reflect.TypeOf((*MockBookingsClient)(nil).Retrieve), varargs...)
}

// RetrieveCurrent mocks base method
func (m *MockBookingsClient) RetrieveCurrent(ctx context.Context, in *pbcheckout.RetrieveCurrentRequest, opts ...grpc.CallOption) (*pbcheckout.RetrieveBookingResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RetrieveCurrent", varargs...)
	ret0, _ := ret[0].(*pbcheckout.RetrieveBookingResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RetrieveCurrent indicates an expected call of RetrieveCurrent
func (mr *MockBookingsClientMockRecorder) RetrieveCurrent(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RetrieveCurrent", reflect.TypeOf((*MockBookingsClient)(nil).RetrieveCurrent), varargs...)
}

// StateMachine mocks base method
func (m *MockBookingsClient) StateMachine(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*pbcheckout.StateMachineResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StateMachine", varargs...)
	ret0, _ := ret[0].(*pbcheckout.StateMachineResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StateMachine indicates an expected call of StateMachine
func (mr *MockBookingsClientMockRecorder) StateMachine(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StateMachine", reflect.TypeOf((*MockBookingsClient)(nil).StateMachine), varargs...)
}

// Prev mocks base method
func (m *MockBookingsClient) Prev(ctx context.Context, in *pbcheckout.UpdateOrderStateRequest, opts ...grpc.CallOption) (*pbcheckout.RetrieveBookingResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Prev", varargs...)
	ret0, _ := ret[0].(*pbcheckout.RetrieveBookingResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Prev indicates an expected call of Prev
func (mr *MockBookingsClientMockRecorder) Prev(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Prev", reflect.TypeOf((*MockBookingsClient)(nil).Prev), varargs...)
}

// Next mocks base method
func (m *MockBookingsClient) Next(ctx context.Context, in *pbcheckout.UpdateOrderStateRequest, opts ...grpc.CallOption) (*pbcheckout.RetrieveBookingResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Next", varargs...)
	ret0, _ := ret[0].(*pbcheckout.RetrieveBookingResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Next indicates an expected call of Next
func (mr *MockBookingsClientMockRecorder) Next(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Next", reflect.TypeOf((*MockBookingsClient)(nil).Next), varargs...)
}

// Cancel mocks base method
func (m *MockBookingsClient) Cancel(ctx context.Context, in *pbcheckout.UpdateOrderStateRequest, opts ...grpc.CallOption) (*pbcheckout.RetrieveBookingResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Cancel", varargs...)
	ret0, _ := ret[0].(*pbcheckout.RetrieveBookingResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Cancel indicates an expected call of Cancel
func (mr *MockBookingsClientMockRecorder) Cancel(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cancel", reflect.TypeOf((*MockBookingsClient)(nil).Cancel), varargs...)
}

// MockBookingsServer is a mock of BookingsServer interface
type MockBookingsServer struct {
	ctrl     *gomock.Controller
	recorder *MockBookingsServerMockRecorder
}

// MockBookingsServerMockRecorder is the mock recorder for MockBookingsServer
type MockBookingsServerMockRecorder struct {
	mock *MockBookingsServer
}

// NewMockBookingsServer creates a new mock instance
func NewMockBookingsServer(ctrl *gomock.Controller) *MockBookingsServer {
	mock := &MockBookingsServer{ctrl: ctrl}
	mock.recorder = &MockBookingsServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockBookingsServer) EXPECT() *MockBookingsServerMockRecorder {
	return m.recorder
}

// CreateBooking mocks base method
func (m *MockBookingsServer) CreateBooking(arg0 context.Context, arg1 *pbcheckout.CreateBookingRequest) (*pbcheckout.CreateBookingResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBooking", arg0, arg1)
	ret0, _ := ret[0].(*pbcheckout.CreateBookingResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateBooking indicates an expected call of CreateBooking
func (mr *MockBookingsServerMockRecorder) CreateBooking(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBooking", reflect.TypeOf((*MockBookingsServer)(nil).CreateBooking), arg0, arg1)
}

// Retrieve mocks base method
func (m *MockBookingsServer) Retrieve(arg0 context.Context, arg1 *pbcheckout.RetrieveOrderRequest) (*pbcheckout.Booking, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Retrieve", arg0, arg1)
	ret0, _ := ret[0].(*pbcheckout.Booking)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Retrieve indicates an expected call of Retrieve
func (mr *MockBookingsServerMockRecorder) Retrieve(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Retrieve", reflect.TypeOf((*MockBookingsServer)(nil).Retrieve), arg0, arg1)
}

// RetrieveCurrent mocks base method
func (m *MockBookingsServer) RetrieveCurrent(arg0 context.Context, arg1 *pbcheckout.RetrieveCurrentRequest) (*pbcheckout.RetrieveBookingResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RetrieveCurrent", arg0, arg1)
	ret0, _ := ret[0].(*pbcheckout.RetrieveBookingResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RetrieveCurrent indicates an expected call of RetrieveCurrent
func (mr *MockBookingsServerMockRecorder) RetrieveCurrent(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RetrieveCurrent", reflect.TypeOf((*MockBookingsServer)(nil).RetrieveCurrent), arg0, arg1)
}

// StateMachine mocks base method
func (m *MockBookingsServer) StateMachine(arg0 context.Context, arg1 *empty.Empty) (*pbcheckout.StateMachineResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StateMachine", arg0, arg1)
	ret0, _ := ret[0].(*pbcheckout.StateMachineResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StateMachine indicates an expected call of StateMachine
func (mr *MockBookingsServerMockRecorder) StateMachine(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StateMachine", reflect.TypeOf((*MockBookingsServer)(nil).StateMachine), arg0, arg1)
}

// Prev mocks base method
func (m *MockBookingsServer) Prev(arg0 context.Context, arg1 *pbcheckout.UpdateOrderStateRequest) (*pbcheckout.RetrieveBookingResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Prev", arg0, arg1)
	ret0, _ := ret[0].(*pbcheckout.RetrieveBookingResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Prev indicates an expected call of Prev
func (mr *MockBookingsServerMockRecorder) Prev(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Prev", reflect.TypeOf((*MockBookingsServer)(nil).Prev), arg0, arg1)
}

// Next mocks base method
func (m *MockBookingsServer) Next(arg0 context.Context, arg1 *pbcheckout.UpdateOrderStateRequest) (*pbcheckout.RetrieveBookingResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Next", arg0, arg1)
	ret0, _ := ret[0].(*pbcheckout.RetrieveBookingResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Next indicates an expected call of Next
func (mr *MockBookingsServerMockRecorder) Next(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Next", reflect.TypeOf((*MockBookingsServer)(nil).Next), arg0, arg1)
}

// Cancel mocks base method
func (m *MockBookingsServer) Cancel(arg0 context.Context, arg1 *pbcheckout.UpdateOrderStateRequest) (*pbcheckout.RetrieveBookingResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Cancel", arg0, arg1)
	ret0, _ := ret[0].(*pbcheckout.RetrieveBookingResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Cancel indicates an expected call of Cancel
func (mr *MockBookingsServerMockRecorder) Cancel(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cancel", reflect.TypeOf((*MockBookingsServer)(nil).Cancel), arg0, arg1)
}

// MockPurchasesClient is a mock of PurchasesClient interface
type MockPurchasesClient struct {
	ctrl     *gomock.Controller
	recorder *MockPurchasesClientMockRecorder
}

// MockPurchasesClientMockRecorder is the mock recorder for MockPurchasesClient
type MockPurchasesClientMockRecorder struct {
	mock *MockPurchasesClient
}

// NewMockPurchasesClient creates a new mock instance
func NewMockPurchasesClient(ctrl *gomock.Controller) *MockPurchasesClient {
	mock := &MockPurchasesClient{ctrl: ctrl}
	mock.recorder = &MockPurchasesClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPurchasesClient) EXPECT() *MockPurchasesClientMockRecorder {
	return m.recorder
}

// CreatePurchase mocks base method
func (m *MockPurchasesClient) CreatePurchase(ctx context.Context, in *pbcheckout.CreatePurchaseRequest, opts ...grpc.CallOption) (*pbcheckout.CreatePurchaseResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreatePurchase", varargs...)
	ret0, _ := ret[0].(*pbcheckout.CreatePurchaseResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePurchase indicates an expected call of CreatePurchase
func (mr *MockPurchasesClientMockRecorder) CreatePurchase(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePurchase", reflect.TypeOf((*MockPurchasesClient)(nil).CreatePurchase), varargs...)
}

// AssignDestAddress mocks base method
func (m *MockPurchasesClient) AssignDestAddress(ctx context.Context, in *pbcheckout.AssignDestAddressRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AssignDestAddress", varargs...)
	ret0, _ := ret[0].(*empty.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AssignDestAddress indicates an expected call of AssignDestAddress
func (mr *MockPurchasesClientMockRecorder) AssignDestAddress(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssignDestAddress", reflect.TypeOf((*MockPurchasesClient)(nil).AssignDestAddress), varargs...)
}

// Retrieve mocks base method
func (m *MockPurchasesClient) Retrieve(ctx context.Context, in *pbcheckout.RetrieveOrderRequest, opts ...grpc.CallOption) (*pbcheckout.Purchase, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Retrieve", varargs...)
	ret0, _ := ret[0].(*pbcheckout.Purchase)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Retrieve indicates an expected call of Retrieve
func (mr *MockPurchasesClientMockRecorder) Retrieve(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Retrieve", reflect.TypeOf((*MockPurchasesClient)(nil).Retrieve), varargs...)
}

// CreateShipping mocks base method
func (m *MockPurchasesClient) CreateShipping(ctx context.Context, in *pbcheckout.CreateShippingRequest, opts ...grpc.CallOption) (*pbcheckout.CreateShippingResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateShipping", varargs...)
	ret0, _ := ret[0].(*pbcheckout.CreateShippingResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateShipping indicates an expected call of CreateShipping
func (mr *MockPurchasesClientMockRecorder) CreateShipping(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateShipping", reflect.TypeOf((*MockPurchasesClient)(nil).CreateShipping), varargs...)
}

// RetrieveShippingMethods mocks base method
func (m *MockPurchasesClient) RetrieveShippingMethods(ctx context.Context, in *pbcheckout.RetrieveShippingMethodsRequest, opts ...grpc.CallOption) (*pbcheckout.RetrieveShippingMethodsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RetrieveShippingMethods", varargs...)
	ret0, _ := ret[0].(*pbcheckout.RetrieveShippingMethodsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RetrieveShippingMethods indicates an expected call of RetrieveShippingMethods
func (mr *MockPurchasesClientMockRecorder) RetrieveShippingMethods(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RetrieveShippingMethods", reflect.TypeOf((*MockPurchasesClient)(nil).RetrieveShippingMethods), varargs...)
}

// CreatePayment mocks base method
func (m *MockPurchasesClient) CreatePayment(ctx context.Context, in *pbcheckout.CreatePaymentRequest, opts ...grpc.CallOption) (*pbcheckout.CreatePaymentResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreatePayment", varargs...)
	ret0, _ := ret[0].(*pbcheckout.CreatePaymentResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePayment indicates an expected call of CreatePayment
func (mr *MockPurchasesClientMockRecorder) CreatePayment(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePayment", reflect.TypeOf((*MockPurchasesClient)(nil).CreatePayment), varargs...)
}

// ConfirmPurchase mocks base method
func (m *MockPurchasesClient) ConfirmPurchase(ctx context.Context, in *pbcheckout.CreatePurchaseRequest, opts ...grpc.CallOption) (*pbcheckout.RetrievePurchaseResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ConfirmPurchase", varargs...)
	ret0, _ := ret[0].(*pbcheckout.RetrievePurchaseResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConfirmPurchase indicates an expected call of ConfirmPurchase
func (mr *MockPurchasesClientMockRecorder) ConfirmPurchase(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConfirmPurchase", reflect.TypeOf((*MockPurchasesClient)(nil).ConfirmPurchase), varargs...)
}

// RetrieveCurrent mocks base method
func (m *MockPurchasesClient) RetrieveCurrent(ctx context.Context, in *pbcheckout.RetrieveCurrentRequest, opts ...grpc.CallOption) (*pbcheckout.RetrievePurchaseResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RetrieveCurrent", varargs...)
	ret0, _ := ret[0].(*pbcheckout.RetrievePurchaseResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RetrieveCurrent indicates an expected call of RetrieveCurrent
func (mr *MockPurchasesClientMockRecorder) RetrieveCurrent(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RetrieveCurrent", reflect.TypeOf((*MockPurchasesClient)(nil).RetrieveCurrent), varargs...)
}

// StateMachine mocks base method
func (m *MockPurchasesClient) StateMachine(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*pbcheckout.StateMachineResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StateMachine", varargs...)
	ret0, _ := ret[0].(*pbcheckout.StateMachineResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StateMachine indicates an expected call of StateMachine
func (mr *MockPurchasesClientMockRecorder) StateMachine(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StateMachine", reflect.TypeOf((*MockPurchasesClient)(nil).StateMachine), varargs...)
}

// Prev mocks base method
func (m *MockPurchasesClient) Prev(ctx context.Context, in *pbcheckout.UpdateOrderStateRequest, opts ...grpc.CallOption) (*pbcheckout.RetrievePurchaseResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Prev", varargs...)
	ret0, _ := ret[0].(*pbcheckout.RetrievePurchaseResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Prev indicates an expected call of Prev
func (mr *MockPurchasesClientMockRecorder) Prev(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Prev", reflect.TypeOf((*MockPurchasesClient)(nil).Prev), varargs...)
}

// Next mocks base method
func (m *MockPurchasesClient) Next(ctx context.Context, in *pbcheckout.UpdateOrderStateRequest, opts ...grpc.CallOption) (*pbcheckout.RetrievePurchaseResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Next", varargs...)
	ret0, _ := ret[0].(*pbcheckout.RetrievePurchaseResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Next indicates an expected call of Next
func (mr *MockPurchasesClientMockRecorder) Next(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Next", reflect.TypeOf((*MockPurchasesClient)(nil).Next), varargs...)
}

// Cancel mocks base method
func (m *MockPurchasesClient) Cancel(ctx context.Context, in *pbcheckout.UpdateOrderStateRequest, opts ...grpc.CallOption) (*pbcheckout.RetrievePurchaseResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Cancel", varargs...)
	ret0, _ := ret[0].(*pbcheckout.RetrievePurchaseResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Cancel indicates an expected call of Cancel
func (mr *MockPurchasesClientMockRecorder) Cancel(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cancel", reflect.TypeOf((*MockPurchasesClient)(nil).Cancel), varargs...)
}

// MockPurchasesServer is a mock of PurchasesServer interface
type MockPurchasesServer struct {
	ctrl     *gomock.Controller
	recorder *MockPurchasesServerMockRecorder
}

// MockPurchasesServerMockRecorder is the mock recorder for MockPurchasesServer
type MockPurchasesServerMockRecorder struct {
	mock *MockPurchasesServer
}

// NewMockPurchasesServer creates a new mock instance
func NewMockPurchasesServer(ctrl *gomock.Controller) *MockPurchasesServer {
	mock := &MockPurchasesServer{ctrl: ctrl}
	mock.recorder = &MockPurchasesServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPurchasesServer) EXPECT() *MockPurchasesServerMockRecorder {
	return m.recorder
}

// CreatePurchase mocks base method
func (m *MockPurchasesServer) CreatePurchase(arg0 context.Context, arg1 *pbcheckout.CreatePurchaseRequest) (*pbcheckout.CreatePurchaseResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePurchase", arg0, arg1)
	ret0, _ := ret[0].(*pbcheckout.CreatePurchaseResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePurchase indicates an expected call of CreatePurchase
func (mr *MockPurchasesServerMockRecorder) CreatePurchase(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePurchase", reflect.TypeOf((*MockPurchasesServer)(nil).CreatePurchase), arg0, arg1)
}

// AssignDestAddress mocks base method
func (m *MockPurchasesServer) AssignDestAddress(arg0 context.Context, arg1 *pbcheckout.AssignDestAddressRequest) (*empty.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssignDestAddress", arg0, arg1)
	ret0, _ := ret[0].(*empty.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AssignDestAddress indicates an expected call of AssignDestAddress
func (mr *MockPurchasesServerMockRecorder) AssignDestAddress(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssignDestAddress", reflect.TypeOf((*MockPurchasesServer)(nil).AssignDestAddress), arg0, arg1)
}

// Retrieve mocks base method
func (m *MockPurchasesServer) Retrieve(arg0 context.Context, arg1 *pbcheckout.RetrieveOrderRequest) (*pbcheckout.Purchase, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Retrieve", arg0, arg1)
	ret0, _ := ret[0].(*pbcheckout.Purchase)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Retrieve indicates an expected call of Retrieve
func (mr *MockPurchasesServerMockRecorder) Retrieve(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Retrieve", reflect.TypeOf((*MockPurchasesServer)(nil).Retrieve), arg0, arg1)
}

// CreateShipping mocks base method
func (m *MockPurchasesServer) CreateShipping(arg0 context.Context, arg1 *pbcheckout.CreateShippingRequest) (*pbcheckout.CreateShippingResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateShipping", arg0, arg1)
	ret0, _ := ret[0].(*pbcheckout.CreateShippingResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateShipping indicates an expected call of CreateShipping
func (mr *MockPurchasesServerMockRecorder) CreateShipping(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateShipping", reflect.TypeOf((*MockPurchasesServer)(nil).CreateShipping), arg0, arg1)
}

// RetrieveShippingMethods mocks base method
func (m *MockPurchasesServer) RetrieveShippingMethods(arg0 context.Context, arg1 *pbcheckout.RetrieveShippingMethodsRequest) (*pbcheckout.RetrieveShippingMethodsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RetrieveShippingMethods", arg0, arg1)
	ret0, _ := ret[0].(*pbcheckout.RetrieveShippingMethodsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RetrieveShippingMethods indicates an expected call of RetrieveShippingMethods
func (mr *MockPurchasesServerMockRecorder) RetrieveShippingMethods(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RetrieveShippingMethods", reflect.TypeOf((*MockPurchasesServer)(nil).RetrieveShippingMethods), arg0, arg1)
}

// CreatePayment mocks base method
func (m *MockPurchasesServer) CreatePayment(arg0 context.Context, arg1 *pbcheckout.CreatePaymentRequest) (*pbcheckout.CreatePaymentResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePayment", arg0, arg1)
	ret0, _ := ret[0].(*pbcheckout.CreatePaymentResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePayment indicates an expected call of CreatePayment
func (mr *MockPurchasesServerMockRecorder) CreatePayment(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePayment", reflect.TypeOf((*MockPurchasesServer)(nil).CreatePayment), arg0, arg1)
}

// ConfirmPurchase mocks base method
func (m *MockPurchasesServer) ConfirmPurchase(arg0 context.Context, arg1 *pbcheckout.CreatePurchaseRequest) (*pbcheckout.RetrievePurchaseResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConfirmPurchase", arg0, arg1)
	ret0, _ := ret[0].(*pbcheckout.RetrievePurchaseResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConfirmPurchase indicates an expected call of ConfirmPurchase
func (mr *MockPurchasesServerMockRecorder) ConfirmPurchase(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConfirmPurchase", reflect.TypeOf((*MockPurchasesServer)(nil).ConfirmPurchase), arg0, arg1)
}

// RetrieveCurrent mocks base method
func (m *MockPurchasesServer) RetrieveCurrent(arg0 context.Context, arg1 *pbcheckout.RetrieveCurrentRequest) (*pbcheckout.RetrievePurchaseResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RetrieveCurrent", arg0, arg1)
	ret0, _ := ret[0].(*pbcheckout.RetrievePurchaseResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RetrieveCurrent indicates an expected call of RetrieveCurrent
func (mr *MockPurchasesServerMockRecorder) RetrieveCurrent(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RetrieveCurrent", reflect.TypeOf((*MockPurchasesServer)(nil).RetrieveCurrent), arg0, arg1)
}

// StateMachine mocks base method
func (m *MockPurchasesServer) StateMachine(arg0 context.Context, arg1 *empty.Empty) (*pbcheckout.StateMachineResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StateMachine", arg0, arg1)
	ret0, _ := ret[0].(*pbcheckout.StateMachineResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StateMachine indicates an expected call of StateMachine
func (mr *MockPurchasesServerMockRecorder) StateMachine(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StateMachine", reflect.TypeOf((*MockPurchasesServer)(nil).StateMachine), arg0, arg1)
}

// Prev mocks base method
func (m *MockPurchasesServer) Prev(arg0 context.Context, arg1 *pbcheckout.UpdateOrderStateRequest) (*pbcheckout.RetrievePurchaseResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Prev", arg0, arg1)
	ret0, _ := ret[0].(*pbcheckout.RetrievePurchaseResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Prev indicates an expected call of Prev
func (mr *MockPurchasesServerMockRecorder) Prev(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Prev", reflect.TypeOf((*MockPurchasesServer)(nil).Prev), arg0, arg1)
}

// Next mocks base method
func (m *MockPurchasesServer) Next(arg0 context.Context, arg1 *pbcheckout.UpdateOrderStateRequest) (*pbcheckout.RetrievePurchaseResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Next", arg0, arg1)
	ret0, _ := ret[0].(*pbcheckout.RetrievePurchaseResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Next indicates an expected call of Next
func (mr *MockPurchasesServerMockRecorder) Next(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Next", reflect.TypeOf((*MockPurchasesServer)(nil).Next), arg0, arg1)
}

// Cancel mocks base method
func (m *MockPurchasesServer) Cancel(arg0 context.Context, arg1 *pbcheckout.UpdateOrderStateRequest) (*pbcheckout.RetrievePurchaseResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Cancel", arg0, arg1)
	ret0, _ := ret[0].(*pbcheckout.RetrievePurchaseResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Cancel indicates an expected call of Cancel
func (mr *MockPurchasesServerMockRecorder) Cancel(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cancel", reflect.TypeOf((*MockPurchasesServer)(nil).Cancel), arg0, arg1)
}
