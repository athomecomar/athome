// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: checkout.proto

package pbcheckout

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}
)

// define the regex for a UUID once up-front
var _checkout_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on VerifyCVVRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *VerifyCVVRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for AccessToken

	// no validation rules for CardId

	// no validation rules for Cvv

	return nil
}

// VerifyCVVRequestValidationError is the validation error returned by
// VerifyCVVRequest.Validate if the designated constraints aren't met.
type VerifyCVVRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VerifyCVVRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VerifyCVVRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VerifyCVVRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VerifyCVVRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VerifyCVVRequestValidationError) ErrorName() string { return "VerifyCVVRequestValidationError" }

// Error satisfies the builtin error interface
func (e VerifyCVVRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVerifyCVVRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VerifyCVVRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VerifyCVVRequestValidationError{}

// Validate checks the field values on RetrieveMyCardsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RetrieveMyCardsRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for AccessToken

	return nil
}

// RetrieveMyCardsRequestValidationError is the validation error returned by
// RetrieveMyCardsRequest.Validate if the designated constraints aren't met.
type RetrieveMyCardsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RetrieveMyCardsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RetrieveMyCardsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RetrieveMyCardsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RetrieveMyCardsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RetrieveMyCardsRequestValidationError) ErrorName() string {
	return "RetrieveMyCardsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RetrieveMyCardsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRetrieveMyCardsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RetrieveMyCardsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RetrieveMyCardsRequestValidationError{}

// Validate checks the field values on RetrieveMyCardsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RetrieveMyCardsResponse) Validate() error {
	if m == nil {
		return nil
	}

	for key, val := range m.GetCards() {
		_ = val

		// no validation rules for Cards[key]

		if v, ok := interface{}(val).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RetrieveMyCardsResponseValidationError{
					field:  fmt.Sprintf("Cards[%v]", key),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// RetrieveMyCardsResponseValidationError is the validation error returned by
// RetrieveMyCardsResponse.Validate if the designated constraints aren't met.
type RetrieveMyCardsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RetrieveMyCardsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RetrieveMyCardsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RetrieveMyCardsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RetrieveMyCardsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RetrieveMyCardsResponseValidationError) ErrorName() string {
	return "RetrieveMyCardsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RetrieveMyCardsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRetrieveMyCardsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RetrieveMyCardsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RetrieveMyCardsResponseValidationError{}

// Validate checks the field values on CreateCardRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *CreateCardRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for AccessToken

	if v, ok := interface{}(m.GetCard()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateCardRequestValidationError{
				field:  "Card",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// CreateCardRequestValidationError is the validation error returned by
// CreateCardRequest.Validate if the designated constraints aren't met.
type CreateCardRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateCardRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateCardRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateCardRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateCardRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateCardRequestValidationError) ErrorName() string {
	return "CreateCardRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateCardRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateCardRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateCardRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateCardRequestValidationError{}

// Validate checks the field values on CreatePaymentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreatePaymentRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for AccessToken

	if v, ok := interface{}(m.GetPayment()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreatePaymentRequestValidationError{
				field:  "Payment",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// CreatePaymentRequestValidationError is the validation error returned by
// CreatePaymentRequest.Validate if the designated constraints aren't met.
type CreatePaymentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreatePaymentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreatePaymentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreatePaymentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreatePaymentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreatePaymentRequestValidationError) ErrorName() string {
	return "CreatePaymentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreatePaymentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreatePaymentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreatePaymentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreatePaymentRequestValidationError{}

// Validate checks the field values on CreatePaymentResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreatePaymentResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for PaymentId

	if v, ok := interface{}(m.GetPayment()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreatePaymentResponseValidationError{
				field:  "Payment",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// CreatePaymentResponseValidationError is the validation error returned by
// CreatePaymentResponse.Validate if the designated constraints aren't met.
type CreatePaymentResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreatePaymentResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreatePaymentResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreatePaymentResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreatePaymentResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreatePaymentResponseValidationError) ErrorName() string {
	return "CreatePaymentResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreatePaymentResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreatePaymentResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreatePaymentResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreatePaymentResponseValidationError{}

// Validate checks the field values on CreateCardResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateCardResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for CardId

	if v, ok := interface{}(m.GetCard()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateCardResponseValidationError{
				field:  "Card",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// CreateCardResponseValidationError is the validation error returned by
// CreateCardResponse.Validate if the designated constraints aren't met.
type CreateCardResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateCardResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateCardResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateCardResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateCardResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateCardResponseValidationError) ErrorName() string {
	return "CreateCardResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateCardResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateCardResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateCardResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateCardResponseValidationError{}

// Validate checks the field values on UpdateOrderStateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateOrderStateRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for AccessToken

	return nil
}

// UpdateOrderStateRequestValidationError is the validation error returned by
// UpdateOrderStateRequest.Validate if the designated constraints aren't met.
type UpdateOrderStateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateOrderStateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateOrderStateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateOrderStateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateOrderStateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateOrderStateRequestValidationError) ErrorName() string {
	return "UpdateOrderStateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateOrderStateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateOrderStateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateOrderStateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateOrderStateRequestValidationError{}

// Validate checks the field values on RetrieveReservationResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RetrieveReservationResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for ReservationId

	if v, ok := interface{}(m.GetReservation()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RetrieveReservationResponseValidationError{
				field:  "Reservation",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// RetrieveReservationResponseValidationError is the validation error returned
// by RetrieveReservationResponse.Validate if the designated constraints
// aren't met.
type RetrieveReservationResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RetrieveReservationResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RetrieveReservationResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RetrieveReservationResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RetrieveReservationResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RetrieveReservationResponseValidationError) ErrorName() string {
	return "RetrieveReservationResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RetrieveReservationResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRetrieveReservationResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RetrieveReservationResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RetrieveReservationResponseValidationError{}

// Validate checks the field values on RetrieveBookingResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RetrieveBookingResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for BookingId

	if v, ok := interface{}(m.GetBooking()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RetrieveBookingResponseValidationError{
				field:  "Booking",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// RetrieveBookingResponseValidationError is the validation error returned by
// RetrieveBookingResponse.Validate if the designated constraints aren't met.
type RetrieveBookingResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RetrieveBookingResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RetrieveBookingResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RetrieveBookingResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RetrieveBookingResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RetrieveBookingResponseValidationError) ErrorName() string {
	return "RetrieveBookingResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RetrieveBookingResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRetrieveBookingResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RetrieveBookingResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RetrieveBookingResponseValidationError{}

// Validate checks the field values on RetrievePurchaseResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RetrievePurchaseResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for PurchaseId

	if v, ok := interface{}(m.GetPurchase()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RetrievePurchaseResponseValidationError{
				field:  "Purchase",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// RetrievePurchaseResponseValidationError is the validation error returned by
// RetrievePurchaseResponse.Validate if the designated constraints aren't met.
type RetrievePurchaseResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RetrievePurchaseResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RetrievePurchaseResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RetrievePurchaseResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RetrievePurchaseResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RetrievePurchaseResponseValidationError) ErrorName() string {
	return "RetrievePurchaseResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RetrievePurchaseResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRetrievePurchaseResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RetrievePurchaseResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RetrievePurchaseResponseValidationError{}

// Validate checks the field values on AssignDestAddressRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *AssignDestAddressRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for AccessToken

	// no validation rules for DestAddressId

	return nil
}

// AssignDestAddressRequestValidationError is the validation error returned by
// AssignDestAddressRequest.Validate if the designated constraints aren't met.
type AssignDestAddressRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AssignDestAddressRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AssignDestAddressRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AssignDestAddressRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AssignDestAddressRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AssignDestAddressRequestValidationError) ErrorName() string {
	return "AssignDestAddressRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AssignDestAddressRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAssignDestAddressRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AssignDestAddressRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AssignDestAddressRequestValidationError{}

// Validate checks the field values on CreateShippingRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateShippingRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for AccessToken

	if v, ok := interface{}(m.GetShipping()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateShippingRequestValidationError{
				field:  "Shipping",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// CreateShippingRequestValidationError is the validation error returned by
// CreateShippingRequest.Validate if the designated constraints aren't met.
type CreateShippingRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateShippingRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateShippingRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateShippingRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateShippingRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateShippingRequestValidationError) ErrorName() string {
	return "CreateShippingRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateShippingRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateShippingRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateShippingRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateShippingRequestValidationError{}

// Validate checks the field values on CreateShippingResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateShippingResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for ShippingId

	if v, ok := interface{}(m.GetShipping()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateShippingResponseValidationError{
				field:  "Shipping",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// CreateShippingResponseValidationError is the validation error returned by
// CreateShippingResponse.Validate if the designated constraints aren't met.
type CreateShippingResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateShippingResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateShippingResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateShippingResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateShippingResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateShippingResponseValidationError) ErrorName() string {
	return "CreateShippingResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateShippingResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateShippingResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateShippingResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateShippingResponseValidationError{}

// Validate checks the field values on Shipping with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Shipping) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Amount

	// no validation rules for EventId

	// no validation rules for DurationInMinutes

	// no validation rules for SrcAddressId

	// no validation rules for DestAddressId

	// no validation rules for DistanceInKilometers

	// no validation rules for UserId

	// no validation rules for ShippingMethodId

	return nil
}

// ShippingValidationError is the validation error returned by
// Shipping.Validate if the designated constraints aren't met.
type ShippingValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ShippingValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ShippingValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ShippingValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ShippingValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ShippingValidationError) ErrorName() string { return "ShippingValidationError" }

// Error satisfies the builtin error interface
func (e ShippingValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sShipping.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ShippingValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ShippingValidationError{}

// Validate checks the field values on RetrieveShippingMethodsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RetrieveShippingMethodsRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for AccessToken

	if v, ok := interface{}(m.GetTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RetrieveShippingMethodsRequestValidationError{
				field:  "Time",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if _, ok := _RetrieveShippingMethodsRequest_Dow_InLookup[m.GetDow()]; !ok {
		return RetrieveShippingMethodsRequestValidationError{
			field:  "Dow",
			reason: "value must be in list [monday tuesday wednesday thursday friday saturday sunday]",
		}
	}

	return nil
}

// RetrieveShippingMethodsRequestValidationError is the validation error
// returned by RetrieveShippingMethodsRequest.Validate if the designated
// constraints aren't met.
type RetrieveShippingMethodsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RetrieveShippingMethodsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RetrieveShippingMethodsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RetrieveShippingMethodsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RetrieveShippingMethodsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RetrieveShippingMethodsRequestValidationError) ErrorName() string {
	return "RetrieveShippingMethodsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RetrieveShippingMethodsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRetrieveShippingMethodsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RetrieveShippingMethodsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RetrieveShippingMethodsRequestValidationError{}

var _RetrieveShippingMethodsRequest_Dow_InLookup = map[string]struct{}{
	"monday":    {},
	"tuesday":   {},
	"wednesday": {},
	"thursday":  {},
	"friday":    {},
	"saturday":  {},
	"sunday":    {},
}

// Validate checks the field values on ShippingMethod with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *ShippingMethod) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Amount

	// no validation rules for DurationInMinutes

	// no validation rules for UserId

	// no validation rules for Title

	return nil
}

// ShippingMethodValidationError is the validation error returned by
// ShippingMethod.Validate if the designated constraints aren't met.
type ShippingMethodValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ShippingMethodValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ShippingMethodValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ShippingMethodValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ShippingMethodValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ShippingMethodValidationError) ErrorName() string { return "ShippingMethodValidationError" }

// Error satisfies the builtin error interface
func (e ShippingMethodValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sShippingMethod.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ShippingMethodValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ShippingMethodValidationError{}

// Validate checks the field values on RetrieveShippingMethodsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RetrieveShippingMethodsResponse) Validate() error {
	if m == nil {
		return nil
	}

	for key, val := range m.GetShippingMethods() {
		_ = val

		// no validation rules for ShippingMethods[key]

		if v, ok := interface{}(val).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RetrieveShippingMethodsResponseValidationError{
					field:  fmt.Sprintf("ShippingMethods[%v]", key),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// RetrieveShippingMethodsResponseValidationError is the validation error
// returned by RetrieveShippingMethodsResponse.Validate if the designated
// constraints aren't met.
type RetrieveShippingMethodsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RetrieveShippingMethodsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RetrieveShippingMethodsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RetrieveShippingMethodsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RetrieveShippingMethodsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RetrieveShippingMethodsResponseValidationError) ErrorName() string {
	return "RetrieveShippingMethodsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RetrieveShippingMethodsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRetrieveShippingMethodsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RetrieveShippingMethodsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RetrieveShippingMethodsResponseValidationError{}

// Validate checks the field values on CreateReservationResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateReservationResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for ReservationId

	if v, ok := interface{}(m.GetReservation()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateReservationResponseValidationError{
				field:  "Reservation",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// CreateReservationResponseValidationError is the validation error returned by
// CreateReservationResponse.Validate if the designated constraints aren't met.
type CreateReservationResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateReservationResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateReservationResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateReservationResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateReservationResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateReservationResponseValidationError) ErrorName() string {
	return "CreateReservationResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateReservationResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateReservationResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateReservationResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateReservationResponseValidationError{}

// Validate checks the field values on CreatePurchaseResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreatePurchaseResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for PurchaseId

	if v, ok := interface{}(m.GetPurchase()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreatePurchaseResponseValidationError{
				field:  "Purchase",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// CreatePurchaseResponseValidationError is the validation error returned by
// CreatePurchaseResponse.Validate if the designated constraints aren't met.
type CreatePurchaseResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreatePurchaseResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreatePurchaseResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreatePurchaseResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreatePurchaseResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreatePurchaseResponseValidationError) ErrorName() string {
	return "CreatePurchaseResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreatePurchaseResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreatePurchaseResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreatePurchaseResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreatePurchaseResponseValidationError{}

// Validate checks the field values on CreateBookingResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateBookingResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for BookingId

	if v, ok := interface{}(m.GetBooking()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateBookingResponseValidationError{
				field:  "Booking",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// CreateBookingResponseValidationError is the validation error returned by
// CreateBookingResponse.Validate if the designated constraints aren't met.
type CreateBookingResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateBookingResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateBookingResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateBookingResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateBookingResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateBookingResponseValidationError) ErrorName() string {
	return "CreateBookingResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateBookingResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateBookingResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateBookingResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateBookingResponseValidationError{}

// Validate checks the field values on CreateReservationRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateReservationRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for AccessToken

	// no validation rules for ProductId

	// no validation rules for Days

	return nil
}

// CreateReservationRequestValidationError is the validation error returned by
// CreateReservationRequest.Validate if the designated constraints aren't met.
type CreateReservationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateReservationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateReservationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateReservationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateReservationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateReservationRequestValidationError) ErrorName() string {
	return "CreateReservationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateReservationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateReservationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateReservationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateReservationRequestValidationError{}

// Validate checks the field values on CreateBookingRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateBookingRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for AccessToken

	// no validation rules for ServiceId

	return nil
}

// CreateBookingRequestValidationError is the validation error returned by
// CreateBookingRequest.Validate if the designated constraints aren't met.
type CreateBookingRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateBookingRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateBookingRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateBookingRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateBookingRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateBookingRequestValidationError) ErrorName() string {
	return "CreateBookingRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateBookingRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateBookingRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateBookingRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateBookingRequestValidationError{}

// Validate checks the field values on CreatePurchaseRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreatePurchaseRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for AccessToken

	// no validation rules for Items

	return nil
}

// CreatePurchaseRequestValidationError is the validation error returned by
// CreatePurchaseRequest.Validate if the designated constraints aren't met.
type CreatePurchaseRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreatePurchaseRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreatePurchaseRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreatePurchaseRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreatePurchaseRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreatePurchaseRequestValidationError) ErrorName() string {
	return "CreatePurchaseRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreatePurchaseRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreatePurchaseRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreatePurchaseRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreatePurchaseRequestValidationError{}

// Validate checks the field values on StateMachineResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *StateMachineResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetStates() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return StateMachineResponseValidationError{
					field:  fmt.Sprintf("States[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// StateMachineResponseValidationError is the validation error returned by
// StateMachineResponse.Validate if the designated constraints aren't met.
type StateMachineResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StateMachineResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StateMachineResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StateMachineResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StateMachineResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StateMachineResponseValidationError) ErrorName() string {
	return "StateMachineResponseValidationError"
}

// Error satisfies the builtin error interface
func (e StateMachineResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStateMachineResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StateMachineResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StateMachineResponseValidationError{}

// Validate checks the field values on Reservation with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *Reservation) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for UserId

	if v, ok := interface{}(m.GetTimestamp()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ReservationValidationError{
				field:  "Timestamp",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for ProductId

	// no validation rules for Days

	// no validation rules for Amount

	return nil
}

// ReservationValidationError is the validation error returned by
// Reservation.Validate if the designated constraints aren't met.
type ReservationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReservationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReservationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReservationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReservationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReservationValidationError) ErrorName() string { return "ReservationValidationError" }

// Error satisfies the builtin error interface
func (e ReservationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReservation.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReservationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReservationValidationError{}

// Validate checks the field values on Purchase with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Purchase) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for UserId

	if v, ok := interface{}(m.GetTimestamp()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PurchaseValidationError{
				field:  "Timestamp",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Items

	// no validation rules for Amount

	// no validation rules for SrcAddressId

	// no validation rules for DestAddressId

	// no validation rules for MerchantId

	// no validation rules for DistanceInKilometers

	// no validation rules for ShippingId

	return nil
}

// PurchaseValidationError is the validation error returned by
// Purchase.Validate if the designated constraints aren't met.
type PurchaseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PurchaseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PurchaseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PurchaseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PurchaseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PurchaseValidationError) ErrorName() string { return "PurchaseValidationError" }

// Error satisfies the builtin error interface
func (e PurchaseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPurchase.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PurchaseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PurchaseValidationError{}

// Validate checks the field values on Booking with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Booking) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for UserId

	if v, ok := interface{}(m.GetTimestamp()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BookingValidationError{
				field:  "Timestamp",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for ServiceId

	// no validation rules for Amount

	return nil
}

// BookingValidationError is the validation error returned by Booking.Validate
// if the designated constraints aren't met.
type BookingValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BookingValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BookingValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BookingValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BookingValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BookingValidationError) ErrorName() string { return "BookingValidationError" }

// Error satisfies the builtin error interface
func (e BookingValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBooking.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BookingValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BookingValidationError{}

// Validate checks the field values on RetrieveCurrentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RetrieveCurrentRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for AccessToken

	return nil
}

// RetrieveCurrentRequestValidationError is the validation error returned by
// RetrieveCurrentRequest.Validate if the designated constraints aren't met.
type RetrieveCurrentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RetrieveCurrentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RetrieveCurrentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RetrieveCurrentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RetrieveCurrentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RetrieveCurrentRequestValidationError) ErrorName() string {
	return "RetrieveCurrentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RetrieveCurrentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRetrieveCurrentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RetrieveCurrentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RetrieveCurrentRequestValidationError{}

// Validate checks the field values on StateChange with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *StateChange) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Name

	if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return StateChangeValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Stage

	return nil
}

// StateChangeValidationError is the validation error returned by
// StateChange.Validate if the designated constraints aren't met.
type StateChangeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StateChangeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StateChangeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StateChangeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StateChangeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StateChangeValidationError) ErrorName() string { return "StateChangeValidationError" }

// Error satisfies the builtin error interface
func (e StateChangeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStateChange.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StateChangeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StateChangeValidationError{}

// Validate checks the field values on Shipment with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Shipment) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for PurchaseId

	for key, val := range m.GetStateChanges() {
		_ = val

		// no validation rules for StateChanges[key]

		if v, ok := interface{}(val).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ShipmentValidationError{
					field:  fmt.Sprintf("StateChanges[%v]", key),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for ShippingMethodId

	if v, ok := interface{}(m.GetTimestamp()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ShipmentValidationError{
				field:  "Timestamp",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ShipmentValidationError is the validation error returned by
// Shipment.Validate if the designated constraints aren't met.
type ShipmentValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ShipmentValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ShipmentValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ShipmentValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ShipmentValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ShipmentValidationError) ErrorName() string { return "ShipmentValidationError" }

// Error satisfies the builtin error interface
func (e ShipmentValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sShipment.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ShipmentValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ShipmentValidationError{}

// Validate checks the field values on Timestamp with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Timestamp) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TimestampValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TimestampValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// TimestampValidationError is the validation error returned by
// Timestamp.Validate if the designated constraints aren't met.
type TimestampValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TimestampValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TimestampValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TimestampValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TimestampValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TimestampValidationError) ErrorName() string { return "TimestampValidationError" }

// Error satisfies the builtin error interface
func (e TimestampValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTimestamp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TimestampValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TimestampValidationError{}

// Validate checks the field values on PaymentInput with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *PaymentInput) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for PaymentMethodId

	// no validation rules for Installments

	// no validation rules for CardId

	return nil
}

// PaymentInputValidationError is the validation error returned by
// PaymentInput.Validate if the designated constraints aren't met.
type PaymentInputValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PaymentInputValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PaymentInputValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PaymentInputValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PaymentInputValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PaymentInputValidationError) ErrorName() string { return "PaymentInputValidationError" }

// Error satisfies the builtin error interface
func (e PaymentInputValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPaymentInput.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PaymentInputValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PaymentInputValidationError{}

// Validate checks the field values on Payment with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Payment) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for UserId

	// no validation rules for Amount

	if v, ok := interface{}(m.GetTimestamp()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PaymentValidationError{
				field:  "Timestamp",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for PaymentMethodId

	// no validation rules for Installments

	// no validation rules for CardId

	return nil
}

// PaymentValidationError is the validation error returned by Payment.Validate
// if the designated constraints aren't met.
type PaymentValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PaymentValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PaymentValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PaymentValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PaymentValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PaymentValidationError) ErrorName() string { return "PaymentValidationError" }

// Error satisfies the builtin error interface
func (e PaymentValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPayment.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PaymentValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PaymentValidationError{}

// Validate checks the field values on CardInput with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *CardInput) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Number

	// no validation rules for Cvv

	// no validation rules for ExpiryMonth

	// no validation rules for ExpiryYear

	if v, ok := interface{}(m.GetHolder()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CardInputValidationError{
				field:  "Holder",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// CardInputValidationError is the validation error returned by
// CardInput.Validate if the designated constraints aren't met.
type CardInputValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CardInputValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CardInputValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CardInputValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CardInputValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CardInputValidationError) ErrorName() string { return "CardInputValidationError" }

// Error satisfies the builtin error interface
func (e CardInputValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCardInput.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CardInputValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CardInputValidationError{}

// Validate checks the field values on Card with the rules defined in the proto
// definition for this message. If any rules are violated, an error is returned.
func (m *Card) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for LastFourDigits

	// no validation rules for ExpiryMonth

	// no validation rules for ExpiryYear

	if v, ok := interface{}(m.GetHolder()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CardValidationError{
				field:  "Holder",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// CardValidationError is the validation error returned by Card.Validate if the
// designated constraints aren't met.
type CardValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CardValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CardValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CardValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CardValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CardValidationError) ErrorName() string { return "CardValidationError" }

// Error satisfies the builtin error interface
func (e CardValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCard.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CardValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CardValidationError{}

// Validate checks the field values on CardHolder with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *CardHolder) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Dni

	// no validation rules for Name

	return nil
}

// CardHolderValidationError is the validation error returned by
// CardHolder.Validate if the designated constraints aren't met.
type CardHolderValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CardHolderValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CardHolderValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CardHolderValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CardHolderValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CardHolderValidationError) ErrorName() string { return "CardHolderValidationError" }

// Error satisfies the builtin error interface
func (e CardHolderValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCardHolder.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CardHolderValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CardHolderValidationError{}

// Validate checks the field values on CreateShippingRequest_Shipping with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateShippingRequest_Shipping) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for ShippingMethodId

	if v, ok := interface{}(m.GetTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateShippingRequest_ShippingValidationError{
				field:  "Time",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if _, ok := _CreateShippingRequest_Shipping_Dow_InLookup[m.GetDow()]; !ok {
		return CreateShippingRequest_ShippingValidationError{
			field:  "Dow",
			reason: "value must be in list [monday tuesday wednesday thursday friday saturday sunday]",
		}
	}

	return nil
}

// CreateShippingRequest_ShippingValidationError is the validation error
// returned by CreateShippingRequest_Shipping.Validate if the designated
// constraints aren't met.
type CreateShippingRequest_ShippingValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateShippingRequest_ShippingValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateShippingRequest_ShippingValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateShippingRequest_ShippingValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateShippingRequest_ShippingValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateShippingRequest_ShippingValidationError) ErrorName() string {
	return "CreateShippingRequest_ShippingValidationError"
}

// Error satisfies the builtin error interface
func (e CreateShippingRequest_ShippingValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateShippingRequest_Shipping.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateShippingRequest_ShippingValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateShippingRequest_ShippingValidationError{}

var _CreateShippingRequest_Shipping_Dow_InLookup = map[string]struct{}{
	"monday":    {},
	"tuesday":   {},
	"wednesday": {},
	"thursday":  {},
	"friday":    {},
	"saturday":  {},
	"sunday":    {},
}

// Validate checks the field values on StateMachineResponse_StateDefinition
// with the rules defined in the proto definition for this message. If any
// rules are violated, an error is returned.
func (m *StateMachineResponse_StateDefinition) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Stage

	// no validation rules for Name

	// no validation rules for Description

	return nil
}

// StateMachineResponse_StateDefinitionValidationError is the validation error
// returned by StateMachineResponse_StateDefinition.Validate if the designated
// constraints aren't met.
type StateMachineResponse_StateDefinitionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StateMachineResponse_StateDefinitionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StateMachineResponse_StateDefinitionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StateMachineResponse_StateDefinitionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StateMachineResponse_StateDefinitionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StateMachineResponse_StateDefinitionValidationError) ErrorName() string {
	return "StateMachineResponse_StateDefinitionValidationError"
}

// Error satisfies the builtin error interface
func (e StateMachineResponse_StateDefinitionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStateMachineResponse_StateDefinition.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StateMachineResponse_StateDefinitionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StateMachineResponse_StateDefinitionValidationError{}
