// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: checkout/checkout.proto

package checkout

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}
)

// define the regex for a UUID once up-front
var _checkout_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on RetrieveRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *RetrieveRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for AccessToken

	// no validation rules for EntityId

	return nil
}

// RetrieveRequestValidationError is the validation error returned by
// RetrieveRequest.Validate if the designated constraints aren't met.
type RetrieveRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RetrieveRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RetrieveRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RetrieveRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RetrieveRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RetrieveRequestValidationError) ErrorName() string { return "RetrieveRequestValidationError" }

// Error satisfies the builtin error interface
func (e RetrieveRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRetrieveRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RetrieveRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RetrieveRequestValidationError{}

// Validate checks the field values on RetrieveStateChangesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RetrieveStateChangesRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for AccessToken

	// no validation rules for EntityId

	return nil
}

// RetrieveStateChangesRequestValidationError is the validation error returned
// by RetrieveStateChangesRequest.Validate if the designated constraints
// aren't met.
type RetrieveStateChangesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RetrieveStateChangesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RetrieveStateChangesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RetrieveStateChangesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RetrieveStateChangesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RetrieveStateChangesRequestValidationError) ErrorName() string {
	return "RetrieveStateChangesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RetrieveStateChangesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRetrieveStateChangesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RetrieveStateChangesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RetrieveStateChangesRequestValidationError{}

// Validate checks the field values on RetrieveStateChangesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RetrieveStateChangesResponse) Validate() error {
	if m == nil {
		return nil
	}

	for key, val := range m.GetStateChanges() {
		_ = val

		// no validation rules for StateChanges[key]

		if v, ok := interface{}(val).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RetrieveStateChangesResponseValidationError{
					field:  fmt.Sprintf("StateChanges[%v]", key),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// RetrieveStateChangesResponseValidationError is the validation error returned
// by RetrieveStateChangesResponse.Validate if the designated constraints
// aren't met.
type RetrieveStateChangesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RetrieveStateChangesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RetrieveStateChangesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RetrieveStateChangesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RetrieveStateChangesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RetrieveStateChangesResponseValidationError) ErrorName() string {
	return "RetrieveStateChangesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RetrieveStateChangesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRetrieveStateChangesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RetrieveStateChangesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RetrieveStateChangesResponseValidationError{}

// Validate checks the field values on UpdateStateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateStateRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for AccessToken

	// no validation rules for EntityId

	return nil
}

// UpdateStateRequestValidationError is the validation error returned by
// UpdateStateRequest.Validate if the designated constraints aren't met.
type UpdateStateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateStateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateStateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateStateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateStateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateStateRequestValidationError) ErrorName() string {
	return "UpdateStateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateStateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateStateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateStateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateStateRequestValidationError{}

// Validate checks the field values on StateMachineResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *StateMachineResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetStates() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return StateMachineResponseValidationError{
					field:  fmt.Sprintf("States[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// StateMachineResponseValidationError is the validation error returned by
// StateMachineResponse.Validate if the designated constraints aren't met.
type StateMachineResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StateMachineResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StateMachineResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StateMachineResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StateMachineResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StateMachineResponseValidationError) ErrorName() string {
	return "StateMachineResponseValidationError"
}

// Error satisfies the builtin error interface
func (e StateMachineResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStateMachineResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StateMachineResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StateMachineResponseValidationError{}

// Validate checks the field values on StateChange with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *StateChange) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Name

	if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return StateChangeValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Stage

	return nil
}

// StateChangeValidationError is the validation error returned by
// StateChange.Validate if the designated constraints aren't met.
type StateChangeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StateChangeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StateChangeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StateChangeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StateChangeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StateChangeValidationError) ErrorName() string { return "StateChangeValidationError" }

// Error satisfies the builtin error interface
func (e StateChangeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStateChange.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StateChangeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StateChangeValidationError{}

// Validate checks the field values on Timestamp with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Timestamp) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TimestampValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TimestampValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// TimestampValidationError is the validation error returned by
// Timestamp.Validate if the designated constraints aren't met.
type TimestampValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TimestampValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TimestampValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TimestampValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TimestampValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TimestampValidationError) ErrorName() string { return "TimestampValidationError" }

// Error satisfies the builtin error interface
func (e TimestampValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTimestamp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TimestampValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TimestampValidationError{}

// Validate checks the field values on StateMachineResponse_StateDefinition
// with the rules defined in the proto definition for this message. If any
// rules are violated, an error is returned.
func (m *StateMachineResponse_StateDefinition) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Stage

	// no validation rules for Name

	// no validation rules for Description

	return nil
}

// StateMachineResponse_StateDefinitionValidationError is the validation error
// returned by StateMachineResponse_StateDefinition.Validate if the designated
// constraints aren't met.
type StateMachineResponse_StateDefinitionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StateMachineResponse_StateDefinitionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StateMachineResponse_StateDefinitionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StateMachineResponse_StateDefinitionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StateMachineResponse_StateDefinitionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StateMachineResponse_StateDefinitionValidationError) ErrorName() string {
	return "StateMachineResponse_StateDefinitionValidationError"
}

// Error satisfies the builtin error interface
func (e StateMachineResponse_StateDefinitionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStateMachineResponse_StateDefinition.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StateMachineResponse_StateDefinitionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StateMachineResponse_StateDefinitionValidationError{}
